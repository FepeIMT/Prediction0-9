
Prediction_0_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b4c  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000163b8  08007d10  08007d10  00017d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e0c8  0801e0c8  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  0801e0c8  0801e0c8  0002e0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e0d0  0801e0d0  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e0d0  0801e0d0  0002e0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e0d4  0801e0d4  0002e0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0801e0d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  20000074  0801e14c  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  0801e14c  00030628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a0e  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029f4  00000000  00000000  00044ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001120  00000000  00000000  000474a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc8  00000000  00000000  000485c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c839  00000000  00000000  00049590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eb14  00000000  00000000  00075dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010b51c  00000000  00000000  000848dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018fdf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c64  00000000  00000000  0018fe74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007cf4 	.word	0x08007cf4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	08007cf4 	.word	0x08007cf4

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b972 	b.w	8000e74 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	4604      	mov	r4, r0
 8000bb0:	4688      	mov	r8, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d14b      	bne.n	8000c4e <__udivmoddi4+0xa6>
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	4615      	mov	r5, r2
 8000bba:	d967      	bls.n	8000c8c <__udivmoddi4+0xe4>
 8000bbc:	fab2 f282 	clz	r2, r2
 8000bc0:	b14a      	cbz	r2, 8000bd6 <__udivmoddi4+0x2e>
 8000bc2:	f1c2 0720 	rsb	r7, r2, #32
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	fa20 f707 	lsr.w	r7, r0, r7
 8000bce:	4095      	lsls	r5, r2
 8000bd0:	ea47 0803 	orr.w	r8, r7, r3
 8000bd4:	4094      	lsls	r4, r2
 8000bd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bda:	0c23      	lsrs	r3, r4, #16
 8000bdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000be0:	fa1f fc85 	uxth.w	ip, r5
 8000be4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000be8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bec:	fb07 f10c 	mul.w	r1, r7, ip
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	d909      	bls.n	8000c08 <__udivmoddi4+0x60>
 8000bf4:	18eb      	adds	r3, r5, r3
 8000bf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bfa:	f080 811b 	bcs.w	8000e34 <__udivmoddi4+0x28c>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 8118 	bls.w	8000e34 <__udivmoddi4+0x28c>
 8000c04:	3f02      	subs	r7, #2
 8000c06:	442b      	add	r3, r5
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c1c:	45a4      	cmp	ip, r4
 8000c1e:	d909      	bls.n	8000c34 <__udivmoddi4+0x8c>
 8000c20:	192c      	adds	r4, r5, r4
 8000c22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c26:	f080 8107 	bcs.w	8000e38 <__udivmoddi4+0x290>
 8000c2a:	45a4      	cmp	ip, r4
 8000c2c:	f240 8104 	bls.w	8000e38 <__udivmoddi4+0x290>
 8000c30:	3802      	subs	r0, #2
 8000c32:	442c      	add	r4, r5
 8000c34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c38:	eba4 040c 	sub.w	r4, r4, ip
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	b11e      	cbz	r6, 8000c48 <__udivmoddi4+0xa0>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c6 4300 	strd	r4, r3, [r6]
 8000c48:	4639      	mov	r1, r7
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xbe>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f000 80eb 	beq.w	8000e2e <__udivmoddi4+0x286>
 8000c58:	2700      	movs	r7, #0
 8000c5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c5e:	4638      	mov	r0, r7
 8000c60:	4639      	mov	r1, r7
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f783 	clz	r7, r3
 8000c6a:	2f00      	cmp	r7, #0
 8000c6c:	d147      	bne.n	8000cfe <__udivmoddi4+0x156>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd0>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80fa 	bhi.w	8000e6c <__udivmoddi4+0x2c4>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	4698      	mov	r8, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa0>
 8000c86:	e9c6 4800 	strd	r4, r8, [r6]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xe8>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 808f 	bne.w	8000db8 <__udivmoddi4+0x210>
 8000c9a:	1b49      	subs	r1, r1, r5
 8000c9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca0:	fa1f f885 	uxth.w	r8, r5
 8000ca4:	2701      	movs	r7, #1
 8000ca6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x124>
 8000cbc:	18eb      	adds	r3, r5, r3
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x122>
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	f200 80cd 	bhi.w	8000e64 <__udivmoddi4+0x2bc>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x14c>
 8000ce4:	192c      	adds	r4, r5, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x14a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80b6 	bhi.w	8000e5e <__udivmoddi4+0x2b6>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e79f      	b.n	8000c3e <__udivmoddi4+0x96>
 8000cfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000d02:	40bb      	lsls	r3, r7
 8000d04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d1c:	4325      	orrs	r5, r4
 8000d1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d22:	0c2c      	lsrs	r4, r5, #16
 8000d24:	fb08 3319 	mls	r3, r8, r9, r3
 8000d28:	fa1f fa8e 	uxth.w	sl, lr
 8000d2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d30:	fb09 f40a 	mul.w	r4, r9, sl
 8000d34:	429c      	cmp	r4, r3
 8000d36:	fa02 f207 	lsl.w	r2, r2, r7
 8000d3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d3e:	d90b      	bls.n	8000d58 <__udivmoddi4+0x1b0>
 8000d40:	eb1e 0303 	adds.w	r3, lr, r3
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d48:	f080 8087 	bcs.w	8000e5a <__udivmoddi4+0x2b2>
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	f240 8084 	bls.w	8000e5a <__udivmoddi4+0x2b2>
 8000d52:	f1a9 0902 	sub.w	r9, r9, #2
 8000d56:	4473      	add	r3, lr
 8000d58:	1b1b      	subs	r3, r3, r4
 8000d5a:	b2ad      	uxth	r5, r5
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d6c:	45a2      	cmp	sl, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x1da>
 8000d70:	eb1e 0404 	adds.w	r4, lr, r4
 8000d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d78:	d26b      	bcs.n	8000e52 <__udivmoddi4+0x2aa>
 8000d7a:	45a2      	cmp	sl, r4
 8000d7c:	d969      	bls.n	8000e52 <__udivmoddi4+0x2aa>
 8000d7e:	3802      	subs	r0, #2
 8000d80:	4474      	add	r4, lr
 8000d82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	eba4 040a 	sub.w	r4, r4, sl
 8000d8e:	454c      	cmp	r4, r9
 8000d90:	46c2      	mov	sl, r8
 8000d92:	464b      	mov	r3, r9
 8000d94:	d354      	bcc.n	8000e40 <__udivmoddi4+0x298>
 8000d96:	d051      	beq.n	8000e3c <__udivmoddi4+0x294>
 8000d98:	2e00      	cmp	r6, #0
 8000d9a:	d069      	beq.n	8000e70 <__udivmoddi4+0x2c8>
 8000d9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000da0:	eb64 0403 	sbc.w	r4, r4, r3
 8000da4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000da8:	40fd      	lsrs	r5, r7
 8000daa:	40fc      	lsrs	r4, r7
 8000dac:	ea4c 0505 	orr.w	r5, ip, r5
 8000db0:	e9c6 5400 	strd	r5, r4, [r6]
 8000db4:	2700      	movs	r7, #0
 8000db6:	e747      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000db8:	f1c2 0320 	rsb	r3, r2, #32
 8000dbc:	fa20 f703 	lsr.w	r7, r0, r3
 8000dc0:	4095      	lsls	r5, r2
 8000dc2:	fa01 f002 	lsl.w	r0, r1, r2
 8000dc6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dce:	4338      	orrs	r0, r7
 8000dd0:	0c01      	lsrs	r1, r0, #16
 8000dd2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dd6:	fa1f f885 	uxth.w	r8, r5
 8000dda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de2:	fb07 f308 	mul.w	r3, r7, r8
 8000de6:	428b      	cmp	r3, r1
 8000de8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x256>
 8000dee:	1869      	adds	r1, r5, r1
 8000df0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000df4:	d22f      	bcs.n	8000e56 <__udivmoddi4+0x2ae>
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d92d      	bls.n	8000e56 <__udivmoddi4+0x2ae>
 8000dfa:	3f02      	subs	r7, #2
 8000dfc:	4429      	add	r1, r5
 8000dfe:	1acb      	subs	r3, r1, r3
 8000e00:	b281      	uxth	r1, r0
 8000e02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0e:	fb00 f308 	mul.w	r3, r0, r8
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x27e>
 8000e16:	1869      	adds	r1, r5, r1
 8000e18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e1c:	d217      	bcs.n	8000e4e <__udivmoddi4+0x2a6>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d915      	bls.n	8000e4e <__udivmoddi4+0x2a6>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4429      	add	r1, r5
 8000e26:	1ac9      	subs	r1, r1, r3
 8000e28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e2c:	e73b      	b.n	8000ca6 <__udivmoddi4+0xfe>
 8000e2e:	4637      	mov	r7, r6
 8000e30:	4630      	mov	r0, r6
 8000e32:	e709      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000e34:	4607      	mov	r7, r0
 8000e36:	e6e7      	b.n	8000c08 <__udivmoddi4+0x60>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6fb      	b.n	8000c34 <__udivmoddi4+0x8c>
 8000e3c:	4541      	cmp	r1, r8
 8000e3e:	d2ab      	bcs.n	8000d98 <__udivmoddi4+0x1f0>
 8000e40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e44:	eb69 020e 	sbc.w	r2, r9, lr
 8000e48:	3801      	subs	r0, #1
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	e7a4      	b.n	8000d98 <__udivmoddi4+0x1f0>
 8000e4e:	4660      	mov	r0, ip
 8000e50:	e7e9      	b.n	8000e26 <__udivmoddi4+0x27e>
 8000e52:	4618      	mov	r0, r3
 8000e54:	e795      	b.n	8000d82 <__udivmoddi4+0x1da>
 8000e56:	4667      	mov	r7, ip
 8000e58:	e7d1      	b.n	8000dfe <__udivmoddi4+0x256>
 8000e5a:	4681      	mov	r9, r0
 8000e5c:	e77c      	b.n	8000d58 <__udivmoddi4+0x1b0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	442c      	add	r4, r5
 8000e62:	e747      	b.n	8000cf4 <__udivmoddi4+0x14c>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	442b      	add	r3, r5
 8000e6a:	e72f      	b.n	8000ccc <__udivmoddi4+0x124>
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	e708      	b.n	8000c82 <__udivmoddi4+0xda>
 8000e70:	4637      	mov	r7, r6
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0xa0>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f000 fffa 	bl	8001e76 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f8b1 	bl	8000fe8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 fa07 	bl	8001298 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000e8a:	f000 f98b 	bl	80011a4 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e8e:	f000 f9d9 	bl	8001244 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000e92:	f000 f947 	bl	8001124 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  OLED_init();
 8000e96:	f000 fa9f 	bl	80013d8 <OLED_init>

  /*Compute Matrix_theta using the function matrixConverter and theta array from data.h */
  Matrix_theta = matrixConverter(TAGS, N, theta);
 8000e9a:	4a3a      	ldr	r2, [pc, #232]	; (8000f84 <main+0x10c>)
 8000e9c:	f240 1191 	movw	r1, #401	; 0x191
 8000ea0:	200a      	movs	r0, #10
 8000ea2:	f000 fc3e 	bl	8001722 <matrixConverter>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <main+0x110>)
 8000eaa:	601a      	str	r2, [r3, #0]

  /*Compute Matrix_X using the function matrixConverter and X_test2 array from data.h  */
  Matrix_X = matrixConverter(M, N, X_test2);
 8000eac:	4a37      	ldr	r2, [pc, #220]	; (8000f8c <main+0x114>)
 8000eae:	f240 1191 	movw	r1, #401	; 0x191
 8000eb2:	201e      	movs	r0, #30
 8000eb4:	f000 fc35 	bl	8001722 <matrixConverter>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <main+0x118>)
 8000ebc:	601a      	str	r2, [r3, #0]

  /*Compute Matrix transposed of Matrix_theta using the function matrixTranspossed  */
  theta_t = matrixTranspossed(TAGS, N, Matrix_theta);
 8000ebe:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <main+0x110>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	f240 1191 	movw	r1, #401	; 0x191
 8000ec8:	200a      	movs	r0, #10
 8000eca:	f000 fc71 	bl	80017b0 <matrixTranspossed>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <main+0x11c>)
 8000ed2:	601a      	str	r2, [r3, #0]

  /*Release memory of matrix using freeMatrix function  */
  freeMatrix(Matrix_theta, TAGS);
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <main+0x110>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	210a      	movs	r1, #10
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f866 	bl	8000fac <freeMatrix>

  /*Compute product of Matrix_X and theta_t using function matrixProduct */
  Xtheta = matrixProduct(M, N, TAGS, theta_t, Matrix_X);
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <main+0x11c>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <main+0x118>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	4613      	mov	r3, r2
 8000eec:	220a      	movs	r2, #10
 8000eee:	f240 1191 	movw	r1, #401	; 0x191
 8000ef2:	201e      	movs	r0, #30
 8000ef4:	f000 fc9f 	bl	8001836 <matrixProduct>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <main+0x120>)
 8000efc:	601a      	str	r2, [r3, #0]

  /*Release memory of matrix_x and matrix_theta using freeMatrix function */
  freeMatrix(Matrix_X, M);
 8000efe:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <main+0x118>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	211e      	movs	r1, #30
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 f851 	bl	8000fac <freeMatrix>
  freeMatrix(theta_t, N);
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <main+0x11c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f240 1191 	movw	r1, #401	; 0x191
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f84a 	bl	8000fac <freeMatrix>

  /*Compute the sigmoid value of each matrix element using ComputeSigmoid function */
  Matrix_sigmoid = computeSigmoid(Xtheta, M, TAGS);
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <main+0x120>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	220a      	movs	r2, #10
 8000f1e:	211e      	movs	r1, #30
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 fced 	bl	8001900 <computeSigmoid>
 8000f26:	4602      	mov	r2, r0
 8000f28:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <main+0x124>)
 8000f2a:	601a      	str	r2, [r3, #0]

  /*Release memory of matrix_theta */
  freeMatrix(Xtheta, M);
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <main+0x120>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	211e      	movs	r1, #30
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f83a 	bl	8000fac <freeMatrix>

  /*Compute array of prediction values using Compute prediction function */
  array_P = computePrediction(Matrix_sigmoid, M, TAGS);
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <main+0x124>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	220a      	movs	r2, #10
 8000f3e:	211e      	movs	r1, #30
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fd28 	bl	8001996 <computePrediction>
 8000f46:	4602      	mov	r2, r0
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <main+0x128>)
 8000f4a:	601a      	str	r2, [r3, #0]

  /* Release memory of matrix sigmoid */
  freeMatrix(Matrix_sigmoid, M);
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <main+0x124>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	211e      	movs	r1, #30
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f82a 	bl	8000fac <freeMatrix>

  /* USER CODE END 2 */

  /*Print the array_P values and compare with y_test2 if the prediction was correct. */
  printNumbers(array_P, M, y_test2);
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <main+0x128>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <main+0x12c>)
 8000f5e:	211e      	movs	r1, #30
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fadb 	bl	800151c <printNumbers>

  /*Release array_P memory   */
  free(array_P);
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <main+0x128>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f005 fda0 	bl	8006ab0 <free>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000f70:	2180      	movs	r1, #128	; 0x80
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <main+0x130>)
 8000f74:	f001 faa2 	bl	80024bc <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000f78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f7c:	f000 ffec 	bl	8001f58 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000f80:	e7f6      	b.n	8000f70 <main+0xf8>
 8000f82:	bf00      	nop
 8000f84:	08007d20 	.word	0x08007d20
 8000f88:	2000061c 	.word	0x2000061c
 8000f8c:	0800bbc8 	.word	0x0800bbc8
 8000f90:	200000a4 	.word	0x200000a4
 8000f94:	200000a0 	.word	0x200000a0
 8000f98:	20000588 	.word	0x20000588
 8000f9c:	2000009c 	.word	0x2000009c
 8000fa0:	20000618 	.word	0x20000618
 8000fa4:	080177c0 	.word	0x080177c0
 8000fa8:	48000400 	.word	0x48000400

08000fac <freeMatrix>:
/**
  * @brief: function to release dinamic memory of a float matrix
  * @retval None
  */
void freeMatrix(float** matrix, int n)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i<n; i++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	e00a      	b.n	8000fd2 <freeMatrix+0x26>
	{
		free(matrix[i]);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f005 fd72 	bl	8006ab0 <free>
	for(i = 0; i<n; i++)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dbf0      	blt.n	8000fbc <freeMatrix+0x10>
	}
	free(matrix);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f005 fd68 	bl	8006ab0 <free>
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0be      	sub	sp, #248	; 0xf8
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000ff2:	2248      	movs	r2, #72	; 0x48
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f005 fd62 	bl	8006ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2298      	movs	r2, #152	; 0x98
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f005 fd54 	bl	8006ac0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001018:	2000      	movs	r0, #0
 800101a:	f002 f877 	bl	800310c <HAL_PWREx_ControlVoltageScaling>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001024:	f000 f9d0 	bl	80013c8 <Error_Handler>
  }
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001028:	f002 f840 	bl	80030ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800102c:	4b3c      	ldr	r3, [pc, #240]	; (8001120 <SystemClock_Config+0x138>)
 800102e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001032:	4a3b      	ldr	r2, [pc, #236]	; (8001120 <SystemClock_Config+0x138>)
 8001034:	f023 0318 	bic.w	r3, r3, #24
 8001038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800103c:	2314      	movs	r3, #20
 800103e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001042:	2301      	movs	r3, #1
 8001044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001048:	2301      	movs	r3, #1
 800104a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001054:	2360      	movs	r3, #96	; 0x60
 8001056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001060:	2301      	movs	r3, #1
 8001062:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 60;
 800106c:	233c      	movs	r3, #60	; 0x3c
 800106e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001072:	2307      	movs	r3, #7
 8001074:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001078:	2302      	movs	r3, #2
 800107a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800107e:	2302      	movs	r3, #2
 8001080:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001084:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001088:	4618      	mov	r0, r3
 800108a:	f002 f903 	bl	8003294 <HAL_RCC_OscConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001094:	f000 f998 	bl	80013c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001098:	230f      	movs	r3, #15
 800109a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109e:	2303      	movs	r3, #3
 80010a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010bc:	2105      	movs	r1, #5
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 fd70 	bl	8003ba4 <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80010ca:	f000 f97d 	bl	80013c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 80010ce:	f242 0360 	movw	r3, #8288	; 0x2060
 80010d2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010d8:	2300      	movs	r3, #0
 80010da:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80010dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010e0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010e2:	2301      	movs	r3, #1
 80010e4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80010ea:	2318      	movs	r3, #24
 80010ec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010ee:	2307      	movs	r3, #7
 80010f0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80010fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010fe:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	4618      	mov	r0, r3
 8001104:	f002 fffe 	bl	8004104 <HAL_RCCEx_PeriphCLKConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 800110e:	f000 f95b 	bl	80013c8 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001112:	f003 fb5b 	bl	80047cc <HAL_RCCEx_EnableMSIPLLMode>
}
 8001116:	bf00      	nop
 8001118:	37f8      	adds	r7, #248	; 0xf8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_I2C1_Init+0x74>)
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <MX_I2C1_Init+0x78>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00501E6C;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_I2C1_Init+0x74>)
 8001130:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <MX_I2C1_Init+0x7c>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_I2C1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_I2C1_Init+0x74>)
 800113c:	2201      	movs	r2, #1
 800113e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_I2C1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_I2C1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_I2C1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115e:	480e      	ldr	r0, [pc, #56]	; (8001198 <MX_I2C1_Init+0x74>)
 8001160:	f001 f9c5 	bl	80024ee <HAL_I2C_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800116a:	f000 f92d 	bl	80013c8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800116e:	2100      	movs	r1, #0
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <MX_I2C1_Init+0x74>)
 8001172:	f001 fdbb 	bl	8002cec <HAL_I2CEx_ConfigAnalogFilter>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800117c:	f000 f924 	bl	80013c8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001180:	2100      	movs	r1, #0
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_I2C1_Init+0x74>)
 8001184:	f001 fdfd 	bl	8002d82 <HAL_I2CEx_ConfigDigitalFilter>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800118e:	f000 f91b 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000a8 	.word	0x200000a8
 800119c:	40005400 	.word	0x40005400
 80011a0:	00501e6c 	.word	0x00501e6c

080011a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <MX_LPUART1_UART_Init+0x90>)
 80011aa:	4a23      	ldr	r2, [pc, #140]	; (8001238 <MX_LPUART1_UART_Init+0x94>)
 80011ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <MX_LPUART1_UART_Init+0x90>)
 80011b0:	4a22      	ldr	r2, [pc, #136]	; (800123c <MX_LPUART1_UART_Init+0x98>)
 80011b2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_LPUART1_UART_Init+0x90>)
 80011b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <MX_LPUART1_UART_Init+0x90>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_LPUART1_UART_Init+0x90>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_LPUART1_UART_Init+0x90>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_LPUART1_UART_Init+0x90>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_LPUART1_UART_Init+0x90>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <MX_LPUART1_UART_Init+0x90>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_LPUART1_UART_Init+0x90>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_LPUART1_UART_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011ec:	4811      	ldr	r0, [pc, #68]	; (8001234 <MX_LPUART1_UART_Init+0x90>)
 80011ee:	f003 fcdd 	bl	8004bac <HAL_UART_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80011f8:	f000 f8e6 	bl	80013c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fc:	2100      	movs	r1, #0
 80011fe:	480d      	ldr	r0, [pc, #52]	; (8001234 <MX_LPUART1_UART_Init+0x90>)
 8001200:	f005 f8b7 	bl	8006372 <HAL_UARTEx_SetTxFifoThreshold>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800120a:	f000 f8dd 	bl	80013c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	4808      	ldr	r0, [pc, #32]	; (8001234 <MX_LPUART1_UART_Init+0x90>)
 8001212:	f005 f8ec 	bl	80063ee <HAL_UARTEx_SetRxFifoThreshold>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800121c:	f000 f8d4 	bl	80013c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001220:	4807      	ldr	r0, [pc, #28]	; (8001240 <MX_LPUART1_UART_Init+0x9c>)
 8001222:	f005 f86d 	bl	8006300 <HAL_UARTEx_DisableFifoMode>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800122c:	f000 f8cc 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200004fc 	.word	0x200004fc
 8001238:	40008000 	.word	0x40008000
 800123c:	00033324 	.word	0x00033324
 8001240:	2000058c 	.word	0x2000058c

08001244 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800124a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800124e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001252:	2206      	movs	r2, #6
 8001254:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001258:	2202      	movs	r2, #2
 800125a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800125e:	2201      	movs	r2, #1
 8001260:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001270:	2201      	movs	r2, #1
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800127c:	2201      	movs	r2, #1
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001282:	f001 fdca 	bl	8002e1a <HAL_PCD_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 800128c:	f000 f89c 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200000f4 	.word	0x200000f4

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <MX_GPIO_Init+0x11c>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a40      	ldr	r2, [pc, #256]	; (80013b4 <MX_GPIO_Init+0x11c>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b3e      	ldr	r3, [pc, #248]	; (80013b4 <MX_GPIO_Init+0x11c>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c6:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <MX_GPIO_Init+0x11c>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a3a      	ldr	r2, [pc, #232]	; (80013b4 <MX_GPIO_Init+0x11c>)
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <MX_GPIO_Init+0x11c>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4b35      	ldr	r3, [pc, #212]	; (80013b4 <MX_GPIO_Init+0x11c>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <MX_GPIO_Init+0x11c>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <MX_GPIO_Init+0x11c>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <MX_GPIO_Init+0x11c>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a2e      	ldr	r2, [pc, #184]	; (80013b4 <MX_GPIO_Init+0x11c>)
 80012fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <MX_GPIO_Init+0x11c>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800130e:	f001 ffb1 	bl	8003274 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <MX_GPIO_Init+0x11c>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <MX_GPIO_Init+0x11c>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <MX_GPIO_Init+0x11c>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001330:	4821      	ldr	r0, [pc, #132]	; (80013b8 <MX_GPIO_Init+0x120>)
 8001332:	f001 f8ab 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2140      	movs	r1, #64	; 0x40
 800133a:	4820      	ldr	r0, [pc, #128]	; (80013bc <MX_GPIO_Init+0x124>)
 800133c:	f001 f8a6 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001346:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <MX_GPIO_Init+0x128>)
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	481b      	ldr	r0, [pc, #108]	; (80013c4 <MX_GPIO_Init+0x12c>)
 8001356:	f000 ff07 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800135a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	4811      	ldr	r0, [pc, #68]	; (80013b8 <MX_GPIO_Init+0x120>)
 8001374:	f000 fef8 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001378:	2320      	movs	r3, #32
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	480c      	ldr	r0, [pc, #48]	; (80013bc <MX_GPIO_Init+0x124>)
 800138c:	f000 feec 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001390:	2340      	movs	r3, #64	; 0x40
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_GPIO_Init+0x124>)
 80013a8:	f000 fede 	bl	8002168 <HAL_GPIO_Init>

}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	; 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40021000 	.word	0x40021000
 80013b8:	48000400 	.word	0x48000400
 80013bc:	48001800 	.word	0x48001800
 80013c0:	10110000 	.word	0x10110000
 80013c4:	48000800 	.word	0x48000800

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <OLED_init>:
#include "message.h"

extern I2C_HandleTypeDef hi2c1;

uint8_t OLED_init()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	/* Check if the slave device is ready to start the communication */
	if (HAL_I2C_IsDeviceReady(&hi2c1, OLED_ADDRESS, 1, 20000) != HAL_OK)
 80013dc:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013e0:	2201      	movs	r2, #1
 80013e2:	2178      	movs	r1, #120	; 0x78
 80013e4:	481f      	ldr	r0, [pc, #124]	; (8001464 <OLED_init+0x8c>)
 80013e6:	f001 fa05 	bl	80027f4 <HAL_I2C_IsDeviceReady>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <OLED_init+0x1c>
	{
			/* Return false */
			return 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e035      	b.n	8001460 <OLED_init+0x88>
	}

	writeCommand(0xae); //Display OFF
 80013f4:	20ae      	movs	r0, #174	; 0xae
 80013f6:	f000 f861 	bl	80014bc <writeCommand>
	writeCommand(0xd5); //Set Dclk
 80013fa:	20d5      	movs	r0, #213	; 0xd5
 80013fc:	f000 f85e 	bl	80014bc <writeCommand>
	writeCommand(0x50); //100 hz
 8001400:	2050      	movs	r0, #80	; 0x50
 8001402:	f000 f85b 	bl	80014bc <writeCommand>
	writeCommand(0x20); // Set row address
 8001406:	2020      	movs	r0, #32
 8001408:	f000 f858 	bl	80014bc <writeCommand>
	writeCommand(0x81); //Set contrast control
 800140c:	2081      	movs	r0, #129	; 0x81
 800140e:	f000 f855 	bl	80014bc <writeCommand>
	writeCommand(0x80); //
 8001412:	2080      	movs	r0, #128	; 0x80
 8001414:	f000 f852 	bl	80014bc <writeCommand>
	writeCommand(0xa0); //Segment remap
 8001418:	20a0      	movs	r0, #160	; 0xa0
 800141a:	f000 f84f 	bl	80014bc <writeCommand>
	writeCommand(0xa4); //Set Entire Display On
 800141e:	20a4      	movs	r0, #164	; 0xa4
 8001420:	f000 f84c 	bl	80014bc <writeCommand>
	writeCommand(0xa6); //Normal Display
 8001424:	20a6      	movs	r0, #166	; 0xa6
 8001426:	f000 f849 	bl	80014bc <writeCommand>
	writeCommand(0xad); //Set external VCC
 800142a:	20ad      	movs	r0, #173	; 0xad
 800142c:	f000 f846 	bl	80014bc <writeCommand>
	writeCommand(0x80); //
 8001430:	2080      	movs	r0, #128	; 0x80
 8001432:	f000 f843 	bl	80014bc <writeCommand>
	writeCommand(0xc0); //Set common scan direction
 8001436:	20c0      	movs	r0, #192	; 0xc0
 8001438:	f000 f840 	bl	80014bc <writeCommand>
	writeCommand(0xd9); //Set phase length
 800143c:	20d9      	movs	r0, #217	; 0xd9
 800143e:	f000 f83d 	bl	80014bc <writeCommand>
	writeCommand(0x1f); //
 8001442:	201f      	movs	r0, #31
 8001444:	f000 f83a 	bl	80014bc <writeCommand>
	writeCommand(0xdb); //Set Vcomh voltage
 8001448:	20db      	movs	r0, #219	; 0xdb
 800144a:	f000 f837 	bl	80014bc <writeCommand>
	writeCommand(0x27); //
 800144e:	2027      	movs	r0, #39	; 0x27
 8001450:	f000 f834 	bl	80014bc <writeCommand>
	Clear_All_RAM();
 8001454:	f000 f808 	bl	8001468 <Clear_All_RAM>
	writeCommand(0xaf); //Display On
 8001458:	20af      	movs	r0, #175	; 0xaf
 800145a:	f000 f82f 	bl	80014bc <writeCommand>

	return 1;  /* If the device is ready return 1 */
 800145e:	2301      	movs	r3, #1

}
 8001460:	4618      	mov	r0, r3
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200000a8 	.word	0x200000a8

08001468 <Clear_All_RAM>:

void Clear_All_RAM(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
	unsigned char i, j;
	/*Cycle for to clear all ram in each page */
	for(i = 0; i < PAGES; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	71fb      	strb	r3, [r7, #7]
 8001472:	e01b      	b.n	80014ac <Clear_All_RAM+0x44>
	{
		writeCommand(0xb0+i);  /*Skip to the next page  */
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	3b50      	subs	r3, #80	; 0x50
 8001478:	b2db      	uxtb	r3, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f81e 	bl	80014bc <writeCommand>
		writeCommand(0x00);
 8001480:	2000      	movs	r0, #0
 8001482:	f000 f81b 	bl	80014bc <writeCommand>
		writeCommand(0x10);
 8001486:	2010      	movs	r0, #16
 8001488:	f000 f818 	bl	80014bc <writeCommand>
		for( j = 0; j < HEIGHT; j++)
 800148c:	2300      	movs	r3, #0
 800148e:	71bb      	strb	r3, [r7, #6]
 8001490:	e005      	b.n	800149e <Clear_All_RAM+0x36>
		{
			writeData(0x00);
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f82a 	bl	80014ec <writeData>
		for( j = 0; j < HEIGHT; j++)
 8001498:	79bb      	ldrb	r3, [r7, #6]
 800149a:	3301      	adds	r3, #1
 800149c:	71bb      	strb	r3, [r7, #6]
 800149e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	daf5      	bge.n	8001492 <Clear_All_RAM+0x2a>
	for(i = 0; i < PAGES; i++)
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	3301      	adds	r3, #1
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b0f      	cmp	r3, #15
 80014b0:	d9e0      	bls.n	8001474 <Clear_All_RAM+0xc>
		}
	}
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <writeCommand>:


void writeCommand(uint8_t data)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2];
	dt[0] = REG_COMMAND;  /*Value to indicate that the next value is a command config */
 80014c6:	2300      	movs	r3, #0
 80014c8:	733b      	strb	r3, [r7, #12]
	dt[1] = data; /* Command option */
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS , dt, 2, 10);  /*Function HAL to transmit through I2C port selected  */
 80014ce:	f107 020c 	add.w	r2, r7, #12
 80014d2:	230a      	movs	r3, #10
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2302      	movs	r3, #2
 80014d8:	2178      	movs	r1, #120	; 0x78
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <writeCommand+0x2c>)
 80014dc:	f001 f896 	bl	800260c <HAL_I2C_Master_Transmit>
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200000a8 	.word	0x200000a8

080014ec <writeData>:

void writeData(uint8_t data)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2];
	dt[0] = REG_DATA; /*Value to indicate that the next value is data to write in the RAM Oled Screen */
 80014f6:	2340      	movs	r3, #64	; 0x40
 80014f8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;     /*Value to write in the OLED Screen RAM */
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, dt, 2, 10);
 80014fe:	f107 020c 	add.w	r2, r7, #12
 8001502:	230a      	movs	r3, #10
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2302      	movs	r3, #2
 8001508:	2178      	movs	r1, #120	; 0x78
 800150a:	4803      	ldr	r0, [pc, #12]	; (8001518 <writeData+0x2c>)
 800150c:	f001 f87e 	bl	800260c <HAL_I2C_Master_Transmit>
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200000a8 	.word	0x200000a8

0800151c <printNumbers>:


void printNumbers(int* pred, uint8_t vector_size, const int* y)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	460b      	mov	r3, r1
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	72fb      	strb	r3, [r7, #11]

	/*Print message "Star Prediction.." using printBitmap function */
	printBitmap(message);
 800152a:	4852      	ldr	r0, [pc, #328]	; (8001674 <printNumbers+0x158>)
 800152c:	f000 f8bc 	bl	80016a8 <printBitmap>
	HAL_Delay(1000);
 8001530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001534:	f000 fd10 	bl	8001f58 <HAL_Delay>
	Clear_All_RAM();
 8001538:	f7ff ff96 	bl	8001468 <Clear_All_RAM>

	unsigned char i;

	/* Cycle for to print all numbers of the vector P */
	for(i = 0; i < vector_size; i++)
 800153c:	2300      	movs	r3, #0
 800153e:	75fb      	strb	r3, [r7, #23]
 8001540:	e08e      	b.n	8001660 <printNumbers+0x144>
	{
		/*Compare value to determine which number we have to print */
		if(pred[i] == 10)
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4413      	add	r3, r2
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b0a      	cmp	r3, #10
 800154e:	d103      	bne.n	8001558 <printNumbers+0x3c>
		{
			printBitmap(zero);
 8001550:	4849      	ldr	r0, [pc, #292]	; (8001678 <printNumbers+0x15c>)
 8001552:	f000 f8a9 	bl	80016a8 <printBitmap>
 8001556:	e061      	b.n	800161c <printNumbers+0x100>
		}
		else if(pred[i] == 1)
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d103      	bne.n	800156e <printNumbers+0x52>
		{
			printBitmap(one);
 8001566:	4845      	ldr	r0, [pc, #276]	; (800167c <printNumbers+0x160>)
 8001568:	f000 f89e 	bl	80016a8 <printBitmap>
 800156c:	e056      	b.n	800161c <printNumbers+0x100>
		}
		else if(pred[i] == 2)
 800156e:	7dfb      	ldrb	r3, [r7, #23]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4413      	add	r3, r2
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d103      	bne.n	8001584 <printNumbers+0x68>
		{
			printBitmap(two);
 800157c:	4840      	ldr	r0, [pc, #256]	; (8001680 <printNumbers+0x164>)
 800157e:	f000 f893 	bl	80016a8 <printBitmap>
 8001582:	e04b      	b.n	800161c <printNumbers+0x100>
		}
		else if(pred[i] == 3)
 8001584:	7dfb      	ldrb	r3, [r7, #23]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d103      	bne.n	800159a <printNumbers+0x7e>
		{
			printBitmap(three);
 8001592:	483c      	ldr	r0, [pc, #240]	; (8001684 <printNumbers+0x168>)
 8001594:	f000 f888 	bl	80016a8 <printBitmap>
 8001598:	e040      	b.n	800161c <printNumbers+0x100>
		}
		else if(pred[i] == 4)
 800159a:	7dfb      	ldrb	r3, [r7, #23]
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4413      	add	r3, r2
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d103      	bne.n	80015b0 <printNumbers+0x94>
		{
			printBitmap(four);
 80015a8:	4837      	ldr	r0, [pc, #220]	; (8001688 <printNumbers+0x16c>)
 80015aa:	f000 f87d 	bl	80016a8 <printBitmap>
 80015ae:	e035      	b.n	800161c <printNumbers+0x100>
		}
		else if(pred[i] == 5)
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b05      	cmp	r3, #5
 80015bc:	d103      	bne.n	80015c6 <printNumbers+0xaa>
		{
			printBitmap(five);
 80015be:	4833      	ldr	r0, [pc, #204]	; (800168c <printNumbers+0x170>)
 80015c0:	f000 f872 	bl	80016a8 <printBitmap>
 80015c4:	e02a      	b.n	800161c <printNumbers+0x100>
		}
		else if(pred[i] == 6)
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b06      	cmp	r3, #6
 80015d2:	d103      	bne.n	80015dc <printNumbers+0xc0>
		{
			printBitmap(six);
 80015d4:	482e      	ldr	r0, [pc, #184]	; (8001690 <printNumbers+0x174>)
 80015d6:	f000 f867 	bl	80016a8 <printBitmap>
 80015da:	e01f      	b.n	800161c <printNumbers+0x100>
		}
		else if(pred[i] == 7)
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b07      	cmp	r3, #7
 80015e8:	d103      	bne.n	80015f2 <printNumbers+0xd6>
		{
			printBitmap(seven);
 80015ea:	482a      	ldr	r0, [pc, #168]	; (8001694 <printNumbers+0x178>)
 80015ec:	f000 f85c 	bl	80016a8 <printBitmap>
 80015f0:	e014      	b.n	800161c <printNumbers+0x100>
		}
		else if(pred[i] == 8)
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4413      	add	r3, r2
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d103      	bne.n	8001608 <printNumbers+0xec>
		{
			printBitmap(eight);
 8001600:	4825      	ldr	r0, [pc, #148]	; (8001698 <printNumbers+0x17c>)
 8001602:	f000 f851 	bl	80016a8 <printBitmap>
 8001606:	e009      	b.n	800161c <printNumbers+0x100>
		}
		else if(pred[i] == 9)
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b09      	cmp	r3, #9
 8001614:	d102      	bne.n	800161c <printNumbers+0x100>
		{
			printBitmap(nine);
 8001616:	4821      	ldr	r0, [pc, #132]	; (800169c <printNumbers+0x180>)
 8001618:	f000 f846 	bl	80016a8 <printBitmap>
		}
		HAL_Delay(800);
 800161c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001620:	f000 fc9a 	bl	8001f58 <HAL_Delay>
		Clear_All_RAM();
 8001624:	f7ff ff20 	bl	8001468 <Clear_All_RAM>

		/*Conditional to print if the prediction was correct or not */
		if(pred[i] == y[i])
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	7dfb      	ldrb	r3, [r7, #23]
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	440b      	add	r3, r1
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d103      	bne.n	8001648 <printNumbers+0x12c>
		{
			printBitmap(correct_prediction);
 8001640:	4817      	ldr	r0, [pc, #92]	; (80016a0 <printNumbers+0x184>)
 8001642:	f000 f831 	bl	80016a8 <printBitmap>
 8001646:	e002      	b.n	800164e <printNumbers+0x132>
		}
		else
		{
			printBitmap(incorrect_prediction);
 8001648:	4816      	ldr	r0, [pc, #88]	; (80016a4 <printNumbers+0x188>)
 800164a:	f000 f82d 	bl	80016a8 <printBitmap>
		}

		/*Delay to see the message and clear screen to print the next number in the next iterartion */
		HAL_Delay(800);
 800164e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001652:	f000 fc81 	bl	8001f58 <HAL_Delay>
		Clear_All_RAM();
 8001656:	f7ff ff07 	bl	8001468 <Clear_All_RAM>
	for(i = 0; i < vector_size; i++)
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	3301      	adds	r3, #1
 800165e:	75fb      	strb	r3, [r7, #23]
 8001660:	7dfa      	ldrb	r2, [r7, #23]
 8001662:	7afb      	ldrb	r3, [r7, #11]
 8001664:	429a      	cmp	r2, r3
 8001666:	f4ff af6c 	bcc.w	8001542 <printNumbers+0x26>

	}
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	0801c838 	.word	0x0801c838
 8001678:	0801c038 	.word	0x0801c038
 800167c:	08017838 	.word	0x08017838
 8001680:	08018038 	.word	0x08018038
 8001684:	08018838 	.word	0x08018838
 8001688:	08019038 	.word	0x08019038
 800168c:	08019838 	.word	0x08019838
 8001690:	0801a038 	.word	0x0801a038
 8001694:	0801a838 	.word	0x0801a838
 8001698:	0801b038 	.word	0x0801b038
 800169c:	0801b838 	.word	0x0801b838
 80016a0:	0801d838 	.word	0x0801d838
 80016a4:	0801d038 	.word	0x0801d038

080016a8 <printBitmap>:


void printBitmap(const unsigned char* Bitmap)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	   unsigned char i, j, k;
	   /*Because the Bitmap is a vector we need to use auxiliary variable to send all information in the correct order  */
	   int d = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
	   k = 15;
 80016b4:	230f      	movs	r3, #15
 80016b6:	737b      	strb	r3, [r7, #13]

	    /*Cycles for to write all bitmap in all screen OLED */
	  	for(i = 0; i < PAGES; i++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e02a      	b.n	8001714 <printBitmap+0x6c>
	  	{
	  		writeCommand(0xb0+i);
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	3b50      	subs	r3, #80	; 0x50
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fef9 	bl	80014bc <writeCommand>
	  		writeCommand(0x00);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff fef6 	bl	80014bc <writeCommand>
	  		writeCommand(0x10);
 80016d0:	2010      	movs	r0, #16
 80016d2:	f7ff fef3 	bl	80014bc <writeCommand>
	  		for( j = 0; j < HEIGHT ; j++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	73bb      	strb	r3, [r7, #14]
 80016da:	e00f      	b.n	80016fc <printBitmap+0x54>
	  		{
	  			writeData(Bitmap[k + d]);
 80016dc:	7b7a      	ldrb	r2, [r7, #13]
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	4413      	add	r3, r2
 80016e2:	461a      	mov	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fefe 	bl	80014ec <writeData>
	  			d = d +16;
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3310      	adds	r3, #16
 80016f4:	60bb      	str	r3, [r7, #8]
	  		for( j = 0; j < HEIGHT ; j++)
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
 80016f8:	3301      	adds	r3, #1
 80016fa:	73bb      	strb	r3, [r7, #14]
 80016fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001700:	2b00      	cmp	r3, #0
 8001702:	daeb      	bge.n	80016dc <printBitmap+0x34>
	  		}
	  		d = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
	  		k--;
 8001708:	7b7b      	ldrb	r3, [r7, #13]
 800170a:	3b01      	subs	r3, #1
 800170c:	737b      	strb	r3, [r7, #13]
	  	for(i = 0; i < PAGES; i++)
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	3301      	adds	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	d9d1      	bls.n	80016be <printBitmap+0x16>
	  	}
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <matrixConverter>:
#include "prediction.h"
#include <math.h>
#include <stdlib.h>

float** matrixConverter(int m, int n, const float* dt)
{
 8001722:	b590      	push	{r4, r7, lr}
 8001724:	b089      	sub	sp, #36	; 0x24
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
	int i,j,k;
	float **matrix;

	/*Reserve memory  */
	matrix = (float**)malloc(m*sizeof(float*));
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4618      	mov	r0, r3
 8001734:	f005 f9b4 	bl	8006aa0 <malloc>
 8001738:	4603      	mov	r3, r0
 800173a:	613b      	str	r3, [r7, #16]

	k = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

	/*Cycles for to convert the array dt in a Matrix of size mxn and reserve memory to columns */
	for(i = 0; i < m; i++)
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	e02b      	b.n	800179e <matrixConverter+0x7c>
	{
		matrix[i] = (float*)malloc(n*sizeof(float));
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	0099      	lsls	r1, r3, #2
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	18d4      	adds	r4, r2, r3
 8001752:	4608      	mov	r0, r1
 8001754:	f005 f9a4 	bl	8006aa0 <malloc>
 8001758:	4603      	mov	r3, r0
 800175a:	6023      	str	r3, [r4, #0]
		for(j = 0; j < n; j++)
 800175c:	2300      	movs	r3, #0
 800175e:	61bb      	str	r3, [r7, #24]
 8001760:	e012      	b.n	8001788 <matrixConverter+0x66>
		{
			matrix[i][j] = dt[j + k];
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	441a      	add	r2, r3
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	6939      	ldr	r1, [r7, #16]
 8001774:	440b      	add	r3, r1
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	601a      	str	r2, [r3, #0]
		for(j = 0; j < n; j++)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	3301      	adds	r3, #1
 8001786:	61bb      	str	r3, [r7, #24]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	429a      	cmp	r2, r3
 800178e:	dbe8      	blt.n	8001762 <matrixConverter+0x40>
		}
		k = k + n;
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	4413      	add	r3, r2
 8001796:	617b      	str	r3, [r7, #20]
	for(i = 0; i < m; i++)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	3301      	adds	r3, #1
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	dbcf      	blt.n	8001746 <matrixConverter+0x24>
	}

	return matrix;
 80017a6:	693b      	ldr	r3, [r7, #16]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3724      	adds	r7, #36	; 0x24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd90      	pop	{r4, r7, pc}

080017b0 <matrixTranspossed>:


float** matrixTranspossed(int tags, int n, float** theta_m)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
	int i,j;
	float **matrix_t;

	/*Reserve memory  */
	matrix_t = (float**)malloc(n*sizeof(float*));
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f005 f96d 	bl	8006aa0 <malloc>
 80017c6:	4603      	mov	r3, r0
 80017c8:	617b      	str	r3, [r7, #20]

	/*Cycles for to compute the transposed matrix of other, and reserve memory to columns */
	for(i = 0; i < n; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	e029      	b.n	8001824 <matrixTranspossed+0x74>
	{
		matrix_t[i] = (float*)malloc(tags*sizeof(float));
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	0099      	lsls	r1, r3, #2
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	18d4      	adds	r4, r2, r3
 80017dc:	4608      	mov	r0, r1
 80017de:	f005 f95f 	bl	8006aa0 <malloc>
 80017e2:	4603      	mov	r3, r0
 80017e4:	6023      	str	r3, [r4, #0]
		for(j = 0; j < tags; j++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
 80017ea:	e014      	b.n	8001816 <matrixTranspossed+0x66>
		{
			matrix_t[i][j] = theta_m[j][i];
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	441a      	add	r2, r3
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	6979      	ldr	r1, [r7, #20]
 8001802:	440b      	add	r3, r1
 8001804:	6819      	ldr	r1, [r3, #0]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	601a      	str	r2, [r3, #0]
		for(j = 0; j < tags; j++)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	3301      	adds	r3, #1
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	429a      	cmp	r2, r3
 800181c:	dbe6      	blt.n	80017ec <matrixTranspossed+0x3c>
	for(i = 0; i < n; i++)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3301      	adds	r3, #1
 8001822:	61fb      	str	r3, [r7, #28]
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	429a      	cmp	r2, r3
 800182a:	dbd1      	blt.n	80017d0 <matrixTranspossed+0x20>
		}
	}

	return matrix_t;
 800182c:	697b      	ldr	r3, [r7, #20]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	; 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}

08001836 <matrixProduct>:

float** matrixProduct(int m, int n, int tags, float** theta_tr, float** X)
{
 8001836:	b590      	push	{r4, r7, lr}
 8001838:	b08b      	sub	sp, #44	; 0x2c
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	603b      	str	r3, [r7, #0]
	int i,j,a;
	float **matrix_product;
	float sum;

	/* Reserve memory */
	matrix_product = (float**)malloc(m*sizeof(float*));
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4618      	mov	r0, r3
 800184a:	f005 f929 	bl	8006aa0 <malloc>
 800184e:	4603      	mov	r3, r0
 8001850:	617b      	str	r3, [r7, #20]

	/*Cycles for to compute the product of two arrays, and reserve memory to columns */
	for(i = 0; i < m; i++)
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
 8001856:	e04a      	b.n	80018ee <matrixProduct+0xb8>
	{
		matrix_product[i] = (float*)malloc(tags*sizeof(float));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	0099      	lsls	r1, r3, #2
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	18d4      	adds	r4, r2, r3
 8001864:	4608      	mov	r0, r1
 8001866:	f005 f91b 	bl	8006aa0 <malloc>
 800186a:	4603      	mov	r3, r0
 800186c:	6023      	str	r3, [r4, #0]
		for(j = 0; j < tags; j++)
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
 8001872:	e035      	b.n	80018e0 <matrixProduct+0xaa>
		{
			sum = 0;
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
			for(a = 0; a < n; a++)
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	e01e      	b.n	80018be <matrixProduct+0x88>
			{
				sum += X[i][a] * theta_tr[a][j];
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001886:	4413      	add	r3, r2
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	ed93 7a00 	vldr	s14, [r3]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	4413      	add	r3, r2
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80018b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b4:	edc7 7a06 	vstr	s15, [r7, #24]
			for(a = 0; a < n; a++)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	3301      	adds	r3, #1
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dbdc      	blt.n	8001880 <matrixProduct+0x4a>
			}
			matrix_product[i][j] = sum;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4413      	add	r3, r2
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	601a      	str	r2, [r3, #0]
		for(j = 0; j < tags; j++)
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	3301      	adds	r3, #1
 80018de:	623b      	str	r3, [r7, #32]
 80018e0:	6a3a      	ldr	r2, [r7, #32]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dbc5      	blt.n	8001874 <matrixProduct+0x3e>
	for(i = 0; i < m; i++)
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	3301      	adds	r3, #1
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
 80018ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	dbb0      	blt.n	8001858 <matrixProduct+0x22>
		}
	}


	return matrix_product;
 80018f6:	697b      	ldr	r3, [r7, #20]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	372c      	adds	r7, #44	; 0x2c
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd90      	pop	{r4, r7, pc}

08001900 <computeSigmoid>:



float** computeSigmoid(float** X_theta, int m, int tags)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
	int i,j;
	float **matrix_sigmoid;

	/* Reserv memory */
	matrix_sigmoid = (float**)malloc(m*sizeof(float*));
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4618      	mov	r0, r3
 8001912:	f005 f8c5 	bl	8006aa0 <malloc>
 8001916:	4603      	mov	r3, r0
 8001918:	617b      	str	r3, [r7, #20]

	/*Cycles for to compute the sigmoid of each element using the sigmoid function in each iteration, and reserve memory to columns */
	for(i = 0; i < m; i++)
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	e031      	b.n	8001984 <computeSigmoid+0x84>
	{
		matrix_sigmoid[i] = (float*)malloc(tags*sizeof(float));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0099      	lsls	r1, r3, #2
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	18d4      	adds	r4, r2, r3
 800192c:	4608      	mov	r0, r1
 800192e:	f005 f8b7 	bl	8006aa0 <malloc>
 8001932:	4603      	mov	r3, r0
 8001934:	6023      	str	r3, [r4, #0]
		for(j = 0; j < tags; j++)
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	e01c      	b.n	8001976 <computeSigmoid+0x76>
		{
			matrix_sigmoid[i][j] = sigmoid(X_theta[i][j]);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	4413      	add	r3, r2
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	18d4      	adds	r4, r2, r3
 8001960:	eeb0 0a67 	vmov.f32	s0, s15
 8001964:	f000 f874 	bl	8001a50 <sigmoid>
 8001968:	eef0 7a40 	vmov.f32	s15, s0
 800196c:	edc4 7a00 	vstr	s15, [r4]
		for(j = 0; j < tags; j++)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	3301      	adds	r3, #1
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	dbde      	blt.n	800193c <computeSigmoid+0x3c>
	for(i = 0; i < m; i++)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3301      	adds	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbc9      	blt.n	8001920 <computeSigmoid+0x20>
		}
	}
	return matrix_sigmoid;
 800198c:	697b      	ldr	r3, [r7, #20]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3724      	adds	r7, #36	; 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}

08001996 <computePrediction>:


int* computePrediction(float** matrixSigmoid, int m, int tags)
{
 8001996:	b590      	push	{r4, r7, lr}
 8001998:	b08b      	sub	sp, #44	; 0x2c
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
	int *prediction;

	/* reserve memory */
	prediction = (int*)malloc(m*sizeof(int));
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f005 f87a 	bl	8006aa0 <malloc>
 80019ac:	4603      	mov	r3, r0
 80019ae:	617b      	str	r3, [r7, #20]
	int i, j;
	double max;

	/*Cycles for to calcule the values of P getting the value max in each row */
	for(i = 0; i<m; i++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
 80019b4:	e040      	b.n	8001a38 <computePrediction+0xa2>
	{
		max = 0;
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	f04f 0400 	mov.w	r4, #0
 80019be:	e9c7 3406 	strd	r3, r4, [r7, #24]
		for(j = 0; j < tags; j++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
 80019c6:	e030      	b.n	8001a2a <computePrediction+0x94>
		{
			if(matrixSigmoid[i][j] > max)
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fd74 	bl	80004c8 <__aeabi_f2d>
 80019e0:	4603      	mov	r3, r0
 80019e2:	460c      	mov	r4, r1
 80019e4:	461a      	mov	r2, r3
 80019e6:	4623      	mov	r3, r4
 80019e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019ec:	f7ff f836 	bl	8000a5c <__aeabi_dcmplt>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d016      	beq.n	8001a24 <computePrediction+0x8e>
			{
				prediction[i] = j+1;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4413      	add	r3, r2
 80019fe:	6a3a      	ldr	r2, [r7, #32]
 8001a00:	3201      	adds	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
				max = matrixSigmoid[i][j];
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd56 	bl	80004c8 <__aeabi_f2d>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	460c      	mov	r4, r1
 8001a20:	e9c7 3406 	strd	r3, r4, [r7, #24]
		for(j = 0; j < tags; j++)
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	3301      	adds	r3, #1
 8001a28:	623b      	str	r3, [r7, #32]
 8001a2a:	6a3a      	ldr	r2, [r7, #32]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	dbca      	blt.n	80019c8 <computePrediction+0x32>
	for(i = 0; i<m; i++)
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	3301      	adds	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
 8001a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbba      	blt.n	80019b6 <computePrediction+0x20>
			}
		}
	}

	return prediction;
 8001a40:	697b      	ldr	r3, [r7, #20]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	372c      	adds	r7, #44	; 0x2c
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}
 8001a4a:	0000      	movs	r0, r0
 8001a4c:	0000      	movs	r0, r0
	...

08001a50 <sigmoid>:


float sigmoid(float z)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	ed87 0a01 	vstr	s0, [r7, #4]
	float y;
	/* function sigmoid */
	y = 1/(1 + pow(E, -z));
 8001a5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a5e:	eef1 7a67 	vneg.f32	s15, s15
 8001a62:	ee17 3a90 	vmov	r3, s15
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd2e 	bl	80004c8 <__aeabi_f2d>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	460c      	mov	r4, r1
 8001a70:	ec44 3b11 	vmov	d1, r3, r4
 8001a74:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001ac0 <sigmoid+0x70>
 8001a78:	f005 f8e4 	bl	8006c44 <pow>
 8001a7c:	ec51 0b10 	vmov	r0, r1, d0
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <sigmoid+0x78>)
 8001a86:	f7fe fbc1 	bl	800020c <__adddf3>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	460c      	mov	r4, r1
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4623      	mov	r3, r4
 8001a92:	f04f 0000 	mov.w	r0, #0
 8001a96:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <sigmoid+0x78>)
 8001a98:	f7fe fe98 	bl	80007cc <__aeabi_ddiv>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	f7ff f818 	bl	8000ad8 <__aeabi_d2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60fb      	str	r3, [r7, #12]
	return y;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	ee07 3a90 	vmov	s15, r3
}
 8001ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd90      	pop	{r4, r7, pc}
 8001abc:	f3af 8000 	nop.w
 8001ac0:	8b12500b 	.word	0x8b12500b
 8001ac4:	4005bf0a 	.word	0x4005bf0a
 8001ac8:	3ff00000 	.word	0x3ff00000

08001acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <HAL_MspInit+0x44>)
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <HAL_MspInit+0x44>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_MspInit+0x44>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_MspInit+0x44>)
 8001aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <HAL_MspInit+0x44>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af4:	6593      	str	r3, [r2, #88]	; 0x58
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_MspInit+0x44>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000

08001b14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <HAL_I2C_MspInit+0x80>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d12a      	bne.n	8001b8c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_I2C_MspInit+0x84>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <HAL_I2C_MspInit+0x84>)
 8001b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_I2C_MspInit+0x84>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001b4e:	f001 fb91 	bl	8003274 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration    
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001b52:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b58:	2312      	movs	r3, #18
 8001b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b64:	2304      	movs	r3, #4
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480b      	ldr	r0, [pc, #44]	; (8001b9c <HAL_I2C_MspInit+0x88>)
 8001b70:	f000 fafa 	bl	8002168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_I2C_MspInit+0x84>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <HAL_I2C_MspInit+0x84>)
 8001b7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_I2C_MspInit+0x84>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	; 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40005400 	.word	0x40005400
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	48001800 	.word	0x48001800

08001ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a18      	ldr	r2, [pc, #96]	; (8001c20 <HAL_UART_MspInit+0x80>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d12a      	bne.n	8001c18 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_UART_MspInit+0x84>)
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	4a17      	ldr	r2, [pc, #92]	; (8001c24 <HAL_UART_MspInit+0x84>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_UART_MspInit+0x84>)
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_UART_MspInit+0x84>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <HAL_UART_MspInit+0x84>)
 8001be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_UART_MspInit+0x84>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001bf2:	f001 fb3f 	bl	8003274 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001bf6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	4805      	ldr	r0, [pc, #20]	; (8001c28 <HAL_UART_MspInit+0x88>)
 8001c14:	f000 faa8 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001c18:	bf00      	nop
 8001c1a:	3728      	adds	r7, #40	; 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40008000 	.word	0x40008000
 8001c24:	40021000 	.word	0x40021000
 8001c28:	48001800 	.word	0x48001800

08001c2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c4c:	d154      	bne.n	8001cf8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <HAL_PCD_MspInit+0xd4>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	4a2b      	ldr	r2, [pc, #172]	; (8001d00 <HAL_PCD_MspInit+0xd4>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5a:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <HAL_PCD_MspInit+0xd4>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c66:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c78:	230a      	movs	r3, #10
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c86:	f000 fa6f 	bl	8002168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca2:	f000 fa61 	bl	8002168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ca6:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_PCD_MspInit+0xd4>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	4a15      	ldr	r2, [pc, #84]	; (8001d00 <HAL_PCD_MspInit+0xd4>)
 8001cac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_PCD_MspInit+0xd4>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_PCD_MspInit+0xd4>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d114      	bne.n	8001cf4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_PCD_MspInit+0xd4>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cce:	4a0c      	ldr	r2, [pc, #48]	; (8001d00 <HAL_PCD_MspInit+0xd4>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_PCD_MspInit+0xd4>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001ce2:	f001 fab7 	bl	8003254 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_PCD_MspInit+0xd4>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <HAL_PCD_MspInit+0xd4>)
 8001cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001cf2:	e001      	b.n	8001cf8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001cf4:	f001 faae 	bl	8003254 <HAL_PWREx_EnableVddUSB>
}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000

08001d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <HardFault_Handler+0x4>

08001d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <MemManage_Handler+0x4>

08001d1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d22:	e7fe      	b.n	8001d22 <BusFault_Handler+0x4>

08001d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <UsageFault_Handler+0x4>

08001d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d58:	f000 f8e0 	bl	8001f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <_sbrk+0x50>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <_sbrk+0x16>
		heap_end = &end;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <_sbrk+0x50>)
 8001d72:	4a10      	ldr	r2, [pc, #64]	; (8001db4 <_sbrk+0x54>)
 8001d74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <_sbrk+0x50>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <_sbrk+0x50>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	466a      	mov	r2, sp
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d907      	bls.n	8001d9a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d8a:	f004 fe5f 	bl	8006a4c <__errno>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	230c      	movs	r3, #12
 8001d92:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295
 8001d98:	e006      	b.n	8001da8 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <_sbrk+0x50>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	4a03      	ldr	r2, [pc, #12]	; (8001db0 <_sbrk+0x50>)
 8001da4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001da6:	68fb      	ldr	r3, [r7, #12]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000090 	.word	0x20000090
 8001db4:	20000628 	.word	0x20000628

08001db8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <SystemInit+0x64>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc2:	4a16      	ldr	r2, [pc, #88]	; (8001e1c <SystemInit+0x64>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <SystemInit+0x68>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <SystemInit+0x68>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <SystemInit+0x68>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <SystemInit+0x68>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <SystemInit+0x68>)
 8001de4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001de8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001dec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <SystemInit+0x68>)
 8001df0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001df4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <SystemInit+0x68>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <SystemInit+0x68>)
 8001dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <SystemInit+0x68>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <SystemInit+0x64>)
 8001e0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e0e:	609a      	str	r2, [r3, #8]
#endif
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00
 8001e20:	40021000 	.word	0x40021000

08001e24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e2a:	e003      	b.n	8001e34 <LoopCopyDataInit>

08001e2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e32:	3104      	adds	r1, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e34:	480b      	ldr	r0, [pc, #44]	; (8001e64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e3c:	d3f6      	bcc.n	8001e2c <CopyDataInit>
	ldr	r2, =_sbss
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e40:	e002      	b.n	8001e48 <LoopFillZerobss>

08001e42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e44:	f842 3b04 	str.w	r3, [r2], #4

08001e48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <LoopForever+0x16>)
	cmp	r2, r3
 8001e4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e4c:	d3f9      	bcc.n	8001e42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e4e:	f7ff ffb3 	bl	8001db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f004 fe01 	bl	8006a58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e56:	f7ff f80f 	bl	8000e78 <main>

08001e5a <LoopForever>:

LoopForever:
    b LoopForever
 8001e5a:	e7fe      	b.n	8001e5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e5c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8001e60:	0801e0d8 	.word	0x0801e0d8
	ldr	r0, =_sdata
 8001e64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e68:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001e6c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001e70:	20000628 	.word	0x20000628

08001e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC1_2_IRQHandler>

08001e76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 f93d 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e86:	2000      	movs	r0, #0
 8001e88:	f000 f80e 	bl	8001ea8 <HAL_InitTick>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	71fb      	strb	r3, [r7, #7]
 8001e96:	e001      	b.n	8001e9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e98:	f7ff fe18 	bl	8001acc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_InitTick+0x68>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d022      	beq.n	8001f02 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ebc:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_InitTick+0x6c>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_InitTick+0x68>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 f93c 	bl	800214e <HAL_SYSTICK_Config>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10f      	bne.n	8001efc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	d809      	bhi.n	8001ef6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eea:	f000 f914 	bl	8002116 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_InitTick+0x70>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e007      	b.n	8001f06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	e004      	b.n	8001f06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e001      	b.n	8001f06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000008 	.word	0x20000008
 8001f14:	20000000 	.word	0x20000000
 8001f18:	20000004 	.word	0x20000004

08001f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_IncTick+0x1c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_IncTick+0x20>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <HAL_IncTick+0x1c>)
 8001f2c:	6013      	str	r3, [r2, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	20000620 	.word	0x20000620
 8001f3c:	20000008 	.word	0x20000008

08001f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_GetTick+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000620 	.word	0x20000620

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff ffee 	bl	8001f40 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d004      	beq.n	8001f7c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_Delay+0x40>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f7c:	bf00      	nop
 8001f7e:	f7ff ffdf 	bl	8001f40 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d8f7      	bhi.n	8001f7e <HAL_Delay+0x26>
  {
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000008 	.word	0x20000008

08001f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fce:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	db0a      	blt.n	800202a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	490c      	ldr	r1, [pc, #48]	; (800204c <__NVIC_SetPriority+0x4c>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	440b      	add	r3, r1
 8002024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002028:	e00a      	b.n	8002040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4908      	ldr	r1, [pc, #32]	; (8002050 <__NVIC_SetPriority+0x50>)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3b04      	subs	r3, #4
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	440b      	add	r3, r1
 800203e:	761a      	strb	r2, [r3, #24]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000e100 	.word	0xe000e100
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	; 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f1c3 0307 	rsb	r3, r3, #7
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf28      	it	cs
 8002072:	2304      	movcs	r3, #4
 8002074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3304      	adds	r3, #4
 800207a:	2b06      	cmp	r3, #6
 800207c:	d902      	bls.n	8002084 <NVIC_EncodePriority+0x30>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3b03      	subs	r3, #3
 8002082:	e000      	b.n	8002086 <NVIC_EncodePriority+0x32>
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	401a      	ands	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43d9      	mvns	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	4313      	orrs	r3, r2
         );
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	; 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020cc:	d301      	bcc.n	80020d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00f      	b.n	80020f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <SysTick_Config+0x40>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020da:	210f      	movs	r1, #15
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	f7ff ff8e 	bl	8002000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <SysTick_Config+0x40>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <SysTick_Config+0x40>)
 80020ec:	2207      	movs	r2, #7
 80020ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	e000e010 	.word	0xe000e010

08002100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ff47 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002128:	f7ff ff5c 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 800212c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f7ff ff8e 	bl	8002054 <NVIC_EncodePriority>
 8002138:	4602      	mov	r2, r0
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff5d 	bl	8002000 <__NVIC_SetPriority>
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ffb0 	bl	80020bc <SysTick_Config>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002176:	e166      	b.n	8002446 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2101      	movs	r1, #1
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	4013      	ands	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8158 	beq.w	8002440 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d00b      	beq.n	80021b0 <HAL_GPIO_Init+0x48>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d007      	beq.n	80021b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021a4:	2b11      	cmp	r3, #17
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b12      	cmp	r3, #18
 80021ae:	d130      	bne.n	8002212 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021e6:	2201      	movs	r2, #1
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	091b      	lsrs	r3, r3, #4
 80021fc:	f003 0201 	and.w	r2, r3, #1
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	2203      	movs	r2, #3
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0xea>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b12      	cmp	r3, #18
 8002250:	d123      	bne.n	800229a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	08da      	lsrs	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3208      	adds	r2, #8
 800225a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	08da      	lsrs	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3208      	adds	r2, #8
 8002294:	6939      	ldr	r1, [r7, #16]
 8002296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	2203      	movs	r2, #3
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0203 	and.w	r2, r3, #3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80b2 	beq.w	8002440 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022dc:	4b61      	ldr	r3, [pc, #388]	; (8002464 <HAL_GPIO_Init+0x2fc>)
 80022de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e0:	4a60      	ldr	r2, [pc, #384]	; (8002464 <HAL_GPIO_Init+0x2fc>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6613      	str	r3, [r2, #96]	; 0x60
 80022e8:	4b5e      	ldr	r3, [pc, #376]	; (8002464 <HAL_GPIO_Init+0x2fc>)
 80022ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022f4:	4a5c      	ldr	r2, [pc, #368]	; (8002468 <HAL_GPIO_Init+0x300>)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	3302      	adds	r3, #2
 80022fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	220f      	movs	r2, #15
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800231e:	d02b      	beq.n	8002378 <HAL_GPIO_Init+0x210>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a52      	ldr	r2, [pc, #328]	; (800246c <HAL_GPIO_Init+0x304>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d025      	beq.n	8002374 <HAL_GPIO_Init+0x20c>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a51      	ldr	r2, [pc, #324]	; (8002470 <HAL_GPIO_Init+0x308>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d01f      	beq.n	8002370 <HAL_GPIO_Init+0x208>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a50      	ldr	r2, [pc, #320]	; (8002474 <HAL_GPIO_Init+0x30c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d019      	beq.n	800236c <HAL_GPIO_Init+0x204>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a4f      	ldr	r2, [pc, #316]	; (8002478 <HAL_GPIO_Init+0x310>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <HAL_GPIO_Init+0x200>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a4e      	ldr	r2, [pc, #312]	; (800247c <HAL_GPIO_Init+0x314>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00d      	beq.n	8002364 <HAL_GPIO_Init+0x1fc>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a4d      	ldr	r2, [pc, #308]	; (8002480 <HAL_GPIO_Init+0x318>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d007      	beq.n	8002360 <HAL_GPIO_Init+0x1f8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a4c      	ldr	r2, [pc, #304]	; (8002484 <HAL_GPIO_Init+0x31c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_GPIO_Init+0x1f4>
 8002358:	2307      	movs	r3, #7
 800235a:	e00e      	b.n	800237a <HAL_GPIO_Init+0x212>
 800235c:	2308      	movs	r3, #8
 800235e:	e00c      	b.n	800237a <HAL_GPIO_Init+0x212>
 8002360:	2306      	movs	r3, #6
 8002362:	e00a      	b.n	800237a <HAL_GPIO_Init+0x212>
 8002364:	2305      	movs	r3, #5
 8002366:	e008      	b.n	800237a <HAL_GPIO_Init+0x212>
 8002368:	2304      	movs	r3, #4
 800236a:	e006      	b.n	800237a <HAL_GPIO_Init+0x212>
 800236c:	2303      	movs	r3, #3
 800236e:	e004      	b.n	800237a <HAL_GPIO_Init+0x212>
 8002370:	2302      	movs	r3, #2
 8002372:	e002      	b.n	800237a <HAL_GPIO_Init+0x212>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_GPIO_Init+0x212>
 8002378:	2300      	movs	r3, #0
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	f002 0203 	and.w	r2, r2, #3
 8002380:	0092      	lsls	r2, r2, #2
 8002382:	4093      	lsls	r3, r2
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800238a:	4937      	ldr	r1, [pc, #220]	; (8002468 <HAL_GPIO_Init+0x300>)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002398:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <HAL_GPIO_Init+0x320>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023bc:	4a32      	ldr	r2, [pc, #200]	; (8002488 <HAL_GPIO_Init+0x320>)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80023c2:	4b31      	ldr	r3, [pc, #196]	; (8002488 <HAL_GPIO_Init+0x320>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023e6:	4a28      	ldr	r2, [pc, #160]	; (8002488 <HAL_GPIO_Init+0x320>)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023ec:	4b26      	ldr	r3, [pc, #152]	; (8002488 <HAL_GPIO_Init+0x320>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002410:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <HAL_GPIO_Init+0x320>)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002416:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <HAL_GPIO_Init+0x320>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	43db      	mvns	r3, r3
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800243a:	4a13      	ldr	r2, [pc, #76]	; (8002488 <HAL_GPIO_Init+0x320>)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	3301      	adds	r3, #1
 8002444:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	f47f ae91 	bne.w	8002178 <HAL_GPIO_Init+0x10>
  }
}
 8002456:	bf00      	nop
 8002458:	371c      	adds	r7, #28
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	40010000 	.word	0x40010000
 800246c:	48000400 	.word	0x48000400
 8002470:	48000800 	.word	0x48000800
 8002474:	48000c00 	.word	0x48000c00
 8002478:	48001000 	.word	0x48001000
 800247c:	48001400 	.word	0x48001400
 8002480:	48001800 	.word	0x48001800
 8002484:	48001c00 	.word	0x48001c00
 8002488:	40010400 	.word	0x40010400

0800248c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800249c:	787b      	ldrb	r3, [r7, #1]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024a8:	e002      	b.n	80024b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	887b      	ldrh	r3, [r7, #2]
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024d4:	887a      	ldrh	r2, [r7, #2]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80024da:	e002      	b.n	80024e2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024dc:	887a      	ldrh	r2, [r7, #2]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	619a      	str	r2, [r3, #24]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e081      	b.n	8002604 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff fafd 	bl	8001b14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2224      	movs	r2, #36	; 0x24
 800251e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0201 	bic.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800253e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800254e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d107      	bne.n	8002568 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	e006      	b.n	8002576 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002574:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d104      	bne.n	8002588 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002586:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800259a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	ea42 0103 	orr.w	r1, r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	021a      	lsls	r2, r3, #8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69d9      	ldr	r1, [r3, #28]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1a      	ldr	r2, [r3, #32]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	461a      	mov	r2, r3
 8002618:	460b      	mov	r3, r1
 800261a:	817b      	strh	r3, [r7, #10]
 800261c:	4613      	mov	r3, r2
 800261e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b20      	cmp	r3, #32
 800262a:	f040 80da 	bne.w	80027e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_I2C_Master_Transmit+0x30>
 8002638:	2302      	movs	r3, #2
 800263a:	e0d3      	b.n	80027e4 <HAL_I2C_Master_Transmit+0x1d8>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002644:	f7ff fc7c 	bl	8001f40 <HAL_GetTick>
 8002648:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2319      	movs	r3, #25
 8002650:	2201      	movs	r2, #1
 8002652:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f9f7 	bl	8002a4a <I2C_WaitOnFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0be      	b.n	80027e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2221      	movs	r2, #33	; 0x21
 800266a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2210      	movs	r2, #16
 8002672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	893a      	ldrh	r2, [r7, #8]
 8002686:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	2bff      	cmp	r3, #255	; 0xff
 8002696:	d90e      	bls.n	80026b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	22ff      	movs	r2, #255	; 0xff
 800269c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	8979      	ldrh	r1, [r7, #10]
 80026a6:	4b51      	ldr	r3, [pc, #324]	; (80027ec <HAL_I2C_Master_Transmit+0x1e0>)
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 faee 	bl	8002c90 <I2C_TransferConfig>
 80026b4:	e06c      	b.n	8002790 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	8979      	ldrh	r1, [r7, #10]
 80026c8:	4b48      	ldr	r3, [pc, #288]	; (80027ec <HAL_I2C_Master_Transmit+0x1e0>)
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 fadd 	bl	8002c90 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80026d6:	e05b      	b.n	8002790 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	6a39      	ldr	r1, [r7, #32]
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f9f4 	bl	8002aca <I2C_WaitOnTXISFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e07b      	b.n	80027e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	781a      	ldrb	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d034      	beq.n	8002790 <HAL_I2C_Master_Transmit+0x184>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	2b00      	cmp	r3, #0
 800272c:	d130      	bne.n	8002790 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	2200      	movs	r2, #0
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f986 	bl	8002a4a <I2C_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e04d      	b.n	80027e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	2bff      	cmp	r3, #255	; 0xff
 8002750:	d90e      	bls.n	8002770 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	22ff      	movs	r2, #255	; 0xff
 8002756:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	b2da      	uxtb	r2, r3
 800275e:	8979      	ldrh	r1, [r7, #10]
 8002760:	2300      	movs	r3, #0
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fa91 	bl	8002c90 <I2C_TransferConfig>
 800276e:	e00f      	b.n	8002790 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	b2da      	uxtb	r2, r3
 8002780:	8979      	ldrh	r1, [r7, #10]
 8002782:	2300      	movs	r3, #0
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 fa80 	bl	8002c90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d19e      	bne.n	80026d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	6a39      	ldr	r1, [r7, #32]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f9d3 	bl	8002b4a <I2C_WaitOnSTOPFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e01a      	b.n	80027e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2220      	movs	r2, #32
 80027b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80027c2:	400b      	ands	r3, r1
 80027c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
  }
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	80002000 	.word	0x80002000
 80027f0:	fe00e800 	.word	0xfe00e800

080027f4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	460b      	mov	r3, r1
 8002802:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b20      	cmp	r3, #32
 8002812:	f040 80f1 	bne.w	80029f8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002824:	d101      	bne.n	800282a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002826:	2302      	movs	r3, #2
 8002828:	e0e7      	b.n	80029fa <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_I2C_IsDeviceReady+0x44>
 8002834:	2302      	movs	r3, #2
 8002836:	e0e0      	b.n	80029fa <HAL_I2C_IsDeviceReady+0x206>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2224      	movs	r2, #36	; 0x24
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d107      	bne.n	8002866 <HAL_I2C_IsDeviceReady+0x72>
 8002856:	897b      	ldrh	r3, [r7, #10]
 8002858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800285c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002860:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002864:	e004      	b.n	8002870 <HAL_I2C_IsDeviceReady+0x7c>
 8002866:	897b      	ldrh	r3, [r7, #10]
 8002868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800286c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002876:	f7ff fb63 	bl	8001f40 <HAL_GetTick>
 800287a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b20      	cmp	r3, #32
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b10      	cmp	r3, #16
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80028a8:	e034      	b.n	8002914 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d01a      	beq.n	80028e8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028b2:	f7ff fb45 	bl	8001f40 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d302      	bcc.n	80028c8 <HAL_I2C_IsDeviceReady+0xd4>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10f      	bne.n	80028e8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e088      	b.n	80029fa <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	bf0c      	ite	eq
 80028f6:	2301      	moveq	r3, #1
 80028f8:	2300      	movne	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b10      	cmp	r3, #16
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002914:	7ffb      	ldrb	r3, [r7, #31]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d102      	bne.n	8002920 <HAL_I2C_IsDeviceReady+0x12c>
 800291a:	7fbb      	ldrb	r3, [r7, #30]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0c4      	beq.n	80028aa <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	2b10      	cmp	r3, #16
 800292c:	d01a      	beq.n	8002964 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2200      	movs	r2, #0
 8002936:	2120      	movs	r1, #32
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 f886 	bl	8002a4a <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e058      	b.n	80029fa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2220      	movs	r2, #32
 800294e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e04a      	b.n	80029fa <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	2200      	movs	r2, #0
 800296c:	2120      	movs	r1, #32
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f86b 	bl	8002a4a <I2C_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e03d      	b.n	80029fa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2210      	movs	r2, #16
 8002984:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2220      	movs	r2, #32
 800298c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	429a      	cmp	r2, r3
 8002994:	d118      	bne.n	80029c8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029a4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2200      	movs	r2, #0
 80029ae:	2120      	movs	r1, #32
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f84a 	bl	8002a4a <I2C_WaitOnFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e01c      	b.n	80029fa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2220      	movs	r2, #32
 80029c6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3301      	adds	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	f63f af3b 	bhi.w	800284e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d103      	bne.n	8002a20 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d007      	beq.n	8002a3e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699a      	ldr	r2, [r3, #24]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	619a      	str	r2, [r3, #24]
  }
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	4613      	mov	r3, r2
 8002a58:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a5a:	e022      	b.n	8002aa2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d01e      	beq.n	8002aa2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a64:	f7ff fa6c 	bl	8001f40 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d302      	bcc.n	8002a7a <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d113      	bne.n	8002aa2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f043 0220 	orr.w	r2, r3, #32
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e00f      	b.n	8002ac2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699a      	ldr	r2, [r3, #24]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	bf0c      	ite	eq
 8002ab2:	2301      	moveq	r3, #1
 8002ab4:	2300      	movne	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d0cd      	beq.n	8002a5c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ad6:	e02c      	b.n	8002b32 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f871 	bl	8002bc4 <I2C_IsAcknowledgeFailed>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e02a      	b.n	8002b42 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af2:	d01e      	beq.n	8002b32 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af4:	f7ff fa24 	bl	8001f40 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d302      	bcc.n	8002b0a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d113      	bne.n	8002b32 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	f043 0220 	orr.w	r2, r3, #32
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e007      	b.n	8002b42 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d1cb      	bne.n	8002ad8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b56:	e028      	b.n	8002baa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f831 	bl	8002bc4 <I2C_IsAcknowledgeFailed>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e026      	b.n	8002bba <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6c:	f7ff f9e8 	bl	8001f40 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d302      	bcc.n	8002b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d113      	bne.n	8002baa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f043 0220 	orr.w	r2, r3, #32
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e007      	b.n	8002bba <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d1cf      	bne.n	8002b58 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b10      	cmp	r3, #16
 8002bdc:	d151      	bne.n	8002c82 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bde:	e022      	b.n	8002c26 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be6:	d01e      	beq.n	8002c26 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be8:	f7ff f9aa 	bl	8001f40 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d302      	bcc.n	8002bfe <I2C_IsAcknowledgeFailed+0x3a>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d113      	bne.n	8002c26 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	f043 0220 	orr.w	r2, r3, #32
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e02e      	b.n	8002c84 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d1d5      	bne.n	8002be0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2210      	movs	r2, #16
 8002c3a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2220      	movs	r2, #32
 8002c42:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f7ff fedc 	bl	8002a02 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <I2C_IsAcknowledgeFailed+0xc8>)
 8002c56:	400b      	ands	r3, r1
 8002c58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f043 0204 	orr.w	r2, r3, #4
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	fe00e800 	.word	0xfe00e800

08002c90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	817b      	strh	r3, [r7, #10]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	0d5b      	lsrs	r3, r3, #21
 8002cac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <I2C_TransferConfig+0x58>)
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	ea02 0103 	and.w	r1, r2, r3
 8002cba:	897b      	ldrh	r3, [r7, #10]
 8002cbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cc0:	7a7b      	ldrb	r3, [r7, #9]
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	03ff63ff 	.word	0x03ff63ff

08002cec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d138      	bne.n	8002d74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e032      	b.n	8002d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2224      	movs	r2, #36	; 0x24
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0201 	bic.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6819      	ldr	r1, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d139      	bne.n	8002e0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e033      	b.n	8002e0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2224      	movs	r2, #36	; 0x24
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0201 	bic.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e000      	b.n	8002e0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e1c:	b08f      	sub	sp, #60	; 0x3c
 8002e1e:	af0a      	add	r7, sp, #40	; 0x28
 8002e20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e116      	b.n	800305a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe fef0 	bl	8001c2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2203      	movs	r2, #3
 8002e50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d102      	bne.n	8002e66 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f003 fbb8 	bl	80065e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	687e      	ldr	r6, [r7, #4]
 8002e78:	466d      	mov	r5, sp
 8002e7a:	f106 0410 	add.w	r4, r6, #16
 8002e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e8e:	1d33      	adds	r3, r6, #4
 8002e90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e92:	6838      	ldr	r0, [r7, #0]
 8002e94:	f003 fb52 	bl	800653c <USB_CoreInit>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e0d7      	b.n	800305a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 fba6 	bl	8006602 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
 8002eba:	e04a      	b.n	8002f52 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	333d      	adds	r3, #61	; 0x3d
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	333c      	adds	r3, #60	; 0x3c
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	b298      	uxth	r0, r3
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3342      	adds	r3, #66	; 0x42
 8002ef8:	4602      	mov	r2, r0
 8002efa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	333f      	adds	r3, #63	; 0x3f
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3344      	adds	r3, #68	; 0x44
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f24:	7bfa      	ldrb	r2, [r7, #15]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	3348      	adds	r3, #72	; 0x48
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	3350      	adds	r3, #80	; 0x50
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d3af      	bcc.n	8002ebc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]
 8002f60:	e044      	b.n	8002fec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f8e:	7bfa      	ldrb	r2, [r7, #15]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fa4:	7bfa      	ldrb	r2, [r7, #15]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fba:	7bfa      	ldrb	r2, [r7, #15]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d3b5      	bcc.n	8002f62 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	687e      	ldr	r6, [r7, #4]
 8002ffe:	466d      	mov	r5, sp
 8003000:	f106 0410 	add.w	r4, r6, #16
 8003004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800300a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800300c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003010:	e885 0003 	stmia.w	r5, {r0, r1}
 8003014:	1d33      	adds	r3, r6, #4
 8003016:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003018:	6838      	ldr	r0, [r7, #0]
 800301a:	f003 fb1d 	bl	8006658 <USB_DevInit>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e014      	b.n	800305a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	2b01      	cmp	r3, #1
 8003046:	d102      	bne.n	800304e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f80a 	bl	8003062 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f003 fcad 	bl	80069b2 <USB_DevDisconnect>

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003062 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003062:	b480      	push	{r7}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003094:	f043 0303 	orr.w	r3, r3, #3
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ba:	6013      	str	r3, [r2, #0]
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40007000 	.word	0x40007000

080030cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030d0:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <HAL_PWREx_GetVoltageRange+0x3c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030dc:	d102      	bne.n	80030e4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80030de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030e2:	e00b      	b.n	80030fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80030e4:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_PWREx_GetVoltageRange+0x3c>)
 80030e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f2:	d102      	bne.n	80030fa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80030f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030f8:	e000      	b.n	80030fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80030fa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40007000 	.word	0x40007000

0800310c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d141      	bne.n	800319e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800311a:	4b4b      	ldr	r3, [pc, #300]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003126:	d131      	bne.n	800318c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003128:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800312e:	4a46      	ldr	r2, [pc, #280]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003134:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003138:	4b43      	ldr	r3, [pc, #268]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003140:	4a41      	ldr	r2, [pc, #260]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003146:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003148:	4b40      	ldr	r3, [pc, #256]	; (800324c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2232      	movs	r2, #50	; 0x32
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	4a3f      	ldr	r2, [pc, #252]	; (8003250 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	0c9b      	lsrs	r3, r3, #18
 800315a:	3301      	adds	r3, #1
 800315c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800315e:	e002      	b.n	8003166 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3b01      	subs	r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003166:	4b38      	ldr	r3, [pc, #224]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003172:	d102      	bne.n	800317a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f2      	bne.n	8003160 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800317a:	4b33      	ldr	r3, [pc, #204]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003186:	d158      	bne.n	800323a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e057      	b.n	800323c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800318c:	4b2e      	ldr	r3, [pc, #184]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003192:	4a2d      	ldr	r2, [pc, #180]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003198:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800319c:	e04d      	b.n	800323a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a4:	d141      	bne.n	800322a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031a6:	4b28      	ldr	r3, [pc, #160]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b2:	d131      	bne.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031b4:	4b24      	ldr	r3, [pc, #144]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ba:	4a23      	ldr	r2, [pc, #140]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031c4:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031cc:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2232      	movs	r2, #50	; 0x32
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	0c9b      	lsrs	r3, r3, #18
 80031e6:	3301      	adds	r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031ea:	e002      	b.n	80031f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031f2:	4b15      	ldr	r3, [pc, #84]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fe:	d102      	bne.n	8003206 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f2      	bne.n	80031ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003212:	d112      	bne.n	800323a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e011      	b.n	800323c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800321e:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003224:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003228:	e007      	b.n	800323a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003232:	4a05      	ldr	r2, [pc, #20]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003238:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	40007000 	.word	0x40007000
 800324c:	20000000 	.word	0x20000000
 8003250:	431bde83 	.word	0x431bde83

08003254 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_PWREx_EnableVddUSB+0x1c>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a04      	ldr	r2, [pc, #16]	; (8003270 <HAL_PWREx_EnableVddUSB+0x1c>)
 800325e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003262:	6053      	str	r3, [r2, #4]
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40007000 	.word	0x40007000

08003274 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_PWREx_EnableVddIO2+0x1c>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4a04      	ldr	r2, [pc, #16]	; (8003290 <HAL_PWREx_EnableVddIO2+0x1c>)
 800327e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003282:	6053      	str	r3, [r2, #4]
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40007000 	.word	0x40007000

08003294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08a      	sub	sp, #40	; 0x28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f000 bc76 	b.w	8003b94 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032a8:	4ba1      	ldr	r3, [pc, #644]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b2:	4b9f      	ldr	r3, [pc, #636]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80e6 	beq.w	8003496 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d007      	beq.n	80032e0 <HAL_RCC_OscConfig+0x4c>
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	2b0c      	cmp	r3, #12
 80032d4:	f040 808d 	bne.w	80033f2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	f040 8089 	bne.w	80033f2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032e0:	4b93      	ldr	r3, [pc, #588]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <HAL_RCC_OscConfig+0x66>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f000 bc4d 	b.w	8003b94 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032fe:	4b8c      	ldr	r3, [pc, #560]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d004      	beq.n	8003314 <HAL_RCC_OscConfig+0x80>
 800330a:	4b89      	ldr	r3, [pc, #548]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003312:	e005      	b.n	8003320 <HAL_RCC_OscConfig+0x8c>
 8003314:	4b86      	ldr	r3, [pc, #536]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003320:	4293      	cmp	r3, r2
 8003322:	d224      	bcs.n	800336e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fe29 	bl	8003f80 <RCC_SetFlashLatencyFromMSIRange>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f000 bc2d 	b.w	8003b94 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800333a:	4b7d      	ldr	r3, [pc, #500]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a7c      	ldr	r2, [pc, #496]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003340:	f043 0308 	orr.w	r3, r3, #8
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b7a      	ldr	r3, [pc, #488]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	4977      	ldr	r1, [pc, #476]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003354:	4313      	orrs	r3, r2
 8003356:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003358:	4b75      	ldr	r3, [pc, #468]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	4972      	ldr	r1, [pc, #456]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
 800336c:	e025      	b.n	80033ba <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800336e:	4b70      	ldr	r3, [pc, #448]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6f      	ldr	r2, [pc, #444]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003374:	f043 0308 	orr.w	r3, r3, #8
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b6d      	ldr	r3, [pc, #436]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	496a      	ldr	r1, [pc, #424]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003388:	4313      	orrs	r3, r2
 800338a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800338c:	4b68      	ldr	r3, [pc, #416]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	4965      	ldr	r1, [pc, #404]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fde8 	bl	8003f80 <RCC_SetFlashLatencyFromMSIRange>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e3ec      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033ba:	f000 fd1f 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 80033be:	4601      	mov	r1, r0
 80033c0:	4b5b      	ldr	r3, [pc, #364]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	4a5a      	ldr	r2, [pc, #360]	; (8003534 <HAL_RCC_OscConfig+0x2a0>)
 80033cc:	5cd3      	ldrb	r3, [r2, r3]
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	fa21 f303 	lsr.w	r3, r1, r3
 80033d6:	4a58      	ldr	r2, [pc, #352]	; (8003538 <HAL_RCC_OscConfig+0x2a4>)
 80033d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033da:	4b58      	ldr	r3, [pc, #352]	; (800353c <HAL_RCC_OscConfig+0x2a8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe fd62 	bl	8001ea8 <HAL_InitTick>
 80033e4:	4603      	mov	r3, r0
 80033e6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d052      	beq.n	8003494 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80033ee:	7dfb      	ldrb	r3, [r7, #23]
 80033f0:	e3d0      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d032      	beq.n	8003460 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033fa:	4b4d      	ldr	r3, [pc, #308]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a4c      	ldr	r2, [pc, #304]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003406:	f7fe fd9b 	bl	8001f40 <HAL_GetTick>
 800340a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800340e:	f7fe fd97 	bl	8001f40 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e3b9      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003420:	4b43      	ldr	r3, [pc, #268]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800342c:	4b40      	ldr	r3, [pc, #256]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a3f      	ldr	r2, [pc, #252]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003432:	f043 0308 	orr.w	r3, r3, #8
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	493a      	ldr	r1, [pc, #232]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800344a:	4b39      	ldr	r3, [pc, #228]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	021b      	lsls	r3, r3, #8
 8003458:	4935      	ldr	r1, [pc, #212]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
 800345e:	e01a      	b.n	8003496 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003460:	4b33      	ldr	r3, [pc, #204]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a32      	ldr	r2, [pc, #200]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003466:	f023 0301 	bic.w	r3, r3, #1
 800346a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800346c:	f7fe fd68 	bl	8001f40 <HAL_GetTick>
 8003470:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003474:	f7fe fd64 	bl	8001f40 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e386      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003486:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x1e0>
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003494:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d073      	beq.n	800358a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d005      	beq.n	80034b4 <HAL_RCC_OscConfig+0x220>
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	2b0c      	cmp	r3, #12
 80034ac:	d10e      	bne.n	80034cc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d10b      	bne.n	80034cc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d063      	beq.n	8003588 <HAL_RCC_OscConfig+0x2f4>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d15f      	bne.n	8003588 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e363      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d4:	d106      	bne.n	80034e4 <HAL_RCC_OscConfig+0x250>
 80034d6:	4b16      	ldr	r3, [pc, #88]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a15      	ldr	r2, [pc, #84]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 80034dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	e01d      	b.n	8003520 <HAL_RCC_OscConfig+0x28c>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x274>
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a0f      	ldr	r2, [pc, #60]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 80034f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a0c      	ldr	r2, [pc, #48]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0x28c>
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a08      	ldr	r2, [pc, #32]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 800350e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a05      	ldr	r2, [pc, #20]	; (8003530 <HAL_RCC_OscConfig+0x29c>)
 800351a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01b      	beq.n	8003560 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fe fd0a 	bl	8001f40 <HAL_GetTick>
 800352c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800352e:	e010      	b.n	8003552 <HAL_RCC_OscConfig+0x2be>
 8003530:	40021000 	.word	0x40021000
 8003534:	0801e038 	.word	0x0801e038
 8003538:	20000000 	.word	0x20000000
 800353c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003540:	f7fe fcfe 	bl	8001f40 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	; 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e320      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003552:	4ba0      	ldr	r3, [pc, #640]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x2ac>
 800355e:	e014      	b.n	800358a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe fcee 	bl	8001f40 <HAL_GetTick>
 8003564:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003568:	f7fe fcea 	bl	8001f40 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	; 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e30c      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800357a:	4b96      	ldr	r3, [pc, #600]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x2d4>
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d060      	beq.n	8003658 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	2b04      	cmp	r3, #4
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_OscConfig+0x314>
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d119      	bne.n	80035d6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d116      	bne.n	80035d6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035a8:	4b8a      	ldr	r3, [pc, #552]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_OscConfig+0x32c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e2e9      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c0:	4b84      	ldr	r3, [pc, #528]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	061b      	lsls	r3, r3, #24
 80035ce:	4981      	ldr	r1, [pc, #516]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035d4:	e040      	b.n	8003658 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d023      	beq.n	8003626 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035de:	4b7d      	ldr	r3, [pc, #500]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7c      	ldr	r2, [pc, #496]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7fe fca9 	bl	8001f40 <HAL_GetTick>
 80035ee:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f2:	f7fe fca5 	bl	8001f40 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e2c7      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003604:	4b73      	ldr	r3, [pc, #460]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003610:	4b70      	ldr	r3, [pc, #448]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	496d      	ldr	r1, [pc, #436]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 8003620:	4313      	orrs	r3, r2
 8003622:	604b      	str	r3, [r1, #4]
 8003624:	e018      	b.n	8003658 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003626:	4b6b      	ldr	r3, [pc, #428]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a6a      	ldr	r2, [pc, #424]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 800362c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fe fc85 	bl	8001f40 <HAL_GetTick>
 8003636:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363a:	f7fe fc81 	bl	8001f40 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e2a3      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800364c:	4b61      	ldr	r3, [pc, #388]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f0      	bne.n	800363a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d07f      	beq.n	8003764 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d05f      	beq.n	800372c <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800366c:	4b59      	ldr	r3, [pc, #356]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 800366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003672:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699a      	ldr	r2, [r3, #24]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	429a      	cmp	r2, r3
 8003680:	d037      	beq.n	80036f2 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d006      	beq.n	800369a <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e27c      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01b      	beq.n	80036dc <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80036a4:	4b4b      	ldr	r3, [pc, #300]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 80036a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036aa:	4a4a      	ldr	r2, [pc, #296]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036b4:	f7fe fc44 	bl	8001f40 <HAL_GetTick>
 80036b8:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036bc:	f7fe fc40 	bl	8001f40 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b11      	cmp	r3, #17
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e262      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ce:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 80036d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ef      	bne.n	80036bc <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80036dc:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 80036de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e2:	f023 0210 	bic.w	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	493a      	ldr	r1, [pc, #232]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f2:	4b38      	ldr	r3, [pc, #224]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 80036f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f8:	4a36      	ldr	r2, [pc, #216]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003702:	f7fe fc1d 	bl	8001f40 <HAL_GetTick>
 8003706:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370a:	f7fe fc19 	bl	8001f40 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b11      	cmp	r3, #17
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e23b      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800371c:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 800371e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0ef      	beq.n	800370a <HAL_RCC_OscConfig+0x476>
 800372a:	e01b      	b.n	8003764 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372c:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 800372e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003732:	4a28      	ldr	r2, [pc, #160]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fe fc00 	bl	8001f40 <HAL_GetTick>
 8003740:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003744:	f7fe fbfc 	bl	8001f40 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b11      	cmp	r3, #17
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e21e      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003756:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 8003758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ef      	bne.n	8003744 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80c1 	beq.w	80038f4 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003772:	2300      	movs	r3, #0
 8003774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003778:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10e      	bne.n	80037a2 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003788:	4a12      	ldr	r2, [pc, #72]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 800378a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378e:	6593      	str	r3, [r2, #88]	; 0x58
 8003790:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <HAL_RCC_OscConfig+0x540>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a2:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <HAL_RCC_OscConfig+0x544>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d11c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <HAL_RCC_OscConfig+0x544>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <HAL_RCC_OscConfig+0x544>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ba:	f7fe fbc1 	bl	8001f40 <HAL_GetTick>
 80037be:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c0:	e00c      	b.n	80037dc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c2:	f7fe fbbd 	bl	8001f40 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d905      	bls.n	80037dc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e1df      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037dc:	4b99      	ldr	r3, [pc, #612]	; (8003a44 <HAL_RCC_OscConfig+0x7b0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ec      	beq.n	80037c2 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d02c      	beq.n	800384e <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80037f4:	4b94      	ldr	r3, [pc, #592]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003806:	4990      	ldr	r1, [pc, #576]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	d010      	beq.n	800383c <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800381a:	4b8b      	ldr	r3, [pc, #556]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 800381c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003820:	4a89      	ldr	r2, [pc, #548]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003822:	f043 0304 	orr.w	r3, r3, #4
 8003826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800382a:	4b87      	ldr	r3, [pc, #540]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003830:	4a85      	ldr	r2, [pc, #532]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800383a:	e018      	b.n	800386e <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800383c:	4b82      	ldr	r3, [pc, #520]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	4a81      	ldr	r2, [pc, #516]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800384c:	e00f      	b.n	800386e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800384e:	4b7e      	ldr	r3, [pc, #504]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	4a7c      	ldr	r2, [pc, #496]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800385e:	4b7a      	ldr	r3, [pc, #488]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003864:	4a78      	ldr	r2, [pc, #480]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003866:	f023 0304 	bic.w	r3, r3, #4
 800386a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d016      	beq.n	80038a4 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003876:	f7fe fb63 	bl	8001f40 <HAL_GetTick>
 800387a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387e:	f7fe fb5f 	bl	8001f40 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	f241 3288 	movw	r2, #5000	; 0x1388
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e17f      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003894:	4b6c      	ldr	r3, [pc, #432]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0ed      	beq.n	800387e <HAL_RCC_OscConfig+0x5ea>
 80038a2:	e01d      	b.n	80038e0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a4:	f7fe fb4c 	bl	8001f40 <HAL_GetTick>
 80038a8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ac:	f7fe fb48 	bl	8001f40 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e168      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c2:	4b61      	ldr	r3, [pc, #388]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1ed      	bne.n	80038ac <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80038d0:	4b5d      	ldr	r3, [pc, #372]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	4a5c      	ldr	r2, [pc, #368]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 80038d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d105      	bne.n	80038f4 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e8:	4b57      	ldr	r3, [pc, #348]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 80038ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ec:	4a56      	ldr	r2, [pc, #344]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 80038ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d03c      	beq.n	800397a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01c      	beq.n	8003942 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003908:	4b4f      	ldr	r3, [pc, #316]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 800390a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800390e:	4a4e      	ldr	r2, [pc, #312]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fe fb12 	bl	8001f40 <HAL_GetTick>
 800391c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003920:	f7fe fb0e 	bl	8001f40 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e130      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003932:	4b45      	ldr	r3, [pc, #276]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003934:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ef      	beq.n	8003920 <HAL_RCC_OscConfig+0x68c>
 8003940:	e01b      	b.n	800397a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003942:	4b41      	ldr	r3, [pc, #260]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003944:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003948:	4a3f      	ldr	r2, [pc, #252]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003952:	f7fe faf5 	bl	8001f40 <HAL_GetTick>
 8003956:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800395a:	f7fe faf1 	bl	8001f40 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e113      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800396c:	4b36      	ldr	r3, [pc, #216]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 800396e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1ef      	bne.n	800395a <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8107 	beq.w	8003b92 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	2b02      	cmp	r3, #2
 800398a:	f040 80cf 	bne.w	8003b2c <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800398e:	4b2e      	ldr	r3, [pc, #184]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0203 	and.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	429a      	cmp	r2, r3
 80039a0:	d12c      	bne.n	80039fc <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ac:	3b01      	subs	r3, #1
 80039ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d123      	bne.n	80039fc <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d11b      	bne.n	80039fc <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d113      	bne.n	80039fc <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	3b01      	subs	r3, #1
 80039e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d109      	bne.n	80039fc <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	085b      	lsrs	r3, r3, #1
 80039f4:	3b01      	subs	r3, #1
 80039f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d071      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	2b0c      	cmp	r3, #12
 8003a00:	d06c      	beq.n	8003adc <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a02:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d105      	bne.n	8003a1a <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a0e:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e0ba      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a09      	ldr	r2, [pc, #36]	; (8003a48 <HAL_RCC_OscConfig+0x7b4>)
 8003a24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a2a:	f7fe fa89 	bl	8001f40 <HAL_GetTick>
 8003a2e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a30:	e00c      	b.n	8003a4c <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fe fa85 	bl	8001f40 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d905      	bls.n	8003a4c <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e0a7      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
 8003a44:	40007000 	.word	0x40007000
 8003a48:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a4c:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ec      	bne.n	8003a32 <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a58:	4b50      	ldr	r3, [pc, #320]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	4b50      	ldr	r3, [pc, #320]	; (8003ba0 <HAL_RCC_OscConfig+0x90c>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a68:	3a01      	subs	r2, #1
 8003a6a:	0112      	lsls	r2, r2, #4
 8003a6c:	4311      	orrs	r1, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a72:	0212      	lsls	r2, r2, #8
 8003a74:	4311      	orrs	r1, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a7a:	0852      	lsrs	r2, r2, #1
 8003a7c:	3a01      	subs	r2, #1
 8003a7e:	0552      	lsls	r2, r2, #21
 8003a80:	4311      	orrs	r1, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a86:	0852      	lsrs	r2, r2, #1
 8003a88:	3a01      	subs	r2, #1
 8003a8a:	0652      	lsls	r2, r2, #25
 8003a8c:	4311      	orrs	r1, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a92:	06d2      	lsls	r2, r2, #27
 8003a94:	430a      	orrs	r2, r1
 8003a96:	4941      	ldr	r1, [pc, #260]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a9c:	4b3f      	ldr	r3, [pc, #252]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a3e      	ldr	r2, [pc, #248]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aa8:	4b3c      	ldr	r3, [pc, #240]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a3b      	ldr	r2, [pc, #236]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ab4:	f7fe fa44 	bl	8001f40 <HAL_GetTick>
 8003ab8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abc:	f7fe fa40 	bl	8001f40 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e062      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ace:	4b33      	ldr	r3, [pc, #204]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ada:	e05a      	b.n	8003b92 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e059      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae0:	4b2e      	ldr	r3, [pc, #184]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d152      	bne.n	8003b92 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003aec:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2a      	ldr	r2, [pc, #168]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003af6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003af8:	4b28      	ldr	r3, [pc, #160]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4a27      	ldr	r2, [pc, #156]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b04:	f7fe fa1c 	bl	8001f40 <HAL_GetTick>
 8003b08:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7fe fa18 	bl	8001f40 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e03a      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1e:	4b1f      	ldr	r3, [pc, #124]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x878>
 8003b2a:	e032      	b.n	8003b92 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d02d      	beq.n	8003b8e <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b32:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003b38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b3c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003b3e:	4b17      	ldr	r3, [pc, #92]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d105      	bne.n	8003b56 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b4a:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	4a13      	ldr	r2, [pc, #76]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003b50:	f023 0303 	bic.w	r3, r3, #3
 8003b54:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b56:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	4a10      	ldr	r2, [pc, #64]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003b5c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b66:	f7fe f9eb 	bl	8001f40 <HAL_GetTick>
 8003b6a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fe f9e7 	bl	8001f40 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e009      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_RCC_OscConfig+0x908>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <HAL_RCC_OscConfig+0x8da>
 8003b8c:	e001      	b.n	8003b92 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3728      	adds	r7, #40	; 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	019d800c 	.word	0x019d800c

08003ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e10f      	b.n	8003ddc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bbc:	4b89      	ldr	r3, [pc, #548]	; (8003de4 <HAL_RCC_ClockConfig+0x240>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d910      	bls.n	8003bec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4b86      	ldr	r3, [pc, #536]	; (8003de4 <HAL_RCC_ClockConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 020f 	bic.w	r2, r3, #15
 8003bd2:	4984      	ldr	r1, [pc, #528]	; (8003de4 <HAL_RCC_ClockConfig+0x240>)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b82      	ldr	r3, [pc, #520]	; (8003de4 <HAL_RCC_ClockConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0f7      	b.n	8003ddc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8089 	beq.w	8003d0c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d133      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c02:	4b79      	ldr	r3, [pc, #484]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e0e4      	b.n	8003ddc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003c12:	f000 fa0f 	bl	8004034 <RCC_GetSysClockFreqFromPLLSource>
 8003c16:	4602      	mov	r2, r0
 8003c18:	4b74      	ldr	r3, [pc, #464]	; (8003dec <HAL_RCC_ClockConfig+0x248>)
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d955      	bls.n	8003cca <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c1e:	4b72      	ldr	r3, [pc, #456]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10a      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c2a:	4b6f      	ldr	r3, [pc, #444]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c32:	4a6d      	ldr	r2, [pc, #436]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e044      	b.n	8003cca <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d03e      	beq.n	8003cca <HAL_RCC_ClockConfig+0x126>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d13a      	bne.n	8003cca <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c54:	4b64      	ldr	r3, [pc, #400]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c5c:	4a62      	ldr	r2, [pc, #392]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c62:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	e02f      	b.n	8003cca <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c72:	4b5d      	ldr	r3, [pc, #372]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d115      	bne.n	8003caa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e0ac      	b.n	8003ddc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c8a:	4b57      	ldr	r3, [pc, #348]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0a0      	b.n	8003ddc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c9a:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e098      	b.n	8003ddc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003caa:	f000 f8a7 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	4b4e      	ldr	r3, [pc, #312]	; (8003dec <HAL_RCC_ClockConfig+0x248>)
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d909      	bls.n	8003cca <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cb6:	4b4c      	ldr	r3, [pc, #304]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cbe:	4a4a      	ldr	r2, [pc, #296]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cca:	4b47      	ldr	r3, [pc, #284]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4944      	ldr	r1, [pc, #272]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cdc:	f7fe f930 	bl	8001f40 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce4:	f7fe f92c 	bl	8001f40 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e070      	b.n	8003ddc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 020c 	and.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1eb      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d009      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d18:	4b33      	ldr	r3, [pc, #204]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4930      	ldr	r1, [pc, #192]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b80      	cmp	r3, #128	; 0x80
 8003d30:	d105      	bne.n	8003d3e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d32:	4b2d      	ldr	r3, [pc, #180]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	4a2c      	ldr	r2, [pc, #176]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003d38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d3c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3e:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <HAL_RCC_ClockConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d210      	bcs.n	8003d6e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4c:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <HAL_RCC_ClockConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 020f 	bic.w	r2, r3, #15
 8003d54:	4923      	ldr	r1, [pc, #140]	; (8003de4 <HAL_RCC_ClockConfig+0x240>)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5c:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <HAL_RCC_ClockConfig+0x240>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d001      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e036      	b.n	8003ddc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	4918      	ldr	r1, [pc, #96]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d98:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4910      	ldr	r1, [pc, #64]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dac:	f000 f826 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003db0:	4601      	mov	r1, r0
 8003db2:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <HAL_RCC_ClockConfig+0x244>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	4a0c      	ldr	r2, [pc, #48]	; (8003df0 <HAL_RCC_ClockConfig+0x24c>)
 8003dbe:	5cd3      	ldrb	r3, [r2, r3]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	fa21 f303 	lsr.w	r3, r1, r3
 8003dc8:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <HAL_RCC_ClockConfig+0x250>)
 8003dca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <HAL_RCC_ClockConfig+0x254>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fe f869 	bl	8001ea8 <HAL_InitTick>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	73fb      	strb	r3, [r7, #15]

  return status;
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40022000 	.word	0x40022000
 8003de8:	40021000 	.word	0x40021000
 8003dec:	04c4b400 	.word	0x04c4b400
 8003df0:	0801e038 	.word	0x0801e038
 8003df4:	20000000 	.word	0x20000000
 8003df8:	20000004 	.word	0x20000004

08003dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b089      	sub	sp, #36	; 0x24
 8003e00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e0a:	4b3d      	ldr	r3, [pc, #244]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e14:	4b3a      	ldr	r3, [pc, #232]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x34>
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	2b0c      	cmp	r3, #12
 8003e28:	d121      	bne.n	8003e6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d11e      	bne.n	8003e6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e30:	4b33      	ldr	r3, [pc, #204]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d107      	bne.n	8003e4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e3c:	4b30      	ldr	r3, [pc, #192]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	e005      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e4c:	4b2c      	ldr	r3, [pc, #176]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e58:	4a2a      	ldr	r2, [pc, #168]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10d      	bne.n	8003e84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e6c:	e00a      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d102      	bne.n	8003e7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e74:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	e004      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d101      	bne.n	8003e84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e80:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8003e82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	2b0c      	cmp	r3, #12
 8003e88:	d133      	bne.n	8003ef2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e8a:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d002      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xa4>
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCC_GetSysClockFreq+0xaa>
 8003e9e:	e005      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ea2:	617b      	str	r3, [r7, #20]
      break;
 8003ea4:	e005      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ea6:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ea8:	617b      	str	r3, [r7, #20]
      break;
 8003eaa:	e002      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	617b      	str	r3, [r7, #20]
      break;
 8003eb0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eb2:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x104>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	091b      	lsrs	r3, r3, #4
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	0a1b      	lsrs	r3, r3, #8
 8003ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	fb02 f203 	mul.w	r2, r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x104>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	0e5b      	lsrs	r3, r3, #25
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ef2:	69bb      	ldr	r3, [r7, #24]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3724      	adds	r7, #36	; 0x24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	40021000 	.word	0x40021000
 8003f04:	0801e050 	.word	0x0801e050
 8003f08:	00f42400 	.word	0x00f42400
 8003f0c:	007a1200 	.word	0x007a1200

08003f10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f14:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f16:	681b      	ldr	r3, [r3, #0]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20000000 	.word	0x20000000

08003f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f2c:	f7ff fff0 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8003f30:	4601      	mov	r1, r0
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	0a1b      	lsrs	r3, r3, #8
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	4a04      	ldr	r2, [pc, #16]	; (8003f50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f3e:	5cd3      	ldrb	r3, [r2, r3]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	0801e048 	.word	0x0801e048

08003f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f58:	f7ff ffda 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8003f5c:	4601      	mov	r1, r0
 8003f5e:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	0adb      	lsrs	r3, r3, #11
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	4a04      	ldr	r2, [pc, #16]	; (8003f7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f6a:	5cd3      	ldrb	r3, [r2, r3]
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	0801e048 	.word	0x0801e048

08003f80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f8c:	4b27      	ldr	r3, [pc, #156]	; (800402c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f98:	f7ff f898 	bl	80030cc <HAL_PWREx_GetVoltageRange>
 8003f9c:	6178      	str	r0, [r7, #20]
 8003f9e:	e014      	b.n	8003fca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fa0:	4b22      	ldr	r3, [pc, #136]	; (800402c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	4a21      	ldr	r2, [pc, #132]	; (800402c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003faa:	6593      	str	r3, [r2, #88]	; 0x58
 8003fac:	4b1f      	ldr	r3, [pc, #124]	; (800402c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fb8:	f7ff f888 	bl	80030cc <HAL_PWREx_GetVoltageRange>
 8003fbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fbe:	4b1b      	ldr	r3, [pc, #108]	; (800402c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc2:	4a1a      	ldr	r2, [pc, #104]	; (800402c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd0:	d10b      	bne.n	8003fea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b80      	cmp	r3, #128	; 0x80
 8003fd6:	d913      	bls.n	8004000 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2ba0      	cmp	r3, #160	; 0xa0
 8003fdc:	d902      	bls.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fde:	2302      	movs	r3, #2
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	e00d      	b.n	8004000 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	e00a      	b.n	8004000 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b7f      	cmp	r3, #127	; 0x7f
 8003fee:	d902      	bls.n	8003ff6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e004      	b.n	8004000 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b70      	cmp	r3, #112	; 0x70
 8003ffa:	d101      	bne.n	8004000 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004000:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f023 020f 	bic.w	r2, r3, #15
 8004008:	4909      	ldr	r1, [pc, #36]	; (8004030 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004010:	4b07      	ldr	r3, [pc, #28]	; (8004030 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	429a      	cmp	r2, r3
 800401c:	d001      	beq.n	8004022 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40021000 	.word	0x40021000
 8004030:	40022000 	.word	0x40022000

08004034 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800403e:	4b2d      	ldr	r3, [pc, #180]	; (80040f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	2b01      	cmp	r3, #1
 8004048:	d118      	bne.n	800407c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800404a:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d107      	bne.n	8004066 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004056:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800405c:	0a1b      	lsrs	r3, r3, #8
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e005      	b.n	8004072 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004066:	4b23      	ldr	r3, [pc, #140]	; (80040f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	091b      	lsrs	r3, r3, #4
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004072:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800407c:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d002      	beq.n	8004092 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800408c:	2b03      	cmp	r3, #3
 800408e:	d003      	beq.n	8004098 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8004090:	e005      	b.n	800409e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004092:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004094:	613b      	str	r3, [r7, #16]
    break;
 8004096:	e005      	b.n	80040a4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004098:	4b19      	ldr	r3, [pc, #100]	; (8004100 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800409a:	613b      	str	r3, [r7, #16]
    break;
 800409c:	e002      	b.n	80040a4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	613b      	str	r3, [r7, #16]
    break;
 80040a2:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040a4:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	3301      	adds	r3, #1
 80040b0:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040b2:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	0a1b      	lsrs	r3, r3, #8
 80040b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	fb02 f203 	mul.w	r2, r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c8:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	0e5b      	lsrs	r3, r3, #25
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	3301      	adds	r3, #1
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80040e4:	683b      	ldr	r3, [r7, #0]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40021000 	.word	0x40021000
 80040f8:	0801e050 	.word	0x0801e050
 80040fc:	00f42400 	.word	0x00f42400
 8004100:	007a1200 	.word	0x007a1200

08004104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800410c:	2300      	movs	r3, #0
 800410e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004110:	2300      	movs	r3, #0
 8004112:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411c:	2b00      	cmp	r3, #0
 800411e:	d03d      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	d00b      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004128:	2b40      	cmp	r3, #64	; 0x40
 800412a:	d804      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00e      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004130:	2b20      	cmp	r3, #32
 8004132:	d015      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004134:	e01d      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004136:	2b60      	cmp	r3, #96	; 0x60
 8004138:	d01e      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800413a:	2b80      	cmp	r3, #128	; 0x80
 800413c:	d01c      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800413e:	e018      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004140:	4b86      	ldr	r3, [pc, #536]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a85      	ldr	r2, [pc, #532]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800414c:	e015      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3304      	adds	r3, #4
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fb49 	bl	80047ec <RCCEx_PLLSAI1_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800415e:	e00c      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3320      	adds	r3, #32
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fc30 	bl	80049cc <RCCEx_PLLSAI2_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004170:	e003      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	74fb      	strb	r3, [r7, #19]
      break;
 8004176:	e000      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8004178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10b      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004180:	4b76      	ldr	r3, [pc, #472]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004186:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800418e:	4973      	ldr	r1, [pc, #460]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004196:	e001      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d042      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b0:	d00f      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80041b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b6:	d805      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d011      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80041bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c0:	d017      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80041c2:	e01f      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80041c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c8:	d01f      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ce:	d01c      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041d0:	e018      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041d2:	4b62      	ldr	r3, [pc, #392]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	4a61      	ldr	r2, [pc, #388]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041de:	e015      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fb00 	bl	80047ec <RCCEx_PLLSAI1_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041f0:	e00c      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3320      	adds	r3, #32
 80041f6:	2100      	movs	r1, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fbe7 	bl	80049cc <RCCEx_PLLSAI2_Config>
 80041fe:	4603      	mov	r3, r0
 8004200:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004202:	e003      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	74fb      	strb	r3, [r7, #19]
      break;
 8004208:	e000      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800420a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800420c:	7cfb      	ldrb	r3, [r7, #19]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10b      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004212:	4b52      	ldr	r3, [pc, #328]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004214:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004220:	494e      	ldr	r1, [pc, #312]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004228:	e001      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422a:	7cfb      	ldrb	r3, [r7, #19]
 800422c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 809f 	beq.w	800437a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423c:	2300      	movs	r3, #0
 800423e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004240:	4b46      	ldr	r3, [pc, #280]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00d      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004256:	4b41      	ldr	r3, [pc, #260]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	4a40      	ldr	r2, [pc, #256]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800425c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004260:	6593      	str	r3, [r2, #88]	; 0x58
 8004262:	4b3e      	ldr	r3, [pc, #248]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426e:	2301      	movs	r3, #1
 8004270:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004272:	4b3b      	ldr	r3, [pc, #236]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a3a      	ldr	r2, [pc, #232]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800427e:	f7fd fe5f 	bl	8001f40 <HAL_GetTick>
 8004282:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004284:	e009      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004286:	f7fd fe5b 	bl	8001f40 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d902      	bls.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	74fb      	strb	r3, [r7, #19]
        break;
 8004298:	e005      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800429a:	4b31      	ldr	r3, [pc, #196]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0ef      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d15b      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042ac:	4b2b      	ldr	r3, [pc, #172]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01f      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d019      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042ca:	4b24      	ldr	r3, [pc, #144]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042d6:	4b21      	ldr	r3, [pc, #132]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	4a1f      	ldr	r2, [pc, #124]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042e6:	4b1d      	ldr	r3, [pc, #116]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ec:	4a1b      	ldr	r2, [pc, #108]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042f6:	4a19      	ldr	r2, [pc, #100]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d016      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fd fe1a 	bl	8001f40 <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430e:	e00b      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004310:	f7fd fe16 	bl	8001f40 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d902      	bls.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	74fb      	strb	r3, [r7, #19]
            break;
 8004326:	e006      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0ec      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8004336:	7cfb      	ldrb	r3, [r7, #19]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10c      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800433c:	4b07      	ldr	r3, [pc, #28]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800434c:	4903      	ldr	r1, [pc, #12]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004354:	e008      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	74bb      	strb	r3, [r7, #18]
 800435a:	e005      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800435c:	40021000 	.word	0x40021000
 8004360:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004364:	7cfb      	ldrb	r3, [r7, #19]
 8004366:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004368:	7c7b      	ldrb	r3, [r7, #17]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d105      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800436e:	4ba0      	ldr	r3, [pc, #640]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	4a9f      	ldr	r2, [pc, #636]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004378:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004386:	4b9a      	ldr	r3, [pc, #616]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	f023 0203 	bic.w	r2, r3, #3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	4996      	ldr	r1, [pc, #600]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043a8:	4b91      	ldr	r3, [pc, #580]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f023 020c 	bic.w	r2, r3, #12
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	498e      	ldr	r1, [pc, #568]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043ca:	4b89      	ldr	r3, [pc, #548]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d8:	4985      	ldr	r1, [pc, #532]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043ec:	4b80      	ldr	r3, [pc, #512]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fa:	497d      	ldr	r1, [pc, #500]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800440e:	4b78      	ldr	r3, [pc, #480]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441c:	4974      	ldr	r1, [pc, #464]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004430:	4b6f      	ldr	r3, [pc, #444]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443e:	496c      	ldr	r1, [pc, #432]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004452:	4b67      	ldr	r3, [pc, #412]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004460:	4963      	ldr	r1, [pc, #396]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004474:	4b5e      	ldr	r3, [pc, #376]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004482:	495b      	ldr	r1, [pc, #364]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004496:	4b56      	ldr	r3, [pc, #344]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a4:	4952      	ldr	r1, [pc, #328]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044b8:	4b4d      	ldr	r3, [pc, #308]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c6:	494a      	ldr	r1, [pc, #296]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044da:	4b45      	ldr	r3, [pc, #276]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e8:	4941      	ldr	r1, [pc, #260]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044fc:	4b3c      	ldr	r3, [pc, #240]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004502:	f023 0203 	bic.w	r2, r3, #3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450a:	4939      	ldr	r1, [pc, #228]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d028      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800451e:	4b34      	ldr	r3, [pc, #208]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004524:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452c:	4930      	ldr	r1, [pc, #192]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800453c:	d106      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800453e:	4b2c      	ldr	r3, [pc, #176]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	4a2b      	ldr	r2, [pc, #172]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004548:	60d3      	str	r3, [r2, #12]
 800454a:	e011      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004550:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004554:	d10c      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3304      	adds	r3, #4
 800455a:	2101      	movs	r1, #1
 800455c:	4618      	mov	r0, r3
 800455e:	f000 f945 	bl	80047ec <RCCEx_PLLSAI1_Config>
 8004562:	4603      	mov	r3, r0
 8004564:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004566:	7cfb      	ldrb	r3, [r7, #19]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800456c:	7cfb      	ldrb	r3, [r7, #19]
 800456e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d04d      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004584:	d108      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004586:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004588:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800458c:	4a18      	ldr	r2, [pc, #96]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004592:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004596:	e012      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004598:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800459e:	4a14      	ldr	r2, [pc, #80]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045a4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80045a8:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045b6:	490e      	ldr	r1, [pc, #56]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045c6:	d106      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c8:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a08      	ldr	r2, [pc, #32]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045d2:	60d3      	str	r3, [r2, #12]
 80045d4:	e020      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045de:	d109      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045e0:	4b03      	ldr	r3, [pc, #12]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4a02      	ldr	r2, [pc, #8]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ea:	60d3      	str	r3, [r2, #12]
 80045ec:	e014      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80045ee:	bf00      	nop
 80045f0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045fc:	d10c      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3304      	adds	r3, #4
 8004602:	2101      	movs	r1, #1
 8004604:	4618      	mov	r0, r3
 8004606:	f000 f8f1 	bl	80047ec <RCCEx_PLLSAI1_Config>
 800460a:	4603      	mov	r3, r0
 800460c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800460e:	7cfb      	ldrb	r3, [r7, #19]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004614:	7cfb      	ldrb	r3, [r7, #19]
 8004616:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d028      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004624:	4b68      	ldr	r3, [pc, #416]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004632:	4965      	ldr	r1, [pc, #404]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800463e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004642:	d106      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004644:	4b60      	ldr	r3, [pc, #384]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4a5f      	ldr	r2, [pc, #380]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800464a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800464e:	60d3      	str	r3, [r2, #12]
 8004650:	e011      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004656:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800465a:	d10c      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	2101      	movs	r1, #1
 8004662:	4618      	mov	r0, r3
 8004664:	f000 f8c2 	bl	80047ec <RCCEx_PLLSAI1_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8004672:	7cfb      	ldrb	r3, [r7, #19]
 8004674:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d01e      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004682:	4b51      	ldr	r3, [pc, #324]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004692:	494d      	ldr	r1, [pc, #308]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046a4:	d10c      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3304      	adds	r3, #4
 80046aa:	2102      	movs	r1, #2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 f89d 	bl	80047ec <RCCEx_PLLSAI1_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046b6:	7cfb      	ldrb	r3, [r7, #19]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80046bc:	7cfb      	ldrb	r3, [r7, #19]
 80046be:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00b      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046cc:	4b3e      	ldr	r3, [pc, #248]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80046ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046d2:	f023 0204 	bic.w	r2, r3, #4
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046dc:	493a      	ldr	r1, [pc, #232]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00b      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80046f0:	4b35      	ldr	r3, [pc, #212]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80046f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046f6:	f023 0218 	bic.w	r2, r3, #24
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004700:	4931      	ldr	r1, [pc, #196]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d035      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004714:	4b2c      	ldr	r3, [pc, #176]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2b      	ldr	r2, [pc, #172]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800471a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800471e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004720:	f7fd fc0e 	bl	8001f40 <HAL_GetTick>
 8004724:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004726:	e009      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004728:	f7fd fc0a 	bl	8001f40 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d902      	bls.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	74fb      	strb	r3, [r7, #19]
        break;
 800473a:	e005      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800473c:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1ef      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d113      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800474e:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004750:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004754:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800475e:	491a      	ldr	r1, [pc, #104]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3320      	adds	r3, #32
 800476a:	2102      	movs	r1, #2
 800476c:	4618      	mov	r0, r3
 800476e:	f000 f92d 	bl	80049cc <RCCEx_PLLSAI2_Config>
 8004772:	4603      	mov	r3, r0
 8004774:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004776:	7cfb      	ldrb	r3, [r7, #19]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 800477c:	7cfb      	ldrb	r3, [r7, #19]
 800477e:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d017      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800478c:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800478e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004792:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479c:	490a      	ldr	r1, [pc, #40]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047ae:	d105      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4a04      	ldr	r2, [pc, #16]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80047b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000

080047cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a04      	ldr	r2, [pc, #16]	; (80047e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047d6:	f043 0304 	orr.w	r3, r3, #4
 80047da:	6013      	str	r3, [r2, #0]
}
 80047dc:	bf00      	nop
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40021000 	.word	0x40021000

080047ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047fa:	4b70      	ldr	r3, [pc, #448]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00e      	beq.n	8004824 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004806:	4b6d      	ldr	r3, [pc, #436]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f003 0203 	and.w	r2, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d103      	bne.n	800481e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
       ||
 800481a:	2b00      	cmp	r3, #0
 800481c:	d13f      	bne.n	800489e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	73fb      	strb	r3, [r7, #15]
 8004822:	e03c      	b.n	800489e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b02      	cmp	r3, #2
 800482a:	d00c      	beq.n	8004846 <RCCEx_PLLSAI1_Config+0x5a>
 800482c:	2b03      	cmp	r3, #3
 800482e:	d013      	beq.n	8004858 <RCCEx_PLLSAI1_Config+0x6c>
 8004830:	2b01      	cmp	r3, #1
 8004832:	d120      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004834:	4b61      	ldr	r3, [pc, #388]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d11d      	bne.n	800487c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004844:	e01a      	b.n	800487c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004846:	4b5d      	ldr	r3, [pc, #372]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484e:	2b00      	cmp	r3, #0
 8004850:	d116      	bne.n	8004880 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004856:	e013      	b.n	8004880 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004858:	4b58      	ldr	r3, [pc, #352]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10f      	bne.n	8004884 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004864:	4b55      	ldr	r3, [pc, #340]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004874:	e006      	b.n	8004884 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
      break;
 800487a:	e004      	b.n	8004886 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800487c:	bf00      	nop
 800487e:	e002      	b.n	8004886 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004880:	bf00      	nop
 8004882:	e000      	b.n	8004886 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004884:	bf00      	nop
    }

    if(status == HAL_OK)
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d108      	bne.n	800489e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800488c:	4b4b      	ldr	r3, [pc, #300]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f023 0203 	bic.w	r2, r3, #3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4948      	ldr	r1, [pc, #288]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 800489a:	4313      	orrs	r3, r2
 800489c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f040 8086 	bne.w	80049b2 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048a6:	4b45      	ldr	r3, [pc, #276]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a44      	ldr	r2, [pc, #272]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 80048ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b2:	f7fd fb45 	bl	8001f40 <HAL_GetTick>
 80048b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048b8:	e009      	b.n	80048ce <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048ba:	f7fd fb41 	bl	8001f40 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d902      	bls.n	80048ce <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	73fb      	strb	r3, [r7, #15]
        break;
 80048cc:	e005      	b.n	80048da <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048ce:	4b3b      	ldr	r3, [pc, #236]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ef      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d168      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d113      	bne.n	800490e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048e6:	4b35      	ldr	r3, [pc, #212]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	4b35      	ldr	r3, [pc, #212]	; (80049c0 <RCCEx_PLLSAI1_Config+0x1d4>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6892      	ldr	r2, [r2, #8]
 80048f2:	0211      	lsls	r1, r2, #8
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	68d2      	ldr	r2, [r2, #12]
 80048f8:	06d2      	lsls	r2, r2, #27
 80048fa:	4311      	orrs	r1, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6852      	ldr	r2, [r2, #4]
 8004900:	3a01      	subs	r2, #1
 8004902:	0112      	lsls	r2, r2, #4
 8004904:	430a      	orrs	r2, r1
 8004906:	492d      	ldr	r1, [pc, #180]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 8004908:	4313      	orrs	r3, r2
 800490a:	610b      	str	r3, [r1, #16]
 800490c:	e02d      	b.n	800496a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d115      	bne.n	8004940 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004914:	4b29      	ldr	r3, [pc, #164]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	4b2a      	ldr	r3, [pc, #168]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800491a:	4013      	ands	r3, r2
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6892      	ldr	r2, [r2, #8]
 8004920:	0211      	lsls	r1, r2, #8
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6912      	ldr	r2, [r2, #16]
 8004926:	0852      	lsrs	r2, r2, #1
 8004928:	3a01      	subs	r2, #1
 800492a:	0552      	lsls	r2, r2, #21
 800492c:	4311      	orrs	r1, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6852      	ldr	r2, [r2, #4]
 8004932:	3a01      	subs	r2, #1
 8004934:	0112      	lsls	r2, r2, #4
 8004936:	430a      	orrs	r2, r1
 8004938:	4920      	ldr	r1, [pc, #128]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 800493a:	4313      	orrs	r3, r2
 800493c:	610b      	str	r3, [r1, #16]
 800493e:	e014      	b.n	800496a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004940:	4b1e      	ldr	r3, [pc, #120]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004946:	4013      	ands	r3, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6892      	ldr	r2, [r2, #8]
 800494c:	0211      	lsls	r1, r2, #8
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6952      	ldr	r2, [r2, #20]
 8004952:	0852      	lsrs	r2, r2, #1
 8004954:	3a01      	subs	r2, #1
 8004956:	0652      	lsls	r2, r2, #25
 8004958:	4311      	orrs	r1, r2
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6852      	ldr	r2, [r2, #4]
 800495e:	3a01      	subs	r2, #1
 8004960:	0112      	lsls	r2, r2, #4
 8004962:	430a      	orrs	r2, r1
 8004964:	4915      	ldr	r1, [pc, #84]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 8004966:	4313      	orrs	r3, r2
 8004968:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800496a:	4b14      	ldr	r3, [pc, #80]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a13      	ldr	r2, [pc, #76]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 8004970:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004974:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004976:	f7fd fae3 	bl	8001f40 <HAL_GetTick>
 800497a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800497c:	e009      	b.n	8004992 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800497e:	f7fd fadf 	bl	8001f40 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d902      	bls.n	8004992 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	73fb      	strb	r3, [r7, #15]
          break;
 8004990:	e005      	b.n	800499e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004992:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0ef      	beq.n	800497e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d106      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	4903      	ldr	r1, [pc, #12]	; (80049bc <RCCEx_PLLSAI1_Config+0x1d0>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40021000 	.word	0x40021000
 80049c0:	07ff800f 	.word	0x07ff800f
 80049c4:	ff9f800f 	.word	0xff9f800f
 80049c8:	f9ff800f 	.word	0xf9ff800f

080049cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049da:	4b70      	ldr	r3, [pc, #448]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00e      	beq.n	8004a04 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049e6:	4b6d      	ldr	r3, [pc, #436]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f003 0203 	and.w	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d103      	bne.n	80049fe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
       ||
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d13f      	bne.n	8004a7e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]
 8004a02:	e03c      	b.n	8004a7e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d00c      	beq.n	8004a26 <RCCEx_PLLSAI2_Config+0x5a>
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d013      	beq.n	8004a38 <RCCEx_PLLSAI2_Config+0x6c>
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d120      	bne.n	8004a56 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a14:	4b61      	ldr	r3, [pc, #388]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d11d      	bne.n	8004a5c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a24:	e01a      	b.n	8004a5c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a26:	4b5d      	ldr	r3, [pc, #372]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d116      	bne.n	8004a60 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a36:	e013      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a38:	4b58      	ldr	r3, [pc, #352]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10f      	bne.n	8004a64 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a44:	4b55      	ldr	r3, [pc, #340]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d109      	bne.n	8004a64 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a54:	e006      	b.n	8004a64 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
      break;
 8004a5a:	e004      	b.n	8004a66 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004a5c:	bf00      	nop
 8004a5e:	e002      	b.n	8004a66 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004a60:	bf00      	nop
 8004a62:	e000      	b.n	8004a66 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004a64:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d108      	bne.n	8004a7e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004a6c:	4b4b      	ldr	r3, [pc, #300]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f023 0203 	bic.w	r2, r3, #3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4948      	ldr	r1, [pc, #288]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f040 8086 	bne.w	8004b92 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a86:	4b45      	ldr	r3, [pc, #276]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a44      	ldr	r2, [pc, #272]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a92:	f7fd fa55 	bl	8001f40 <HAL_GetTick>
 8004a96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a98:	e009      	b.n	8004aae <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a9a:	f7fd fa51 	bl	8001f40 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d902      	bls.n	8004aae <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	73fb      	strb	r3, [r7, #15]
        break;
 8004aac:	e005      	b.n	8004aba <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aae:	4b3b      	ldr	r3, [pc, #236]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1ef      	bne.n	8004a9a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d168      	bne.n	8004b92 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d113      	bne.n	8004aee <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ac6:	4b35      	ldr	r3, [pc, #212]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004ac8:	695a      	ldr	r2, [r3, #20]
 8004aca:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <RCCEx_PLLSAI2_Config+0x1d4>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6892      	ldr	r2, [r2, #8]
 8004ad2:	0211      	lsls	r1, r2, #8
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	68d2      	ldr	r2, [r2, #12]
 8004ad8:	06d2      	lsls	r2, r2, #27
 8004ada:	4311      	orrs	r1, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6852      	ldr	r2, [r2, #4]
 8004ae0:	3a01      	subs	r2, #1
 8004ae2:	0112      	lsls	r2, r2, #4
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	492d      	ldr	r1, [pc, #180]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	614b      	str	r3, [r1, #20]
 8004aec:	e02d      	b.n	8004b4a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d115      	bne.n	8004b20 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004af4:	4b29      	ldr	r3, [pc, #164]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	4b2a      	ldr	r3, [pc, #168]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6892      	ldr	r2, [r2, #8]
 8004b00:	0211      	lsls	r1, r2, #8
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6912      	ldr	r2, [r2, #16]
 8004b06:	0852      	lsrs	r2, r2, #1
 8004b08:	3a01      	subs	r2, #1
 8004b0a:	0552      	lsls	r2, r2, #21
 8004b0c:	4311      	orrs	r1, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6852      	ldr	r2, [r2, #4]
 8004b12:	3a01      	subs	r2, #1
 8004b14:	0112      	lsls	r2, r2, #4
 8004b16:	430a      	orrs	r2, r1
 8004b18:	4920      	ldr	r1, [pc, #128]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	614b      	str	r3, [r1, #20]
 8004b1e:	e014      	b.n	8004b4a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b20:	4b1e      	ldr	r3, [pc, #120]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6892      	ldr	r2, [r2, #8]
 8004b2c:	0211      	lsls	r1, r2, #8
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6952      	ldr	r2, [r2, #20]
 8004b32:	0852      	lsrs	r2, r2, #1
 8004b34:	3a01      	subs	r2, #1
 8004b36:	0652      	lsls	r2, r2, #25
 8004b38:	4311      	orrs	r1, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6852      	ldr	r2, [r2, #4]
 8004b3e:	3a01      	subs	r2, #1
 8004b40:	0112      	lsls	r2, r2, #4
 8004b42:	430a      	orrs	r2, r1
 8004b44:	4915      	ldr	r1, [pc, #84]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b4a:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b56:	f7fd f9f3 	bl	8001f40 <HAL_GetTick>
 8004b5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b5c:	e009      	b.n	8004b72 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b5e:	f7fd f9ef 	bl	8001f40 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d902      	bls.n	8004b72 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	73fb      	strb	r3, [r7, #15]
          break;
 8004b70:	e005      	b.n	8004b7e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b72:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0ef      	beq.n	8004b5e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b86:	695a      	ldr	r2, [r3, #20]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	4903      	ldr	r1, [pc, #12]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	07ff800f 	.word	0x07ff800f
 8004ba4:	ff9f800f 	.word	0xff9f800f
 8004ba8:	f9ff800f 	.word	0xf9ff800f

08004bac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e042      	b.n	8004c44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d106      	bne.n	8004bd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7fc ffe5 	bl	8001ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2224      	movs	r2, #36	; 0x24
 8004bda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0201 	bic.w	r2, r2, #1
 8004bec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f82e 	bl	8004c50 <UART_SetConfig>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e022      	b.n	8004c44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f001 fa10 	bl	800602c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f001 fa97 	bl	8006170 <UART_CheckIdleState>
 8004c42:	4603      	mov	r3, r0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	0000      	movs	r0, r0
	...

08004c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c50:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004c54:	b08a      	sub	sp, #40	; 0x28
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c84:	4313      	orrs	r3, r2
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4baa      	ldr	r3, [pc, #680]	; (8004f38 <UART_SetConfig+0x2e8>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a9f      	ldr	r2, [pc, #636]	; (8004f3c <UART_SetConfig+0x2ec>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004cd6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	f023 010f 	bic.w	r1, r3, #15
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a90      	ldr	r2, [pc, #576]	; (8004f40 <UART_SetConfig+0x2f0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d126      	bne.n	8004d52 <UART_SetConfig+0x102>
 8004d04:	4b8f      	ldr	r3, [pc, #572]	; (8004f44 <UART_SetConfig+0x2f4>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d81a      	bhi.n	8004d48 <UART_SetConfig+0xf8>
 8004d12:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <UART_SetConfig+0xc8>)
 8004d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d18:	08004d29 	.word	0x08004d29
 8004d1c:	08004d39 	.word	0x08004d39
 8004d20:	08004d31 	.word	0x08004d31
 8004d24:	08004d41 	.word	0x08004d41
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2e:	e116      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004d30:	2302      	movs	r3, #2
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d36:	e112      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3e:	e10e      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004d40:	2308      	movs	r3, #8
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d46:	e10a      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004d48:	2310      	movs	r3, #16
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4e:	bf00      	nop
 8004d50:	e105      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a7c      	ldr	r2, [pc, #496]	; (8004f48 <UART_SetConfig+0x2f8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d138      	bne.n	8004dce <UART_SetConfig+0x17e>
 8004d5c:	4b79      	ldr	r3, [pc, #484]	; (8004f44 <UART_SetConfig+0x2f4>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	2b0c      	cmp	r3, #12
 8004d68:	d82c      	bhi.n	8004dc4 <UART_SetConfig+0x174>
 8004d6a:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <UART_SetConfig+0x120>)
 8004d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d70:	08004da5 	.word	0x08004da5
 8004d74:	08004dc5 	.word	0x08004dc5
 8004d78:	08004dc5 	.word	0x08004dc5
 8004d7c:	08004dc5 	.word	0x08004dc5
 8004d80:	08004db5 	.word	0x08004db5
 8004d84:	08004dc5 	.word	0x08004dc5
 8004d88:	08004dc5 	.word	0x08004dc5
 8004d8c:	08004dc5 	.word	0x08004dc5
 8004d90:	08004dad 	.word	0x08004dad
 8004d94:	08004dc5 	.word	0x08004dc5
 8004d98:	08004dc5 	.word	0x08004dc5
 8004d9c:	08004dc5 	.word	0x08004dc5
 8004da0:	08004dbd 	.word	0x08004dbd
 8004da4:	2300      	movs	r3, #0
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004daa:	e0d8      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004dac:	2302      	movs	r3, #2
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db2:	e0d4      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004db4:	2304      	movs	r3, #4
 8004db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dba:	e0d0      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc2:	e0cc      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dca:	bf00      	nop
 8004dcc:	e0c7      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a5e      	ldr	r2, [pc, #376]	; (8004f4c <UART_SetConfig+0x2fc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d125      	bne.n	8004e24 <UART_SetConfig+0x1d4>
 8004dd8:	4b5a      	ldr	r3, [pc, #360]	; (8004f44 <UART_SetConfig+0x2f4>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004de2:	2b10      	cmp	r3, #16
 8004de4:	d011      	beq.n	8004e0a <UART_SetConfig+0x1ba>
 8004de6:	2b10      	cmp	r3, #16
 8004de8:	d802      	bhi.n	8004df0 <UART_SetConfig+0x1a0>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d005      	beq.n	8004dfa <UART_SetConfig+0x1aa>
 8004dee:	e014      	b.n	8004e1a <UART_SetConfig+0x1ca>
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d006      	beq.n	8004e02 <UART_SetConfig+0x1b2>
 8004df4:	2b30      	cmp	r3, #48	; 0x30
 8004df6:	d00c      	beq.n	8004e12 <UART_SetConfig+0x1c2>
 8004df8:	e00f      	b.n	8004e1a <UART_SetConfig+0x1ca>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e00:	e0ad      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004e02:	2302      	movs	r3, #2
 8004e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e08:	e0a9      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004e0a:	2304      	movs	r3, #4
 8004e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e10:	e0a5      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004e12:	2308      	movs	r3, #8
 8004e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e18:	e0a1      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004e1a:	2310      	movs	r3, #16
 8004e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e20:	bf00      	nop
 8004e22:	e09c      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a49      	ldr	r2, [pc, #292]	; (8004f50 <UART_SetConfig+0x300>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d125      	bne.n	8004e7a <UART_SetConfig+0x22a>
 8004e2e:	4b45      	ldr	r3, [pc, #276]	; (8004f44 <UART_SetConfig+0x2f4>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	d011      	beq.n	8004e60 <UART_SetConfig+0x210>
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d802      	bhi.n	8004e46 <UART_SetConfig+0x1f6>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <UART_SetConfig+0x200>
 8004e44:	e014      	b.n	8004e70 <UART_SetConfig+0x220>
 8004e46:	2b80      	cmp	r3, #128	; 0x80
 8004e48:	d006      	beq.n	8004e58 <UART_SetConfig+0x208>
 8004e4a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e4c:	d00c      	beq.n	8004e68 <UART_SetConfig+0x218>
 8004e4e:	e00f      	b.n	8004e70 <UART_SetConfig+0x220>
 8004e50:	2300      	movs	r3, #0
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e56:	e082      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5e:	e07e      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004e60:	2304      	movs	r3, #4
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e66:	e07a      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004e68:	2308      	movs	r3, #8
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6e:	e076      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004e70:	2310      	movs	r3, #16
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e76:	bf00      	nop
 8004e78:	e071      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a35      	ldr	r2, [pc, #212]	; (8004f54 <UART_SetConfig+0x304>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d129      	bne.n	8004ed8 <UART_SetConfig+0x288>
 8004e84:	4b2f      	ldr	r3, [pc, #188]	; (8004f44 <UART_SetConfig+0x2f4>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e92:	d014      	beq.n	8004ebe <UART_SetConfig+0x26e>
 8004e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e98:	d802      	bhi.n	8004ea0 <UART_SetConfig+0x250>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <UART_SetConfig+0x25e>
 8004e9e:	e016      	b.n	8004ece <UART_SetConfig+0x27e>
 8004ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea4:	d007      	beq.n	8004eb6 <UART_SetConfig+0x266>
 8004ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eaa:	d00c      	beq.n	8004ec6 <UART_SetConfig+0x276>
 8004eac:	e00f      	b.n	8004ece <UART_SetConfig+0x27e>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb4:	e053      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ebc:	e04f      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004ebe:	2304      	movs	r3, #4
 8004ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec4:	e04b      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ecc:	e047      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004ece:	2310      	movs	r3, #16
 8004ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed4:	bf00      	nop
 8004ed6:	e042      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a17      	ldr	r2, [pc, #92]	; (8004f3c <UART_SetConfig+0x2ec>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d13a      	bne.n	8004f58 <UART_SetConfig+0x308>
 8004ee2:	4b18      	ldr	r3, [pc, #96]	; (8004f44 <UART_SetConfig+0x2f4>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef0:	d014      	beq.n	8004f1c <UART_SetConfig+0x2cc>
 8004ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef6:	d802      	bhi.n	8004efe <UART_SetConfig+0x2ae>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d007      	beq.n	8004f0c <UART_SetConfig+0x2bc>
 8004efc:	e016      	b.n	8004f2c <UART_SetConfig+0x2dc>
 8004efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f02:	d007      	beq.n	8004f14 <UART_SetConfig+0x2c4>
 8004f04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f08:	d00c      	beq.n	8004f24 <UART_SetConfig+0x2d4>
 8004f0a:	e00f      	b.n	8004f2c <UART_SetConfig+0x2dc>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f12:	e024      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004f14:	2302      	movs	r3, #2
 8004f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f1a:	e020      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f22:	e01c      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004f24:	2308      	movs	r3, #8
 8004f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f2a:	e018      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f32:	bf00      	nop
 8004f34:	e013      	b.n	8004f5e <UART_SetConfig+0x30e>
 8004f36:	bf00      	nop
 8004f38:	cfff69f3 	.word	0xcfff69f3
 8004f3c:	40008000 	.word	0x40008000
 8004f40:	40013800 	.word	0x40013800
 8004f44:	40021000 	.word	0x40021000
 8004f48:	40004400 	.word	0x40004400
 8004f4c:	40004800 	.word	0x40004800
 8004f50:	40004c00 	.word	0x40004c00
 8004f54:	40005000 	.word	0x40005000
 8004f58:	2310      	movs	r3, #16
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a86      	ldr	r2, [pc, #536]	; (800517c <UART_SetConfig+0x52c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	f040 8422 	bne.w	80057ae <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	f200 8173 	bhi.w	800525a <UART_SetConfig+0x60a>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0x32c>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	0800525b 	.word	0x0800525b
 8004f84:	08005043 	.word	0x08005043
 8004f88:	0800525b 	.word	0x0800525b
 8004f8c:	080050db 	.word	0x080050db
 8004f90:	0800525b 	.word	0x0800525b
 8004f94:	0800525b 	.word	0x0800525b
 8004f98:	0800525b 	.word	0x0800525b
 8004f9c:	080051ad 	.word	0x080051ad
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004fa0:	f7fe ffc2 	bl	8003f28 <HAL_RCC_GetPCLK1Freq>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d044      	beq.n	8005038 <UART_SetConfig+0x3e8>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d03e      	beq.n	8005034 <UART_SetConfig+0x3e4>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d038      	beq.n	8005030 <UART_SetConfig+0x3e0>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d032      	beq.n	800502c <UART_SetConfig+0x3dc>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d02c      	beq.n	8005028 <UART_SetConfig+0x3d8>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	2b05      	cmp	r3, #5
 8004fd4:	d026      	beq.n	8005024 <UART_SetConfig+0x3d4>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	2b06      	cmp	r3, #6
 8004fdc:	d020      	beq.n	8005020 <UART_SetConfig+0x3d0>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2b07      	cmp	r3, #7
 8004fe4:	d01a      	beq.n	800501c <UART_SetConfig+0x3cc>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d014      	beq.n	8005018 <UART_SetConfig+0x3c8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	2b09      	cmp	r3, #9
 8004ff4:	d00e      	beq.n	8005014 <UART_SetConfig+0x3c4>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	2b0a      	cmp	r3, #10
 8004ffc:	d008      	beq.n	8005010 <UART_SetConfig+0x3c0>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	2b0b      	cmp	r3, #11
 8005004:	d102      	bne.n	800500c <UART_SetConfig+0x3bc>
 8005006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800500a:	e016      	b.n	800503a <UART_SetConfig+0x3ea>
 800500c:	2301      	movs	r3, #1
 800500e:	e014      	b.n	800503a <UART_SetConfig+0x3ea>
 8005010:	2380      	movs	r3, #128	; 0x80
 8005012:	e012      	b.n	800503a <UART_SetConfig+0x3ea>
 8005014:	2340      	movs	r3, #64	; 0x40
 8005016:	e010      	b.n	800503a <UART_SetConfig+0x3ea>
 8005018:	2320      	movs	r3, #32
 800501a:	e00e      	b.n	800503a <UART_SetConfig+0x3ea>
 800501c:	2310      	movs	r3, #16
 800501e:	e00c      	b.n	800503a <UART_SetConfig+0x3ea>
 8005020:	230c      	movs	r3, #12
 8005022:	e00a      	b.n	800503a <UART_SetConfig+0x3ea>
 8005024:	230a      	movs	r3, #10
 8005026:	e008      	b.n	800503a <UART_SetConfig+0x3ea>
 8005028:	2308      	movs	r3, #8
 800502a:	e006      	b.n	800503a <UART_SetConfig+0x3ea>
 800502c:	2306      	movs	r3, #6
 800502e:	e004      	b.n	800503a <UART_SetConfig+0x3ea>
 8005030:	2304      	movs	r3, #4
 8005032:	e002      	b.n	800503a <UART_SetConfig+0x3ea>
 8005034:	2302      	movs	r3, #2
 8005036:	e000      	b.n	800503a <UART_SetConfig+0x3ea>
 8005038:	2301      	movs	r3, #1
 800503a:	fbb2 f3f3 	udiv	r3, r2, r3
 800503e:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8005040:	e10e      	b.n	8005260 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	2b00      	cmp	r3, #0
 8005048:	d044      	beq.n	80050d4 <UART_SetConfig+0x484>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	2b01      	cmp	r3, #1
 8005050:	d03e      	beq.n	80050d0 <UART_SetConfig+0x480>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	2b02      	cmp	r3, #2
 8005058:	d038      	beq.n	80050cc <UART_SetConfig+0x47c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	2b03      	cmp	r3, #3
 8005060:	d032      	beq.n	80050c8 <UART_SetConfig+0x478>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	2b04      	cmp	r3, #4
 8005068:	d02c      	beq.n	80050c4 <UART_SetConfig+0x474>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	2b05      	cmp	r3, #5
 8005070:	d026      	beq.n	80050c0 <UART_SetConfig+0x470>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	2b06      	cmp	r3, #6
 8005078:	d020      	beq.n	80050bc <UART_SetConfig+0x46c>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	2b07      	cmp	r3, #7
 8005080:	d01a      	beq.n	80050b8 <UART_SetConfig+0x468>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	2b08      	cmp	r3, #8
 8005088:	d014      	beq.n	80050b4 <UART_SetConfig+0x464>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	2b09      	cmp	r3, #9
 8005090:	d00e      	beq.n	80050b0 <UART_SetConfig+0x460>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	2b0a      	cmp	r3, #10
 8005098:	d008      	beq.n	80050ac <UART_SetConfig+0x45c>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	2b0b      	cmp	r3, #11
 80050a0:	d102      	bne.n	80050a8 <UART_SetConfig+0x458>
 80050a2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80050a6:	e016      	b.n	80050d6 <UART_SetConfig+0x486>
 80050a8:	4b35      	ldr	r3, [pc, #212]	; (8005180 <UART_SetConfig+0x530>)
 80050aa:	e014      	b.n	80050d6 <UART_SetConfig+0x486>
 80050ac:	4b35      	ldr	r3, [pc, #212]	; (8005184 <UART_SetConfig+0x534>)
 80050ae:	e012      	b.n	80050d6 <UART_SetConfig+0x486>
 80050b0:	4b35      	ldr	r3, [pc, #212]	; (8005188 <UART_SetConfig+0x538>)
 80050b2:	e010      	b.n	80050d6 <UART_SetConfig+0x486>
 80050b4:	4b35      	ldr	r3, [pc, #212]	; (800518c <UART_SetConfig+0x53c>)
 80050b6:	e00e      	b.n	80050d6 <UART_SetConfig+0x486>
 80050b8:	4b35      	ldr	r3, [pc, #212]	; (8005190 <UART_SetConfig+0x540>)
 80050ba:	e00c      	b.n	80050d6 <UART_SetConfig+0x486>
 80050bc:	4b35      	ldr	r3, [pc, #212]	; (8005194 <UART_SetConfig+0x544>)
 80050be:	e00a      	b.n	80050d6 <UART_SetConfig+0x486>
 80050c0:	4b35      	ldr	r3, [pc, #212]	; (8005198 <UART_SetConfig+0x548>)
 80050c2:	e008      	b.n	80050d6 <UART_SetConfig+0x486>
 80050c4:	4b35      	ldr	r3, [pc, #212]	; (800519c <UART_SetConfig+0x54c>)
 80050c6:	e006      	b.n	80050d6 <UART_SetConfig+0x486>
 80050c8:	4b35      	ldr	r3, [pc, #212]	; (80051a0 <UART_SetConfig+0x550>)
 80050ca:	e004      	b.n	80050d6 <UART_SetConfig+0x486>
 80050cc:	4b35      	ldr	r3, [pc, #212]	; (80051a4 <UART_SetConfig+0x554>)
 80050ce:	e002      	b.n	80050d6 <UART_SetConfig+0x486>
 80050d0:	4b35      	ldr	r3, [pc, #212]	; (80051a8 <UART_SetConfig+0x558>)
 80050d2:	e000      	b.n	80050d6 <UART_SetConfig+0x486>
 80050d4:	4b2a      	ldr	r3, [pc, #168]	; (8005180 <UART_SetConfig+0x530>)
 80050d6:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 80050d8:	e0c2      	b.n	8005260 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80050da:	f7fe fe8f 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 80050de:	4602      	mov	r2, r0
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d044      	beq.n	8005172 <UART_SetConfig+0x522>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d03e      	beq.n	800516e <UART_SetConfig+0x51e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d038      	beq.n	800516a <UART_SetConfig+0x51a>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d032      	beq.n	8005166 <UART_SetConfig+0x516>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	2b04      	cmp	r3, #4
 8005106:	d02c      	beq.n	8005162 <UART_SetConfig+0x512>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	2b05      	cmp	r3, #5
 800510e:	d026      	beq.n	800515e <UART_SetConfig+0x50e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	2b06      	cmp	r3, #6
 8005116:	d020      	beq.n	800515a <UART_SetConfig+0x50a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	2b07      	cmp	r3, #7
 800511e:	d01a      	beq.n	8005156 <UART_SetConfig+0x506>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	2b08      	cmp	r3, #8
 8005126:	d014      	beq.n	8005152 <UART_SetConfig+0x502>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	2b09      	cmp	r3, #9
 800512e:	d00e      	beq.n	800514e <UART_SetConfig+0x4fe>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	2b0a      	cmp	r3, #10
 8005136:	d008      	beq.n	800514a <UART_SetConfig+0x4fa>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	2b0b      	cmp	r3, #11
 800513e:	d102      	bne.n	8005146 <UART_SetConfig+0x4f6>
 8005140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005144:	e016      	b.n	8005174 <UART_SetConfig+0x524>
 8005146:	2301      	movs	r3, #1
 8005148:	e014      	b.n	8005174 <UART_SetConfig+0x524>
 800514a:	2380      	movs	r3, #128	; 0x80
 800514c:	e012      	b.n	8005174 <UART_SetConfig+0x524>
 800514e:	2340      	movs	r3, #64	; 0x40
 8005150:	e010      	b.n	8005174 <UART_SetConfig+0x524>
 8005152:	2320      	movs	r3, #32
 8005154:	e00e      	b.n	8005174 <UART_SetConfig+0x524>
 8005156:	2310      	movs	r3, #16
 8005158:	e00c      	b.n	8005174 <UART_SetConfig+0x524>
 800515a:	230c      	movs	r3, #12
 800515c:	e00a      	b.n	8005174 <UART_SetConfig+0x524>
 800515e:	230a      	movs	r3, #10
 8005160:	e008      	b.n	8005174 <UART_SetConfig+0x524>
 8005162:	2308      	movs	r3, #8
 8005164:	e006      	b.n	8005174 <UART_SetConfig+0x524>
 8005166:	2306      	movs	r3, #6
 8005168:	e004      	b.n	8005174 <UART_SetConfig+0x524>
 800516a:	2304      	movs	r3, #4
 800516c:	e002      	b.n	8005174 <UART_SetConfig+0x524>
 800516e:	2302      	movs	r3, #2
 8005170:	e000      	b.n	8005174 <UART_SetConfig+0x524>
 8005172:	2301      	movs	r3, #1
 8005174:	fbb2 f3f3 	udiv	r3, r2, r3
 8005178:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 800517a:	e071      	b.n	8005260 <UART_SetConfig+0x610>
 800517c:	40008000 	.word	0x40008000
 8005180:	00f42400 	.word	0x00f42400
 8005184:	0001e848 	.word	0x0001e848
 8005188:	0003d090 	.word	0x0003d090
 800518c:	0007a120 	.word	0x0007a120
 8005190:	000f4240 	.word	0x000f4240
 8005194:	00145855 	.word	0x00145855
 8005198:	00186a00 	.word	0x00186a00
 800519c:	001e8480 	.word	0x001e8480
 80051a0:	0028b0aa 	.word	0x0028b0aa
 80051a4:	003d0900 	.word	0x003d0900
 80051a8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d04e      	beq.n	8005252 <UART_SetConfig+0x602>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d047      	beq.n	800524c <UART_SetConfig+0x5fc>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d040      	beq.n	8005246 <UART_SetConfig+0x5f6>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d039      	beq.n	8005240 <UART_SetConfig+0x5f0>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d032      	beq.n	800523a <UART_SetConfig+0x5ea>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	2b05      	cmp	r3, #5
 80051da:	d02b      	beq.n	8005234 <UART_SetConfig+0x5e4>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	2b06      	cmp	r3, #6
 80051e2:	d024      	beq.n	800522e <UART_SetConfig+0x5de>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	2b07      	cmp	r3, #7
 80051ea:	d01d      	beq.n	8005228 <UART_SetConfig+0x5d8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d016      	beq.n	8005222 <UART_SetConfig+0x5d2>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	2b09      	cmp	r3, #9
 80051fa:	d00f      	beq.n	800521c <UART_SetConfig+0x5cc>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	2b0a      	cmp	r3, #10
 8005202:	d008      	beq.n	8005216 <UART_SetConfig+0x5c6>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	2b0b      	cmp	r3, #11
 800520a:	d101      	bne.n	8005210 <UART_SetConfig+0x5c0>
 800520c:	2380      	movs	r3, #128	; 0x80
 800520e:	e022      	b.n	8005256 <UART_SetConfig+0x606>
 8005210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005214:	e01f      	b.n	8005256 <UART_SetConfig+0x606>
 8005216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800521a:	e01c      	b.n	8005256 <UART_SetConfig+0x606>
 800521c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005220:	e019      	b.n	8005256 <UART_SetConfig+0x606>
 8005222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005226:	e016      	b.n	8005256 <UART_SetConfig+0x606>
 8005228:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800522c:	e013      	b.n	8005256 <UART_SetConfig+0x606>
 800522e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005232:	e010      	b.n	8005256 <UART_SetConfig+0x606>
 8005234:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005238:	e00d      	b.n	8005256 <UART_SetConfig+0x606>
 800523a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800523e:	e00a      	b.n	8005256 <UART_SetConfig+0x606>
 8005240:	f241 5355 	movw	r3, #5461	; 0x1555
 8005244:	e007      	b.n	8005256 <UART_SetConfig+0x606>
 8005246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800524a:	e004      	b.n	8005256 <UART_SetConfig+0x606>
 800524c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005250:	e001      	b.n	8005256 <UART_SetConfig+0x606>
 8005252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005256:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8005258:	e002      	b.n	8005260 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	76fb      	strb	r3, [r7, #27]
        break;
 800525e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 86b7 	beq.w	8005fd6 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	4613      	mov	r3, r2
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	4413      	add	r3, r2
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	429a      	cmp	r2, r3
 8005276:	d305      	bcc.n	8005284 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	429a      	cmp	r2, r3
 8005282:	d903      	bls.n	800528c <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	76fb      	strb	r3, [r7, #27]
 8005288:	f000 bea5 	b.w	8005fd6 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 800528c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005290:	2b08      	cmp	r3, #8
 8005292:	f200 8277 	bhi.w	8005784 <UART_SetConfig+0xb34>
 8005296:	a201      	add	r2, pc, #4	; (adr r2, 800529c <UART_SetConfig+0x64c>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	08005785 	.word	0x08005785
 80052a4:	080053ff 	.word	0x080053ff
 80052a8:	08005785 	.word	0x08005785
 80052ac:	080054f5 	.word	0x080054f5
 80052b0:	08005785 	.word	0x08005785
 80052b4:	08005785 	.word	0x08005785
 80052b8:	08005785 	.word	0x08005785
 80052bc:	08005633 	.word	0x08005633
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80052c0:	f7fe fe32 	bl	8003f28 <HAL_RCC_GetPCLK1Freq>
 80052c4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f04f 0100 	mov.w	r1, #0
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d067      	beq.n	80053a6 <UART_SetConfig+0x756>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d05e      	beq.n	800539c <UART_SetConfig+0x74c>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d055      	beq.n	8005392 <UART_SetConfig+0x742>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d04c      	beq.n	8005388 <UART_SetConfig+0x738>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d043      	beq.n	800537e <UART_SetConfig+0x72e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d03a      	beq.n	8005374 <UART_SetConfig+0x724>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	2b06      	cmp	r3, #6
 8005304:	d031      	beq.n	800536a <UART_SetConfig+0x71a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	2b07      	cmp	r3, #7
 800530c:	d028      	beq.n	8005360 <UART_SetConfig+0x710>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	2b08      	cmp	r3, #8
 8005314:	d01f      	beq.n	8005356 <UART_SetConfig+0x706>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	2b09      	cmp	r3, #9
 800531c:	d016      	beq.n	800534c <UART_SetConfig+0x6fc>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b0a      	cmp	r3, #10
 8005324:	d00d      	beq.n	8005342 <UART_SetConfig+0x6f2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	2b0b      	cmp	r3, #11
 800532c:	d104      	bne.n	8005338 <UART_SetConfig+0x6e8>
 800532e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005332:	f04f 0400 	mov.w	r4, #0
 8005336:	e03a      	b.n	80053ae <UART_SetConfig+0x75e>
 8005338:	f04f 0301 	mov.w	r3, #1
 800533c:	f04f 0400 	mov.w	r4, #0
 8005340:	e035      	b.n	80053ae <UART_SetConfig+0x75e>
 8005342:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005346:	f04f 0400 	mov.w	r4, #0
 800534a:	e030      	b.n	80053ae <UART_SetConfig+0x75e>
 800534c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005350:	f04f 0400 	mov.w	r4, #0
 8005354:	e02b      	b.n	80053ae <UART_SetConfig+0x75e>
 8005356:	f04f 0320 	mov.w	r3, #32
 800535a:	f04f 0400 	mov.w	r4, #0
 800535e:	e026      	b.n	80053ae <UART_SetConfig+0x75e>
 8005360:	f04f 0310 	mov.w	r3, #16
 8005364:	f04f 0400 	mov.w	r4, #0
 8005368:	e021      	b.n	80053ae <UART_SetConfig+0x75e>
 800536a:	f04f 030c 	mov.w	r3, #12
 800536e:	f04f 0400 	mov.w	r4, #0
 8005372:	e01c      	b.n	80053ae <UART_SetConfig+0x75e>
 8005374:	f04f 030a 	mov.w	r3, #10
 8005378:	f04f 0400 	mov.w	r4, #0
 800537c:	e017      	b.n	80053ae <UART_SetConfig+0x75e>
 800537e:	f04f 0308 	mov.w	r3, #8
 8005382:	f04f 0400 	mov.w	r4, #0
 8005386:	e012      	b.n	80053ae <UART_SetConfig+0x75e>
 8005388:	f04f 0306 	mov.w	r3, #6
 800538c:	f04f 0400 	mov.w	r4, #0
 8005390:	e00d      	b.n	80053ae <UART_SetConfig+0x75e>
 8005392:	f04f 0304 	mov.w	r3, #4
 8005396:	f04f 0400 	mov.w	r4, #0
 800539a:	e008      	b.n	80053ae <UART_SetConfig+0x75e>
 800539c:	f04f 0302 	mov.w	r3, #2
 80053a0:	f04f 0400 	mov.w	r4, #0
 80053a4:	e003      	b.n	80053ae <UART_SetConfig+0x75e>
 80053a6:	f04f 0301 	mov.w	r3, #1
 80053aa:	f04f 0400 	mov.w	r4, #0
 80053ae:	461a      	mov	r2, r3
 80053b0:	4623      	mov	r3, r4
 80053b2:	f7fb fbe1 	bl	8000b78 <__aeabi_uldivmod>
 80053b6:	4603      	mov	r3, r0
 80053b8:	460c      	mov	r4, r1
 80053ba:	4619      	mov	r1, r3
 80053bc:	4622      	mov	r2, r4
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	f04f 0400 	mov.w	r4, #0
 80053c6:	0214      	lsls	r4, r2, #8
 80053c8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80053cc:	020b      	lsls	r3, r1, #8
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6852      	ldr	r2, [r2, #4]
 80053d2:	0852      	lsrs	r2, r2, #1
 80053d4:	4611      	mov	r1, r2
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	eb13 0b01 	adds.w	fp, r3, r1
 80053de:	eb44 0c02 	adc.w	ip, r4, r2
 80053e2:	4658      	mov	r0, fp
 80053e4:	4661      	mov	r1, ip
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f04f 0400 	mov.w	r4, #0
 80053ee:	461a      	mov	r2, r3
 80053f0:	4623      	mov	r3, r4
 80053f2:	f7fb fbc1 	bl	8000b78 <__aeabi_uldivmod>
 80053f6:	4603      	mov	r3, r0
 80053f8:	460c      	mov	r4, r1
 80053fa:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80053fc:	e1c5      	b.n	800578a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	2b00      	cmp	r3, #0
 8005404:	d05b      	beq.n	80054be <UART_SetConfig+0x86e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	2b01      	cmp	r3, #1
 800540c:	d053      	beq.n	80054b6 <UART_SetConfig+0x866>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	2b02      	cmp	r3, #2
 8005414:	d04b      	beq.n	80054ae <UART_SetConfig+0x85e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	2b03      	cmp	r3, #3
 800541c:	d043      	beq.n	80054a6 <UART_SetConfig+0x856>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	2b04      	cmp	r3, #4
 8005424:	d03b      	beq.n	800549e <UART_SetConfig+0x84e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	2b05      	cmp	r3, #5
 800542c:	d033      	beq.n	8005496 <UART_SetConfig+0x846>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	2b06      	cmp	r3, #6
 8005434:	d02b      	beq.n	800548e <UART_SetConfig+0x83e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	2b07      	cmp	r3, #7
 800543c:	d023      	beq.n	8005486 <UART_SetConfig+0x836>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	2b08      	cmp	r3, #8
 8005444:	d01b      	beq.n	800547e <UART_SetConfig+0x82e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	2b09      	cmp	r3, #9
 800544c:	d013      	beq.n	8005476 <UART_SetConfig+0x826>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	2b0a      	cmp	r3, #10
 8005454:	d00b      	beq.n	800546e <UART_SetConfig+0x81e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	2b0b      	cmp	r3, #11
 800545c:	d103      	bne.n	8005466 <UART_SetConfig+0x816>
 800545e:	4bae      	ldr	r3, [pc, #696]	; (8005718 <UART_SetConfig+0xac8>)
 8005460:	f04f 0400 	mov.w	r4, #0
 8005464:	e02e      	b.n	80054c4 <UART_SetConfig+0x874>
 8005466:	4bad      	ldr	r3, [pc, #692]	; (800571c <UART_SetConfig+0xacc>)
 8005468:	f04f 0400 	mov.w	r4, #0
 800546c:	e02a      	b.n	80054c4 <UART_SetConfig+0x874>
 800546e:	4bac      	ldr	r3, [pc, #688]	; (8005720 <UART_SetConfig+0xad0>)
 8005470:	f04f 0400 	mov.w	r4, #0
 8005474:	e026      	b.n	80054c4 <UART_SetConfig+0x874>
 8005476:	4bab      	ldr	r3, [pc, #684]	; (8005724 <UART_SetConfig+0xad4>)
 8005478:	f04f 0400 	mov.w	r4, #0
 800547c:	e022      	b.n	80054c4 <UART_SetConfig+0x874>
 800547e:	4baa      	ldr	r3, [pc, #680]	; (8005728 <UART_SetConfig+0xad8>)
 8005480:	f04f 0400 	mov.w	r4, #0
 8005484:	e01e      	b.n	80054c4 <UART_SetConfig+0x874>
 8005486:	4ba9      	ldr	r3, [pc, #676]	; (800572c <UART_SetConfig+0xadc>)
 8005488:	f04f 0400 	mov.w	r4, #0
 800548c:	e01a      	b.n	80054c4 <UART_SetConfig+0x874>
 800548e:	a49e      	add	r4, pc, #632	; (adr r4, 8005708 <UART_SetConfig+0xab8>)
 8005490:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005494:	e016      	b.n	80054c4 <UART_SetConfig+0x874>
 8005496:	4ba6      	ldr	r3, [pc, #664]	; (8005730 <UART_SetConfig+0xae0>)
 8005498:	f04f 0400 	mov.w	r4, #0
 800549c:	e012      	b.n	80054c4 <UART_SetConfig+0x874>
 800549e:	4ba5      	ldr	r3, [pc, #660]	; (8005734 <UART_SetConfig+0xae4>)
 80054a0:	f04f 0400 	mov.w	r4, #0
 80054a4:	e00e      	b.n	80054c4 <UART_SetConfig+0x874>
 80054a6:	a49a      	add	r4, pc, #616	; (adr r4, 8005710 <UART_SetConfig+0xac0>)
 80054a8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80054ac:	e00a      	b.n	80054c4 <UART_SetConfig+0x874>
 80054ae:	4ba2      	ldr	r3, [pc, #648]	; (8005738 <UART_SetConfig+0xae8>)
 80054b0:	f04f 0400 	mov.w	r4, #0
 80054b4:	e006      	b.n	80054c4 <UART_SetConfig+0x874>
 80054b6:	4ba1      	ldr	r3, [pc, #644]	; (800573c <UART_SetConfig+0xaec>)
 80054b8:	f04f 0400 	mov.w	r4, #0
 80054bc:	e002      	b.n	80054c4 <UART_SetConfig+0x874>
 80054be:	4b97      	ldr	r3, [pc, #604]	; (800571c <UART_SetConfig+0xacc>)
 80054c0:	f04f 0400 	mov.w	r4, #0
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6852      	ldr	r2, [r2, #4]
 80054c8:	0852      	lsrs	r2, r2, #1
 80054ca:	4611      	mov	r1, r2
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	eb13 0b01 	adds.w	fp, r3, r1
 80054d4:	eb44 0c02 	adc.w	ip, r4, r2
 80054d8:	4658      	mov	r0, fp
 80054da:	4661      	mov	r1, ip
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f04f 0400 	mov.w	r4, #0
 80054e4:	461a      	mov	r2, r3
 80054e6:	4623      	mov	r3, r4
 80054e8:	f7fb fb46 	bl	8000b78 <__aeabi_uldivmod>
 80054ec:	4603      	mov	r3, r0
 80054ee:	460c      	mov	r4, r1
 80054f0:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80054f2:	e14a      	b.n	800578a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80054f4:	f7fe fc82 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 80054f8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f04f 0100 	mov.w	r1, #0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	2b00      	cmp	r3, #0
 8005508:	d067      	beq.n	80055da <UART_SetConfig+0x98a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	2b01      	cmp	r3, #1
 8005510:	d05e      	beq.n	80055d0 <UART_SetConfig+0x980>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	2b02      	cmp	r3, #2
 8005518:	d055      	beq.n	80055c6 <UART_SetConfig+0x976>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	2b03      	cmp	r3, #3
 8005520:	d04c      	beq.n	80055bc <UART_SetConfig+0x96c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	2b04      	cmp	r3, #4
 8005528:	d043      	beq.n	80055b2 <UART_SetConfig+0x962>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	2b05      	cmp	r3, #5
 8005530:	d03a      	beq.n	80055a8 <UART_SetConfig+0x958>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	2b06      	cmp	r3, #6
 8005538:	d031      	beq.n	800559e <UART_SetConfig+0x94e>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	2b07      	cmp	r3, #7
 8005540:	d028      	beq.n	8005594 <UART_SetConfig+0x944>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	2b08      	cmp	r3, #8
 8005548:	d01f      	beq.n	800558a <UART_SetConfig+0x93a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	2b09      	cmp	r3, #9
 8005550:	d016      	beq.n	8005580 <UART_SetConfig+0x930>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	2b0a      	cmp	r3, #10
 8005558:	d00d      	beq.n	8005576 <UART_SetConfig+0x926>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	2b0b      	cmp	r3, #11
 8005560:	d104      	bne.n	800556c <UART_SetConfig+0x91c>
 8005562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005566:	f04f 0400 	mov.w	r4, #0
 800556a:	e03a      	b.n	80055e2 <UART_SetConfig+0x992>
 800556c:	f04f 0301 	mov.w	r3, #1
 8005570:	f04f 0400 	mov.w	r4, #0
 8005574:	e035      	b.n	80055e2 <UART_SetConfig+0x992>
 8005576:	f04f 0380 	mov.w	r3, #128	; 0x80
 800557a:	f04f 0400 	mov.w	r4, #0
 800557e:	e030      	b.n	80055e2 <UART_SetConfig+0x992>
 8005580:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005584:	f04f 0400 	mov.w	r4, #0
 8005588:	e02b      	b.n	80055e2 <UART_SetConfig+0x992>
 800558a:	f04f 0320 	mov.w	r3, #32
 800558e:	f04f 0400 	mov.w	r4, #0
 8005592:	e026      	b.n	80055e2 <UART_SetConfig+0x992>
 8005594:	f04f 0310 	mov.w	r3, #16
 8005598:	f04f 0400 	mov.w	r4, #0
 800559c:	e021      	b.n	80055e2 <UART_SetConfig+0x992>
 800559e:	f04f 030c 	mov.w	r3, #12
 80055a2:	f04f 0400 	mov.w	r4, #0
 80055a6:	e01c      	b.n	80055e2 <UART_SetConfig+0x992>
 80055a8:	f04f 030a 	mov.w	r3, #10
 80055ac:	f04f 0400 	mov.w	r4, #0
 80055b0:	e017      	b.n	80055e2 <UART_SetConfig+0x992>
 80055b2:	f04f 0308 	mov.w	r3, #8
 80055b6:	f04f 0400 	mov.w	r4, #0
 80055ba:	e012      	b.n	80055e2 <UART_SetConfig+0x992>
 80055bc:	f04f 0306 	mov.w	r3, #6
 80055c0:	f04f 0400 	mov.w	r4, #0
 80055c4:	e00d      	b.n	80055e2 <UART_SetConfig+0x992>
 80055c6:	f04f 0304 	mov.w	r3, #4
 80055ca:	f04f 0400 	mov.w	r4, #0
 80055ce:	e008      	b.n	80055e2 <UART_SetConfig+0x992>
 80055d0:	f04f 0302 	mov.w	r3, #2
 80055d4:	f04f 0400 	mov.w	r4, #0
 80055d8:	e003      	b.n	80055e2 <UART_SetConfig+0x992>
 80055da:	f04f 0301 	mov.w	r3, #1
 80055de:	f04f 0400 	mov.w	r4, #0
 80055e2:	461a      	mov	r2, r3
 80055e4:	4623      	mov	r3, r4
 80055e6:	f7fb fac7 	bl	8000b78 <__aeabi_uldivmod>
 80055ea:	4603      	mov	r3, r0
 80055ec:	460c      	mov	r4, r1
 80055ee:	4619      	mov	r1, r3
 80055f0:	4622      	mov	r2, r4
 80055f2:	f04f 0300 	mov.w	r3, #0
 80055f6:	f04f 0400 	mov.w	r4, #0
 80055fa:	0214      	lsls	r4, r2, #8
 80055fc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005600:	020b      	lsls	r3, r1, #8
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6852      	ldr	r2, [r2, #4]
 8005606:	0852      	lsrs	r2, r2, #1
 8005608:	4611      	mov	r1, r2
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	eb13 0b01 	adds.w	fp, r3, r1
 8005612:	eb44 0c02 	adc.w	ip, r4, r2
 8005616:	4658      	mov	r0, fp
 8005618:	4661      	mov	r1, ip
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f04f 0400 	mov.w	r4, #0
 8005622:	461a      	mov	r2, r3
 8005624:	4623      	mov	r3, r4
 8005626:	f7fb faa7 	bl	8000b78 <__aeabi_uldivmod>
 800562a:	4603      	mov	r3, r0
 800562c:	460c      	mov	r4, r1
 800562e:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005630:	e0ab      	b.n	800578a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 8088 	beq.w	800574c <UART_SetConfig+0xafc>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	2b01      	cmp	r3, #1
 8005642:	d05b      	beq.n	80056fc <UART_SetConfig+0xaac>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	2b02      	cmp	r3, #2
 800564a:	d052      	beq.n	80056f2 <UART_SetConfig+0xaa2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	2b03      	cmp	r3, #3
 8005652:	d04a      	beq.n	80056ea <UART_SetConfig+0xa9a>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	2b04      	cmp	r3, #4
 800565a:	d041      	beq.n	80056e0 <UART_SetConfig+0xa90>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	2b05      	cmp	r3, #5
 8005662:	d039      	beq.n	80056d8 <UART_SetConfig+0xa88>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	2b06      	cmp	r3, #6
 800566a:	d031      	beq.n	80056d0 <UART_SetConfig+0xa80>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	2b07      	cmp	r3, #7
 8005672:	d028      	beq.n	80056c6 <UART_SetConfig+0xa76>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	2b08      	cmp	r3, #8
 800567a:	d01f      	beq.n	80056bc <UART_SetConfig+0xa6c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	2b09      	cmp	r3, #9
 8005682:	d016      	beq.n	80056b2 <UART_SetConfig+0xa62>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	2b0a      	cmp	r3, #10
 800568a:	d00d      	beq.n	80056a8 <UART_SetConfig+0xa58>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	2b0b      	cmp	r3, #11
 8005692:	d104      	bne.n	800569e <UART_SetConfig+0xa4e>
 8005694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005698:	f04f 0400 	mov.w	r4, #0
 800569c:	e05a      	b.n	8005754 <UART_SetConfig+0xb04>
 800569e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80056a2:	f04f 0400 	mov.w	r4, #0
 80056a6:	e055      	b.n	8005754 <UART_SetConfig+0xb04>
 80056a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056ac:	f04f 0400 	mov.w	r4, #0
 80056b0:	e050      	b.n	8005754 <UART_SetConfig+0xb04>
 80056b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056b6:	f04f 0400 	mov.w	r4, #0
 80056ba:	e04b      	b.n	8005754 <UART_SetConfig+0xb04>
 80056bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80056c0:	f04f 0400 	mov.w	r4, #0
 80056c4:	e046      	b.n	8005754 <UART_SetConfig+0xb04>
 80056c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80056ca:	f04f 0400 	mov.w	r4, #0
 80056ce:	e041      	b.n	8005754 <UART_SetConfig+0xb04>
 80056d0:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <UART_SetConfig+0xaf0>)
 80056d2:	f04f 0400 	mov.w	r4, #0
 80056d6:	e03d      	b.n	8005754 <UART_SetConfig+0xb04>
 80056d8:	4b1a      	ldr	r3, [pc, #104]	; (8005744 <UART_SetConfig+0xaf4>)
 80056da:	f04f 0400 	mov.w	r4, #0
 80056de:	e039      	b.n	8005754 <UART_SetConfig+0xb04>
 80056e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80056e4:	f04f 0400 	mov.w	r4, #0
 80056e8:	e034      	b.n	8005754 <UART_SetConfig+0xb04>
 80056ea:	4b17      	ldr	r3, [pc, #92]	; (8005748 <UART_SetConfig+0xaf8>)
 80056ec:	f04f 0400 	mov.w	r4, #0
 80056f0:	e030      	b.n	8005754 <UART_SetConfig+0xb04>
 80056f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80056f6:	f04f 0400 	mov.w	r4, #0
 80056fa:	e02b      	b.n	8005754 <UART_SetConfig+0xb04>
 80056fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005700:	f04f 0400 	mov.w	r4, #0
 8005704:	e026      	b.n	8005754 <UART_SetConfig+0xb04>
 8005706:	bf00      	nop
 8005708:	14585500 	.word	0x14585500
 800570c:	00000000 	.word	0x00000000
 8005710:	28b0aa00 	.word	0x28b0aa00
 8005714:	00000000 	.word	0x00000000
 8005718:	00f42400 	.word	0x00f42400
 800571c:	f4240000 	.word	0xf4240000
 8005720:	01e84800 	.word	0x01e84800
 8005724:	03d09000 	.word	0x03d09000
 8005728:	07a12000 	.word	0x07a12000
 800572c:	0f424000 	.word	0x0f424000
 8005730:	186a0000 	.word	0x186a0000
 8005734:	1e848000 	.word	0x1e848000
 8005738:	3d090000 	.word	0x3d090000
 800573c:	7a120000 	.word	0x7a120000
 8005740:	000aaa00 	.word	0x000aaa00
 8005744:	000ccc00 	.word	0x000ccc00
 8005748:	00155500 	.word	0x00155500
 800574c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005750:	f04f 0400 	mov.w	r4, #0
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6852      	ldr	r2, [r2, #4]
 8005758:	0852      	lsrs	r2, r2, #1
 800575a:	4611      	mov	r1, r2
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	eb13 0b01 	adds.w	fp, r3, r1
 8005764:	eb44 0c02 	adc.w	ip, r4, r2
 8005768:	4658      	mov	r0, fp
 800576a:	4661      	mov	r1, ip
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f04f 0400 	mov.w	r4, #0
 8005774:	461a      	mov	r2, r3
 8005776:	4623      	mov	r3, r4
 8005778:	f7fb f9fe 	bl	8000b78 <__aeabi_uldivmod>
 800577c:	4603      	mov	r3, r0
 800577e:	460c      	mov	r4, r1
 8005780:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005782:	e002      	b.n	800578a <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	76fb      	strb	r3, [r7, #27]
            break;
 8005788:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005790:	d309      	bcc.n	80057a6 <UART_SetConfig+0xb56>
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005798:	d205      	bcs.n	80057a6 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69fa      	ldr	r2, [r7, #28]
 80057a0:	60da      	str	r2, [r3, #12]
 80057a2:	f000 bc18 	b.w	8005fd6 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	76fb      	strb	r3, [r7, #27]
 80057aa:	f000 bc14 	b.w	8005fd6 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b6:	f040 8204 	bne.w	8005bc2 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 80057ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057be:	2b08      	cmp	r3, #8
 80057c0:	f200 81df 	bhi.w	8005b82 <UART_SetConfig+0xf32>
 80057c4:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <UART_SetConfig+0xb7c>)
 80057c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ca:	bf00      	nop
 80057cc:	080057f1 	.word	0x080057f1
 80057d0:	080058a9 	.word	0x080058a9
 80057d4:	08005961 	.word	0x08005961
 80057d8:	08005b83 	.word	0x08005b83
 80057dc:	08005a09 	.word	0x08005a09
 80057e0:	08005b83 	.word	0x08005b83
 80057e4:	08005b83 	.word	0x08005b83
 80057e8:	08005b83 	.word	0x08005b83
 80057ec:	08005ac1 	.word	0x08005ac1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f0:	f7fe fb9a 	bl	8003f28 <HAL_RCC_GetPCLK1Freq>
 80057f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d044      	beq.n	8005888 <UART_SetConfig+0xc38>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	2b01      	cmp	r3, #1
 8005804:	d03e      	beq.n	8005884 <UART_SetConfig+0xc34>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	2b02      	cmp	r3, #2
 800580c:	d038      	beq.n	8005880 <UART_SetConfig+0xc30>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	2b03      	cmp	r3, #3
 8005814:	d032      	beq.n	800587c <UART_SetConfig+0xc2c>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	2b04      	cmp	r3, #4
 800581c:	d02c      	beq.n	8005878 <UART_SetConfig+0xc28>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	2b05      	cmp	r3, #5
 8005824:	d026      	beq.n	8005874 <UART_SetConfig+0xc24>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b06      	cmp	r3, #6
 800582c:	d020      	beq.n	8005870 <UART_SetConfig+0xc20>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	2b07      	cmp	r3, #7
 8005834:	d01a      	beq.n	800586c <UART_SetConfig+0xc1c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2b08      	cmp	r3, #8
 800583c:	d014      	beq.n	8005868 <UART_SetConfig+0xc18>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b09      	cmp	r3, #9
 8005844:	d00e      	beq.n	8005864 <UART_SetConfig+0xc14>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	2b0a      	cmp	r3, #10
 800584c:	d008      	beq.n	8005860 <UART_SetConfig+0xc10>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	2b0b      	cmp	r3, #11
 8005854:	d102      	bne.n	800585c <UART_SetConfig+0xc0c>
 8005856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800585a:	e016      	b.n	800588a <UART_SetConfig+0xc3a>
 800585c:	2301      	movs	r3, #1
 800585e:	e014      	b.n	800588a <UART_SetConfig+0xc3a>
 8005860:	2380      	movs	r3, #128	; 0x80
 8005862:	e012      	b.n	800588a <UART_SetConfig+0xc3a>
 8005864:	2340      	movs	r3, #64	; 0x40
 8005866:	e010      	b.n	800588a <UART_SetConfig+0xc3a>
 8005868:	2320      	movs	r3, #32
 800586a:	e00e      	b.n	800588a <UART_SetConfig+0xc3a>
 800586c:	2310      	movs	r3, #16
 800586e:	e00c      	b.n	800588a <UART_SetConfig+0xc3a>
 8005870:	230c      	movs	r3, #12
 8005872:	e00a      	b.n	800588a <UART_SetConfig+0xc3a>
 8005874:	230a      	movs	r3, #10
 8005876:	e008      	b.n	800588a <UART_SetConfig+0xc3a>
 8005878:	2308      	movs	r3, #8
 800587a:	e006      	b.n	800588a <UART_SetConfig+0xc3a>
 800587c:	2306      	movs	r3, #6
 800587e:	e004      	b.n	800588a <UART_SetConfig+0xc3a>
 8005880:	2304      	movs	r3, #4
 8005882:	e002      	b.n	800588a <UART_SetConfig+0xc3a>
 8005884:	2302      	movs	r3, #2
 8005886:	e000      	b.n	800588a <UART_SetConfig+0xc3a>
 8005888:	2301      	movs	r3, #1
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005890:	005a      	lsls	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	441a      	add	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80058a6:	e16f      	b.n	8005b88 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058a8:	f7fe fb54 	bl	8003f54 <HAL_RCC_GetPCLK2Freq>
 80058ac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d044      	beq.n	8005940 <UART_SetConfig+0xcf0>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d03e      	beq.n	800593c <UART_SetConfig+0xcec>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d038      	beq.n	8005938 <UART_SetConfig+0xce8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d032      	beq.n	8005934 <UART_SetConfig+0xce4>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d02c      	beq.n	8005930 <UART_SetConfig+0xce0>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2b05      	cmp	r3, #5
 80058dc:	d026      	beq.n	800592c <UART_SetConfig+0xcdc>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	2b06      	cmp	r3, #6
 80058e4:	d020      	beq.n	8005928 <UART_SetConfig+0xcd8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	2b07      	cmp	r3, #7
 80058ec:	d01a      	beq.n	8005924 <UART_SetConfig+0xcd4>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d014      	beq.n	8005920 <UART_SetConfig+0xcd0>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	2b09      	cmp	r3, #9
 80058fc:	d00e      	beq.n	800591c <UART_SetConfig+0xccc>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	2b0a      	cmp	r3, #10
 8005904:	d008      	beq.n	8005918 <UART_SetConfig+0xcc8>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	2b0b      	cmp	r3, #11
 800590c:	d102      	bne.n	8005914 <UART_SetConfig+0xcc4>
 800590e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005912:	e016      	b.n	8005942 <UART_SetConfig+0xcf2>
 8005914:	2301      	movs	r3, #1
 8005916:	e014      	b.n	8005942 <UART_SetConfig+0xcf2>
 8005918:	2380      	movs	r3, #128	; 0x80
 800591a:	e012      	b.n	8005942 <UART_SetConfig+0xcf2>
 800591c:	2340      	movs	r3, #64	; 0x40
 800591e:	e010      	b.n	8005942 <UART_SetConfig+0xcf2>
 8005920:	2320      	movs	r3, #32
 8005922:	e00e      	b.n	8005942 <UART_SetConfig+0xcf2>
 8005924:	2310      	movs	r3, #16
 8005926:	e00c      	b.n	8005942 <UART_SetConfig+0xcf2>
 8005928:	230c      	movs	r3, #12
 800592a:	e00a      	b.n	8005942 <UART_SetConfig+0xcf2>
 800592c:	230a      	movs	r3, #10
 800592e:	e008      	b.n	8005942 <UART_SetConfig+0xcf2>
 8005930:	2308      	movs	r3, #8
 8005932:	e006      	b.n	8005942 <UART_SetConfig+0xcf2>
 8005934:	2306      	movs	r3, #6
 8005936:	e004      	b.n	8005942 <UART_SetConfig+0xcf2>
 8005938:	2304      	movs	r3, #4
 800593a:	e002      	b.n	8005942 <UART_SetConfig+0xcf2>
 800593c:	2302      	movs	r3, #2
 800593e:	e000      	b.n	8005942 <UART_SetConfig+0xcf2>
 8005940:	2301      	movs	r3, #1
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	fbb2 f3f3 	udiv	r3, r2, r3
 8005948:	005a      	lsls	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	085b      	lsrs	r3, r3, #1
 8005950:	441a      	add	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	fbb2 f3f3 	udiv	r3, r2, r3
 800595a:	b29b      	uxth	r3, r3
 800595c:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800595e:	e113      	b.n	8005b88 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	d043      	beq.n	80059f0 <UART_SetConfig+0xda0>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	2b01      	cmp	r3, #1
 800596e:	d03d      	beq.n	80059ec <UART_SetConfig+0xd9c>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	2b02      	cmp	r3, #2
 8005976:	d037      	beq.n	80059e8 <UART_SetConfig+0xd98>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	2b03      	cmp	r3, #3
 800597e:	d031      	beq.n	80059e4 <UART_SetConfig+0xd94>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	2b04      	cmp	r3, #4
 8005986:	d02b      	beq.n	80059e0 <UART_SetConfig+0xd90>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	2b05      	cmp	r3, #5
 800598e:	d025      	beq.n	80059dc <UART_SetConfig+0xd8c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	2b06      	cmp	r3, #6
 8005996:	d01f      	beq.n	80059d8 <UART_SetConfig+0xd88>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	2b07      	cmp	r3, #7
 800599e:	d019      	beq.n	80059d4 <UART_SetConfig+0xd84>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d013      	beq.n	80059d0 <UART_SetConfig+0xd80>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	2b09      	cmp	r3, #9
 80059ae:	d00d      	beq.n	80059cc <UART_SetConfig+0xd7c>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	2b0a      	cmp	r3, #10
 80059b6:	d007      	beq.n	80059c8 <UART_SetConfig+0xd78>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	2b0b      	cmp	r3, #11
 80059be:	d101      	bne.n	80059c4 <UART_SetConfig+0xd74>
 80059c0:	4b8d      	ldr	r3, [pc, #564]	; (8005bf8 <UART_SetConfig+0xfa8>)
 80059c2:	e016      	b.n	80059f2 <UART_SetConfig+0xda2>
 80059c4:	4b8d      	ldr	r3, [pc, #564]	; (8005bfc <UART_SetConfig+0xfac>)
 80059c6:	e014      	b.n	80059f2 <UART_SetConfig+0xda2>
 80059c8:	4b8d      	ldr	r3, [pc, #564]	; (8005c00 <UART_SetConfig+0xfb0>)
 80059ca:	e012      	b.n	80059f2 <UART_SetConfig+0xda2>
 80059cc:	4b8d      	ldr	r3, [pc, #564]	; (8005c04 <UART_SetConfig+0xfb4>)
 80059ce:	e010      	b.n	80059f2 <UART_SetConfig+0xda2>
 80059d0:	4b8d      	ldr	r3, [pc, #564]	; (8005c08 <UART_SetConfig+0xfb8>)
 80059d2:	e00e      	b.n	80059f2 <UART_SetConfig+0xda2>
 80059d4:	4b8d      	ldr	r3, [pc, #564]	; (8005c0c <UART_SetConfig+0xfbc>)
 80059d6:	e00c      	b.n	80059f2 <UART_SetConfig+0xda2>
 80059d8:	4b8d      	ldr	r3, [pc, #564]	; (8005c10 <UART_SetConfig+0xfc0>)
 80059da:	e00a      	b.n	80059f2 <UART_SetConfig+0xda2>
 80059dc:	4b8d      	ldr	r3, [pc, #564]	; (8005c14 <UART_SetConfig+0xfc4>)
 80059de:	e008      	b.n	80059f2 <UART_SetConfig+0xda2>
 80059e0:	4b8d      	ldr	r3, [pc, #564]	; (8005c18 <UART_SetConfig+0xfc8>)
 80059e2:	e006      	b.n	80059f2 <UART_SetConfig+0xda2>
 80059e4:	4b8d      	ldr	r3, [pc, #564]	; (8005c1c <UART_SetConfig+0xfcc>)
 80059e6:	e004      	b.n	80059f2 <UART_SetConfig+0xda2>
 80059e8:	4b8d      	ldr	r3, [pc, #564]	; (8005c20 <UART_SetConfig+0xfd0>)
 80059ea:	e002      	b.n	80059f2 <UART_SetConfig+0xda2>
 80059ec:	4b8d      	ldr	r3, [pc, #564]	; (8005c24 <UART_SetConfig+0xfd4>)
 80059ee:	e000      	b.n	80059f2 <UART_SetConfig+0xda2>
 80059f0:	4b82      	ldr	r3, [pc, #520]	; (8005bfc <UART_SetConfig+0xfac>)
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6852      	ldr	r2, [r2, #4]
 80059f6:	0852      	lsrs	r2, r2, #1
 80059f8:	441a      	add	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a06:	e0bf      	b.n	8005b88 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a08:	f7fe f9f8 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8005a0c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d044      	beq.n	8005aa0 <UART_SetConfig+0xe50>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d03e      	beq.n	8005a9c <UART_SetConfig+0xe4c>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d038      	beq.n	8005a98 <UART_SetConfig+0xe48>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d032      	beq.n	8005a94 <UART_SetConfig+0xe44>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d02c      	beq.n	8005a90 <UART_SetConfig+0xe40>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	2b05      	cmp	r3, #5
 8005a3c:	d026      	beq.n	8005a8c <UART_SetConfig+0xe3c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	2b06      	cmp	r3, #6
 8005a44:	d020      	beq.n	8005a88 <UART_SetConfig+0xe38>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	2b07      	cmp	r3, #7
 8005a4c:	d01a      	beq.n	8005a84 <UART_SetConfig+0xe34>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d014      	beq.n	8005a80 <UART_SetConfig+0xe30>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	2b09      	cmp	r3, #9
 8005a5c:	d00e      	beq.n	8005a7c <UART_SetConfig+0xe2c>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	2b0a      	cmp	r3, #10
 8005a64:	d008      	beq.n	8005a78 <UART_SetConfig+0xe28>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b0b      	cmp	r3, #11
 8005a6c:	d102      	bne.n	8005a74 <UART_SetConfig+0xe24>
 8005a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a72:	e016      	b.n	8005aa2 <UART_SetConfig+0xe52>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e014      	b.n	8005aa2 <UART_SetConfig+0xe52>
 8005a78:	2380      	movs	r3, #128	; 0x80
 8005a7a:	e012      	b.n	8005aa2 <UART_SetConfig+0xe52>
 8005a7c:	2340      	movs	r3, #64	; 0x40
 8005a7e:	e010      	b.n	8005aa2 <UART_SetConfig+0xe52>
 8005a80:	2320      	movs	r3, #32
 8005a82:	e00e      	b.n	8005aa2 <UART_SetConfig+0xe52>
 8005a84:	2310      	movs	r3, #16
 8005a86:	e00c      	b.n	8005aa2 <UART_SetConfig+0xe52>
 8005a88:	230c      	movs	r3, #12
 8005a8a:	e00a      	b.n	8005aa2 <UART_SetConfig+0xe52>
 8005a8c:	230a      	movs	r3, #10
 8005a8e:	e008      	b.n	8005aa2 <UART_SetConfig+0xe52>
 8005a90:	2308      	movs	r3, #8
 8005a92:	e006      	b.n	8005aa2 <UART_SetConfig+0xe52>
 8005a94:	2306      	movs	r3, #6
 8005a96:	e004      	b.n	8005aa2 <UART_SetConfig+0xe52>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	e002      	b.n	8005aa2 <UART_SetConfig+0xe52>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e000      	b.n	8005aa2 <UART_SetConfig+0xe52>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	005a      	lsls	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	441a      	add	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005abe:	e063      	b.n	8005b88 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d04f      	beq.n	8005b68 <UART_SetConfig+0xf18>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d048      	beq.n	8005b62 <UART_SetConfig+0xf12>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d041      	beq.n	8005b5c <UART_SetConfig+0xf0c>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d03a      	beq.n	8005b56 <UART_SetConfig+0xf06>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d033      	beq.n	8005b50 <UART_SetConfig+0xf00>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	2b05      	cmp	r3, #5
 8005aee:	d02c      	beq.n	8005b4a <UART_SetConfig+0xefa>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	2b06      	cmp	r3, #6
 8005af6:	d025      	beq.n	8005b44 <UART_SetConfig+0xef4>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	2b07      	cmp	r3, #7
 8005afe:	d01e      	beq.n	8005b3e <UART_SetConfig+0xeee>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d017      	beq.n	8005b38 <UART_SetConfig+0xee8>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	2b09      	cmp	r3, #9
 8005b0e:	d010      	beq.n	8005b32 <UART_SetConfig+0xee2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	2b0a      	cmp	r3, #10
 8005b16:	d009      	beq.n	8005b2c <UART_SetConfig+0xedc>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	2b0b      	cmp	r3, #11
 8005b1e:	d102      	bne.n	8005b26 <UART_SetConfig+0xed6>
 8005b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b24:	e022      	b.n	8005b6c <UART_SetConfig+0xf1c>
 8005b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b2a:	e01f      	b.n	8005b6c <UART_SetConfig+0xf1c>
 8005b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b30:	e01c      	b.n	8005b6c <UART_SetConfig+0xf1c>
 8005b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b36:	e019      	b.n	8005b6c <UART_SetConfig+0xf1c>
 8005b38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b3c:	e016      	b.n	8005b6c <UART_SetConfig+0xf1c>
 8005b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b42:	e013      	b.n	8005b6c <UART_SetConfig+0xf1c>
 8005b44:	f241 5354 	movw	r3, #5460	; 0x1554
 8005b48:	e010      	b.n	8005b6c <UART_SetConfig+0xf1c>
 8005b4a:	f641 1398 	movw	r3, #6552	; 0x1998
 8005b4e:	e00d      	b.n	8005b6c <UART_SetConfig+0xf1c>
 8005b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b54:	e00a      	b.n	8005b6c <UART_SetConfig+0xf1c>
 8005b56:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005b5a:	e007      	b.n	8005b6c <UART_SetConfig+0xf1c>
 8005b5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b60:	e004      	b.n	8005b6c <UART_SetConfig+0xf1c>
 8005b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b66:	e001      	b.n	8005b6c <UART_SetConfig+0xf1c>
 8005b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6852      	ldr	r2, [r2, #4]
 8005b70:	0852      	lsrs	r2, r2, #1
 8005b72:	441a      	add	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b80:	e002      	b.n	8005b88 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	76fb      	strb	r3, [r7, #27]
        break;
 8005b86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b0f      	cmp	r3, #15
 8005b8c:	d916      	bls.n	8005bbc <UART_SetConfig+0xf6c>
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b94:	d212      	bcs.n	8005bbc <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f023 030f 	bic.w	r3, r3, #15
 8005b9e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	89fb      	ldrh	r3, [r7, #14]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	89fa      	ldrh	r2, [r7, #14]
 8005bb8:	60da      	str	r2, [r3, #12]
 8005bba:	e20c      	b.n	8005fd6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	76fb      	strb	r3, [r7, #27]
 8005bc0:	e209      	b.n	8005fd6 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8005bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	f200 81f4 	bhi.w	8005fb4 <UART_SetConfig+0x1364>
 8005bcc:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <UART_SetConfig+0xf84>)
 8005bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd2:	bf00      	nop
 8005bd4:	08005c29 	.word	0x08005c29
 8005bd8:	08005cdf 	.word	0x08005cdf
 8005bdc:	08005d95 	.word	0x08005d95
 8005be0:	08005fb5 	.word	0x08005fb5
 8005be4:	08005e3f 	.word	0x08005e3f
 8005be8:	08005fb5 	.word	0x08005fb5
 8005bec:	08005fb5 	.word	0x08005fb5
 8005bf0:	08005fb5 	.word	0x08005fb5
 8005bf4:	08005ef5 	.word	0x08005ef5
 8005bf8:	0001e848 	.word	0x0001e848
 8005bfc:	01e84800 	.word	0x01e84800
 8005c00:	0003d090 	.word	0x0003d090
 8005c04:	0007a120 	.word	0x0007a120
 8005c08:	000f4240 	.word	0x000f4240
 8005c0c:	001e8480 	.word	0x001e8480
 8005c10:	0028b0aa 	.word	0x0028b0aa
 8005c14:	0030d400 	.word	0x0030d400
 8005c18:	003d0900 	.word	0x003d0900
 8005c1c:	00516154 	.word	0x00516154
 8005c20:	007a1200 	.word	0x007a1200
 8005c24:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c28:	f7fe f97e 	bl	8003f28 <HAL_RCC_GetPCLK1Freq>
 8005c2c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d044      	beq.n	8005cc0 <UART_SetConfig+0x1070>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d03e      	beq.n	8005cbc <UART_SetConfig+0x106c>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d038      	beq.n	8005cb8 <UART_SetConfig+0x1068>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d032      	beq.n	8005cb4 <UART_SetConfig+0x1064>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d02c      	beq.n	8005cb0 <UART_SetConfig+0x1060>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	2b05      	cmp	r3, #5
 8005c5c:	d026      	beq.n	8005cac <UART_SetConfig+0x105c>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	2b06      	cmp	r3, #6
 8005c64:	d020      	beq.n	8005ca8 <UART_SetConfig+0x1058>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	2b07      	cmp	r3, #7
 8005c6c:	d01a      	beq.n	8005ca4 <UART_SetConfig+0x1054>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d014      	beq.n	8005ca0 <UART_SetConfig+0x1050>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	2b09      	cmp	r3, #9
 8005c7c:	d00e      	beq.n	8005c9c <UART_SetConfig+0x104c>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	2b0a      	cmp	r3, #10
 8005c84:	d008      	beq.n	8005c98 <UART_SetConfig+0x1048>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	2b0b      	cmp	r3, #11
 8005c8c:	d102      	bne.n	8005c94 <UART_SetConfig+0x1044>
 8005c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c92:	e016      	b.n	8005cc2 <UART_SetConfig+0x1072>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e014      	b.n	8005cc2 <UART_SetConfig+0x1072>
 8005c98:	2380      	movs	r3, #128	; 0x80
 8005c9a:	e012      	b.n	8005cc2 <UART_SetConfig+0x1072>
 8005c9c:	2340      	movs	r3, #64	; 0x40
 8005c9e:	e010      	b.n	8005cc2 <UART_SetConfig+0x1072>
 8005ca0:	2320      	movs	r3, #32
 8005ca2:	e00e      	b.n	8005cc2 <UART_SetConfig+0x1072>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	e00c      	b.n	8005cc2 <UART_SetConfig+0x1072>
 8005ca8:	230c      	movs	r3, #12
 8005caa:	e00a      	b.n	8005cc2 <UART_SetConfig+0x1072>
 8005cac:	230a      	movs	r3, #10
 8005cae:	e008      	b.n	8005cc2 <UART_SetConfig+0x1072>
 8005cb0:	2308      	movs	r3, #8
 8005cb2:	e006      	b.n	8005cc2 <UART_SetConfig+0x1072>
 8005cb4:	2306      	movs	r3, #6
 8005cb6:	e004      	b.n	8005cc2 <UART_SetConfig+0x1072>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	e002      	b.n	8005cc2 <UART_SetConfig+0x1072>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e000      	b.n	8005cc2 <UART_SetConfig+0x1072>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	085b      	lsrs	r3, r3, #1
 8005cce:	441a      	add	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005cdc:	e16d      	b.n	8005fba <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cde:	f7fe f939 	bl	8003f54 <HAL_RCC_GetPCLK2Freq>
 8005ce2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d044      	beq.n	8005d76 <UART_SetConfig+0x1126>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d03e      	beq.n	8005d72 <UART_SetConfig+0x1122>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d038      	beq.n	8005d6e <UART_SetConfig+0x111e>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d032      	beq.n	8005d6a <UART_SetConfig+0x111a>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d02c      	beq.n	8005d66 <UART_SetConfig+0x1116>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	2b05      	cmp	r3, #5
 8005d12:	d026      	beq.n	8005d62 <UART_SetConfig+0x1112>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b06      	cmp	r3, #6
 8005d1a:	d020      	beq.n	8005d5e <UART_SetConfig+0x110e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	2b07      	cmp	r3, #7
 8005d22:	d01a      	beq.n	8005d5a <UART_SetConfig+0x110a>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d014      	beq.n	8005d56 <UART_SetConfig+0x1106>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	2b09      	cmp	r3, #9
 8005d32:	d00e      	beq.n	8005d52 <UART_SetConfig+0x1102>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	2b0a      	cmp	r3, #10
 8005d3a:	d008      	beq.n	8005d4e <UART_SetConfig+0x10fe>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b0b      	cmp	r3, #11
 8005d42:	d102      	bne.n	8005d4a <UART_SetConfig+0x10fa>
 8005d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d48:	e016      	b.n	8005d78 <UART_SetConfig+0x1128>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e014      	b.n	8005d78 <UART_SetConfig+0x1128>
 8005d4e:	2380      	movs	r3, #128	; 0x80
 8005d50:	e012      	b.n	8005d78 <UART_SetConfig+0x1128>
 8005d52:	2340      	movs	r3, #64	; 0x40
 8005d54:	e010      	b.n	8005d78 <UART_SetConfig+0x1128>
 8005d56:	2320      	movs	r3, #32
 8005d58:	e00e      	b.n	8005d78 <UART_SetConfig+0x1128>
 8005d5a:	2310      	movs	r3, #16
 8005d5c:	e00c      	b.n	8005d78 <UART_SetConfig+0x1128>
 8005d5e:	230c      	movs	r3, #12
 8005d60:	e00a      	b.n	8005d78 <UART_SetConfig+0x1128>
 8005d62:	230a      	movs	r3, #10
 8005d64:	e008      	b.n	8005d78 <UART_SetConfig+0x1128>
 8005d66:	2308      	movs	r3, #8
 8005d68:	e006      	b.n	8005d78 <UART_SetConfig+0x1128>
 8005d6a:	2306      	movs	r3, #6
 8005d6c:	e004      	b.n	8005d78 <UART_SetConfig+0x1128>
 8005d6e:	2304      	movs	r3, #4
 8005d70:	e002      	b.n	8005d78 <UART_SetConfig+0x1128>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e000      	b.n	8005d78 <UART_SetConfig+0x1128>
 8005d76:	2301      	movs	r3, #1
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	085b      	lsrs	r3, r3, #1
 8005d84:	441a      	add	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d92:	e112      	b.n	8005fba <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d044      	beq.n	8005e26 <UART_SetConfig+0x11d6>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d03e      	beq.n	8005e22 <UART_SetConfig+0x11d2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d038      	beq.n	8005e1e <UART_SetConfig+0x11ce>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d032      	beq.n	8005e1a <UART_SetConfig+0x11ca>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d02c      	beq.n	8005e16 <UART_SetConfig+0x11c6>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b05      	cmp	r3, #5
 8005dc2:	d026      	beq.n	8005e12 <UART_SetConfig+0x11c2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b06      	cmp	r3, #6
 8005dca:	d020      	beq.n	8005e0e <UART_SetConfig+0x11be>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b07      	cmp	r3, #7
 8005dd2:	d01a      	beq.n	8005e0a <UART_SetConfig+0x11ba>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d014      	beq.n	8005e06 <UART_SetConfig+0x11b6>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	2b09      	cmp	r3, #9
 8005de2:	d00e      	beq.n	8005e02 <UART_SetConfig+0x11b2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	2b0a      	cmp	r3, #10
 8005dea:	d008      	beq.n	8005dfe <UART_SetConfig+0x11ae>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	2b0b      	cmp	r3, #11
 8005df2:	d102      	bne.n	8005dfa <UART_SetConfig+0x11aa>
 8005df4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005df8:	e016      	b.n	8005e28 <UART_SetConfig+0x11d8>
 8005dfa:	4b81      	ldr	r3, [pc, #516]	; (8006000 <UART_SetConfig+0x13b0>)
 8005dfc:	e014      	b.n	8005e28 <UART_SetConfig+0x11d8>
 8005dfe:	4b81      	ldr	r3, [pc, #516]	; (8006004 <UART_SetConfig+0x13b4>)
 8005e00:	e012      	b.n	8005e28 <UART_SetConfig+0x11d8>
 8005e02:	4b81      	ldr	r3, [pc, #516]	; (8006008 <UART_SetConfig+0x13b8>)
 8005e04:	e010      	b.n	8005e28 <UART_SetConfig+0x11d8>
 8005e06:	4b81      	ldr	r3, [pc, #516]	; (800600c <UART_SetConfig+0x13bc>)
 8005e08:	e00e      	b.n	8005e28 <UART_SetConfig+0x11d8>
 8005e0a:	4b81      	ldr	r3, [pc, #516]	; (8006010 <UART_SetConfig+0x13c0>)
 8005e0c:	e00c      	b.n	8005e28 <UART_SetConfig+0x11d8>
 8005e0e:	4b81      	ldr	r3, [pc, #516]	; (8006014 <UART_SetConfig+0x13c4>)
 8005e10:	e00a      	b.n	8005e28 <UART_SetConfig+0x11d8>
 8005e12:	4b81      	ldr	r3, [pc, #516]	; (8006018 <UART_SetConfig+0x13c8>)
 8005e14:	e008      	b.n	8005e28 <UART_SetConfig+0x11d8>
 8005e16:	4b81      	ldr	r3, [pc, #516]	; (800601c <UART_SetConfig+0x13cc>)
 8005e18:	e006      	b.n	8005e28 <UART_SetConfig+0x11d8>
 8005e1a:	4b81      	ldr	r3, [pc, #516]	; (8006020 <UART_SetConfig+0x13d0>)
 8005e1c:	e004      	b.n	8005e28 <UART_SetConfig+0x11d8>
 8005e1e:	4b81      	ldr	r3, [pc, #516]	; (8006024 <UART_SetConfig+0x13d4>)
 8005e20:	e002      	b.n	8005e28 <UART_SetConfig+0x11d8>
 8005e22:	4b81      	ldr	r3, [pc, #516]	; (8006028 <UART_SetConfig+0x13d8>)
 8005e24:	e000      	b.n	8005e28 <UART_SetConfig+0x11d8>
 8005e26:	4b76      	ldr	r3, [pc, #472]	; (8006000 <UART_SetConfig+0x13b0>)
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6852      	ldr	r2, [r2, #4]
 8005e2c:	0852      	lsrs	r2, r2, #1
 8005e2e:	441a      	add	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e3c:	e0bd      	b.n	8005fba <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e3e:	f7fd ffdd 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8005e42:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d044      	beq.n	8005ed6 <UART_SetConfig+0x1286>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d03e      	beq.n	8005ed2 <UART_SetConfig+0x1282>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d038      	beq.n	8005ece <UART_SetConfig+0x127e>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	d032      	beq.n	8005eca <UART_SetConfig+0x127a>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d02c      	beq.n	8005ec6 <UART_SetConfig+0x1276>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b05      	cmp	r3, #5
 8005e72:	d026      	beq.n	8005ec2 <UART_SetConfig+0x1272>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2b06      	cmp	r3, #6
 8005e7a:	d020      	beq.n	8005ebe <UART_SetConfig+0x126e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b07      	cmp	r3, #7
 8005e82:	d01a      	beq.n	8005eba <UART_SetConfig+0x126a>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d014      	beq.n	8005eb6 <UART_SetConfig+0x1266>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b09      	cmp	r3, #9
 8005e92:	d00e      	beq.n	8005eb2 <UART_SetConfig+0x1262>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b0a      	cmp	r3, #10
 8005e9a:	d008      	beq.n	8005eae <UART_SetConfig+0x125e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	2b0b      	cmp	r3, #11
 8005ea2:	d102      	bne.n	8005eaa <UART_SetConfig+0x125a>
 8005ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ea8:	e016      	b.n	8005ed8 <UART_SetConfig+0x1288>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e014      	b.n	8005ed8 <UART_SetConfig+0x1288>
 8005eae:	2380      	movs	r3, #128	; 0x80
 8005eb0:	e012      	b.n	8005ed8 <UART_SetConfig+0x1288>
 8005eb2:	2340      	movs	r3, #64	; 0x40
 8005eb4:	e010      	b.n	8005ed8 <UART_SetConfig+0x1288>
 8005eb6:	2320      	movs	r3, #32
 8005eb8:	e00e      	b.n	8005ed8 <UART_SetConfig+0x1288>
 8005eba:	2310      	movs	r3, #16
 8005ebc:	e00c      	b.n	8005ed8 <UART_SetConfig+0x1288>
 8005ebe:	230c      	movs	r3, #12
 8005ec0:	e00a      	b.n	8005ed8 <UART_SetConfig+0x1288>
 8005ec2:	230a      	movs	r3, #10
 8005ec4:	e008      	b.n	8005ed8 <UART_SetConfig+0x1288>
 8005ec6:	2308      	movs	r3, #8
 8005ec8:	e006      	b.n	8005ed8 <UART_SetConfig+0x1288>
 8005eca:	2306      	movs	r3, #6
 8005ecc:	e004      	b.n	8005ed8 <UART_SetConfig+0x1288>
 8005ece:	2304      	movs	r3, #4
 8005ed0:	e002      	b.n	8005ed8 <UART_SetConfig+0x1288>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	e000      	b.n	8005ed8 <UART_SetConfig+0x1288>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	085b      	lsrs	r3, r3, #1
 8005ee4:	441a      	add	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ef2:	e062      	b.n	8005fba <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d04e      	beq.n	8005f9a <UART_SetConfig+0x134a>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d047      	beq.n	8005f94 <UART_SetConfig+0x1344>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d040      	beq.n	8005f8e <UART_SetConfig+0x133e>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d039      	beq.n	8005f88 <UART_SetConfig+0x1338>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d032      	beq.n	8005f82 <UART_SetConfig+0x1332>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	2b05      	cmp	r3, #5
 8005f22:	d02b      	beq.n	8005f7c <UART_SetConfig+0x132c>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	2b06      	cmp	r3, #6
 8005f2a:	d024      	beq.n	8005f76 <UART_SetConfig+0x1326>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	2b07      	cmp	r3, #7
 8005f32:	d01d      	beq.n	8005f70 <UART_SetConfig+0x1320>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d016      	beq.n	8005f6a <UART_SetConfig+0x131a>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	2b09      	cmp	r3, #9
 8005f42:	d00f      	beq.n	8005f64 <UART_SetConfig+0x1314>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	2b0a      	cmp	r3, #10
 8005f4a:	d008      	beq.n	8005f5e <UART_SetConfig+0x130e>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	2b0b      	cmp	r3, #11
 8005f52:	d101      	bne.n	8005f58 <UART_SetConfig+0x1308>
 8005f54:	2380      	movs	r3, #128	; 0x80
 8005f56:	e022      	b.n	8005f9e <UART_SetConfig+0x134e>
 8005f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f5c:	e01f      	b.n	8005f9e <UART_SetConfig+0x134e>
 8005f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f62:	e01c      	b.n	8005f9e <UART_SetConfig+0x134e>
 8005f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f68:	e019      	b.n	8005f9e <UART_SetConfig+0x134e>
 8005f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f6e:	e016      	b.n	8005f9e <UART_SetConfig+0x134e>
 8005f70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f74:	e013      	b.n	8005f9e <UART_SetConfig+0x134e>
 8005f76:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005f7a:	e010      	b.n	8005f9e <UART_SetConfig+0x134e>
 8005f7c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005f80:	e00d      	b.n	8005f9e <UART_SetConfig+0x134e>
 8005f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f86:	e00a      	b.n	8005f9e <UART_SetConfig+0x134e>
 8005f88:	f241 5355 	movw	r3, #5461	; 0x1555
 8005f8c:	e007      	b.n	8005f9e <UART_SetConfig+0x134e>
 8005f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f92:	e004      	b.n	8005f9e <UART_SetConfig+0x134e>
 8005f94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f98:	e001      	b.n	8005f9e <UART_SetConfig+0x134e>
 8005f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6852      	ldr	r2, [r2, #4]
 8005fa2:	0852      	lsrs	r2, r2, #1
 8005fa4:	441a      	add	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005fb2:	e002      	b.n	8005fba <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	76fb      	strb	r3, [r7, #27]
        break;
 8005fb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	2b0f      	cmp	r3, #15
 8005fbe:	d908      	bls.n	8005fd2 <UART_SetConfig+0x1382>
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc6:	d204      	bcs.n	8005fd2 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	60da      	str	r2, [r3, #12]
 8005fd0:	e001      	b.n	8005fd6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	76fb      	strb	r3, [r7, #27]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005ff2:	7efb      	ldrb	r3, [r7, #27]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3728      	adds	r7, #40	; 0x28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005ffe:	bf00      	nop
 8006000:	00f42400 	.word	0x00f42400
 8006004:	0001e848 	.word	0x0001e848
 8006008:	0003d090 	.word	0x0003d090
 800600c:	0007a120 	.word	0x0007a120
 8006010:	000f4240 	.word	0x000f4240
 8006014:	00145855 	.word	0x00145855
 8006018:	00186a00 	.word	0x00186a00
 800601c:	001e8480 	.word	0x001e8480
 8006020:	0028b0aa 	.word	0x0028b0aa
 8006024:	003d0900 	.word	0x003d0900
 8006028:	007a1200 	.word	0x007a1200

0800602c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	f003 0308 	and.w	r3, r3, #8
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01a      	beq.n	8006142 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800612a:	d10a      	bne.n	8006142 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	605a      	str	r2, [r3, #4]
  }
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af02      	add	r7, sp, #8
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006180:	f7fb fede 	bl	8001f40 <HAL_GetTick>
 8006184:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0308 	and.w	r3, r3, #8
 8006190:	2b08      	cmp	r3, #8
 8006192:	d10e      	bne.n	80061b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006194:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f82c 	bl	8006200 <UART_WaitOnFlagUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e022      	b.n	80061f8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d10e      	bne.n	80061de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f816 	bl	8006200 <UART_WaitOnFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e00c      	b.n	80061f8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	4613      	mov	r3, r2
 800620e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006210:	e062      	b.n	80062d8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006218:	d05e      	beq.n	80062d8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800621a:	f7fb fe91 	bl	8001f40 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	429a      	cmp	r2, r3
 8006228:	d302      	bcc.n	8006230 <UART_WaitOnFlagUntilTimeout+0x30>
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d11d      	bne.n	800626c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800623e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0201 	bic.w	r2, r2, #1
 800624e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e045      	b.n	80062f8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0304 	and.w	r3, r3, #4
 8006276:	2b00      	cmp	r3, #0
 8006278:	d02e      	beq.n	80062d8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006288:	d126      	bne.n	80062d8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006292:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062a2:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0201 	bic.w	r2, r2, #1
 80062b2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2220      	movs	r2, #32
 80062c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e00f      	b.n	80062f8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69da      	ldr	r2, [r3, #28]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	4013      	ands	r3, r2
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	bf0c      	ite	eq
 80062e8:	2301      	moveq	r3, #1
 80062ea:	2300      	movne	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d08d      	beq.n	8006212 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <HAL_UARTEx_DisableFifoMode+0x16>
 8006312:	2302      	movs	r3, #2
 8006314:	e027      	b.n	8006366 <HAL_UARTEx_DisableFifoMode+0x66>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2224      	movs	r2, #36	; 0x24
 8006322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0201 	bic.w	r2, r2, #1
 800633c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006344:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006382:	2b01      	cmp	r3, #1
 8006384:	d101      	bne.n	800638a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006386:	2302      	movs	r3, #2
 8006388:	e02d      	b.n	80063e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2224      	movs	r2, #36	; 0x24
 8006396:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f022 0201 	bic.w	r2, r2, #1
 80063b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f850 	bl	800646c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b084      	sub	sp, #16
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006402:	2302      	movs	r3, #2
 8006404:	e02d      	b.n	8006462 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2224      	movs	r2, #36	; 0x24
 8006412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0201 	bic.w	r2, r2, #1
 800642c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f812 	bl	800646c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b089      	sub	sp, #36	; 0x24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006474:	4a2f      	ldr	r2, [pc, #188]	; (8006534 <UARTEx_SetNbDataToProcess+0xc8>)
 8006476:	f107 0314 	add.w	r3, r7, #20
 800647a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800647e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006482:	4a2d      	ldr	r2, [pc, #180]	; (8006538 <UARTEx_SetNbDataToProcess+0xcc>)
 8006484:	f107 030c 	add.w	r3, r7, #12
 8006488:	e892 0003 	ldmia.w	r2, {r0, r1}
 800648c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006494:	2b00      	cmp	r3, #0
 8006496:	d108      	bne.n	80064aa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064a8:	e03d      	b.n	8006526 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064aa:	2308      	movs	r3, #8
 80064ac:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064ae:	2308      	movs	r3, #8
 80064b0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	0e5b      	lsrs	r3, r3, #25
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	0f5b      	lsrs	r3, r3, #29
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80064d2:	7fbb      	ldrb	r3, [r7, #30]
 80064d4:	7f3a      	ldrb	r2, [r7, #28]
 80064d6:	f107 0120 	add.w	r1, r7, #32
 80064da:	440a      	add	r2, r1
 80064dc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80064e0:	fb02 f303 	mul.w	r3, r2, r3
 80064e4:	7f3a      	ldrb	r2, [r7, #28]
 80064e6:	f107 0120 	add.w	r1, r7, #32
 80064ea:	440a      	add	r2, r1
 80064ec:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80064f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80064fc:	7ffb      	ldrb	r3, [r7, #31]
 80064fe:	7f7a      	ldrb	r2, [r7, #29]
 8006500:	f107 0120 	add.w	r1, r7, #32
 8006504:	440a      	add	r2, r1
 8006506:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800650a:	fb02 f303 	mul.w	r3, r2, r3
 800650e:	7f7a      	ldrb	r2, [r7, #29]
 8006510:	f107 0120 	add.w	r1, r7, #32
 8006514:	440a      	add	r2, r1
 8006516:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800651a:	fb93 f3f2 	sdiv	r3, r3, r2
 800651e:	b29a      	uxth	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006526:	bf00      	nop
 8006528:	3724      	adds	r7, #36	; 0x24
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	08007d10 	.word	0x08007d10
 8006538:	08007d18 	.word	0x08007d18

0800653c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800653c:	b084      	sub	sp, #16
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	f107 001c 	add.w	r0, r7, #28
 800654a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	2b01      	cmp	r3, #1
 8006552:	d122      	bne.n	800659a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800657c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800657e:	2b01      	cmp	r3, #1
 8006580:	d105      	bne.n	800658e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fa28 	bl	80069e4 <USB_CoreReset>
 8006594:	4603      	mov	r3, r0
 8006596:	73fb      	strb	r3, [r7, #15]
 8006598:	e01a      	b.n	80065d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fa1c 	bl	80069e4 <USB_CoreReset>
 80065ac:	4603      	mov	r3, r0
 80065ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	639a      	str	r2, [r3, #56]	; 0x38
 80065c2:	e005      	b.n	80065d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065dc:	b004      	add	sp, #16
 80065de:	4770      	bx	lr

080065e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f023 0201 	bic.w	r2, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	460b      	mov	r3, r1
 800660c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d106      	bne.n	800662e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	60da      	str	r2, [r3, #12]
 800662c:	e00b      	b.n	8006646 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800662e:	78fb      	ldrb	r3, [r7, #3]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	60da      	str	r2, [r3, #12]
 8006640:	e001      	b.n	8006646 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e003      	b.n	800664e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006646:	2032      	movs	r0, #50	; 0x32
 8006648:	f7fb fc86 	bl	8001f58 <HAL_Delay>

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006658:	b084      	sub	sp, #16
 800665a:	b580      	push	{r7, lr}
 800665c:	b086      	sub	sp, #24
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006672:	2300      	movs	r3, #0
 8006674:	613b      	str	r3, [r7, #16]
 8006676:	e009      	b.n	800668c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	3340      	adds	r3, #64	; 0x40
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	2200      	movs	r2, #0
 8006684:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	3301      	adds	r3, #1
 800668a:	613b      	str	r3, [r7, #16]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b0e      	cmp	r3, #14
 8006690:	d9f2      	bls.n	8006678 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d11c      	bne.n	80066d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066a6:	f043 0302 	orr.w	r3, r3, #2
 80066aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	e005      	b.n	80066de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066e4:	461a      	mov	r2, r3
 80066e6:	2300      	movs	r3, #0
 80066e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f0:	4619      	mov	r1, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f8:	461a      	mov	r2, r3
 80066fa:	680b      	ldr	r3, [r1, #0]
 80066fc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066fe:	2103      	movs	r1, #3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f93d 	bl	8006980 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006706:	2110      	movs	r1, #16
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f8f1 	bl	80068f0 <USB_FlushTxFifo>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f90f 	bl	800693c <USB_FlushRxFifo>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672e:	461a      	mov	r2, r3
 8006730:	2300      	movs	r3, #0
 8006732:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673a:	461a      	mov	r2, r3
 800673c:	2300      	movs	r3, #0
 800673e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006746:	461a      	mov	r2, r3
 8006748:	2300      	movs	r3, #0
 800674a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800674c:	2300      	movs	r3, #0
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	e043      	b.n	80067da <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006768:	d118      	bne.n	800679c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10a      	bne.n	8006786 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677c:	461a      	mov	r2, r3
 800677e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	e013      	b.n	80067ae <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006792:	461a      	mov	r2, r3
 8006794:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	e008      	b.n	80067ae <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a8:	461a      	mov	r2, r3
 80067aa:	2300      	movs	r3, #0
 80067ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ba:	461a      	mov	r2, r3
 80067bc:	2300      	movs	r3, #0
 80067be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067cc:	461a      	mov	r2, r3
 80067ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	3301      	adds	r3, #1
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d3b7      	bcc.n	8006752 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067e2:	2300      	movs	r3, #0
 80067e4:	613b      	str	r3, [r7, #16]
 80067e6:	e043      	b.n	8006870 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067fe:	d118      	bne.n	8006832 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10a      	bne.n	800681c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006812:	461a      	mov	r2, r3
 8006814:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	e013      	b.n	8006844 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006828:	461a      	mov	r2, r3
 800682a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	e008      	b.n	8006844 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683e:	461a      	mov	r2, r3
 8006840:	2300      	movs	r3, #0
 8006842:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006850:	461a      	mov	r2, r3
 8006852:	2300      	movs	r3, #0
 8006854:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006862:	461a      	mov	r2, r3
 8006864:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006868:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	3301      	adds	r3, #1
 800686e:	613b      	str	r3, [r7, #16]
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	429a      	cmp	r2, r3
 8006876:	d3b7      	bcc.n	80067e8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800688a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006898:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f043 0210 	orr.w	r2, r3, #16
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	4b10      	ldr	r3, [pc, #64]	; (80068ec <USB_DevInit+0x294>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	f043 0208 	orr.w	r2, r3, #8
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d107      	bne.n	80068da <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068d2:	f043 0304 	orr.w	r3, r3, #4
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068da:	7dfb      	ldrb	r3, [r7, #23]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068e6:	b004      	add	sp, #16
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	803c3800 	.word	0x803c3800

080068f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	019b      	lsls	r3, r3, #6
 8006902:	f043 0220 	orr.w	r2, r3, #32
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3301      	adds	r3, #1
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4a09      	ldr	r2, [pc, #36]	; (8006938 <USB_FlushTxFifo+0x48>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d901      	bls.n	800691c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e006      	b.n	800692a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b20      	cmp	r3, #32
 8006926:	d0f0      	beq.n	800690a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	00030d40 	.word	0x00030d40

0800693c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006944:	2300      	movs	r3, #0
 8006946:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2210      	movs	r2, #16
 800694c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3301      	adds	r3, #1
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4a09      	ldr	r2, [pc, #36]	; (800697c <USB_FlushRxFifo+0x40>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d901      	bls.n	8006960 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e006      	b.n	800696e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	2b10      	cmp	r3, #16
 800696a:	d0f0      	beq.n	800694e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	00030d40 	.word	0x00030d40

08006980 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	68f9      	ldr	r1, [r7, #12]
 800699c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069a0:	4313      	orrs	r3, r2
 80069a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069cc:	f043 0302 	orr.w	r3, r3, #2
 80069d0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80069d2:	2003      	movs	r0, #3
 80069d4:	f7fb fac0 	bl	8001f58 <HAL_Delay>

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	3301      	adds	r3, #1
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4a13      	ldr	r2, [pc, #76]	; (8006a48 <USB_CoreReset+0x64>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d901      	bls.n	8006a02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e01b      	b.n	8006a3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	daf2      	bge.n	80069f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	f043 0201 	orr.w	r2, r3, #1
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <USB_CoreReset+0x64>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d901      	bls.n	8006a2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e006      	b.n	8006a3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d0f0      	beq.n	8006a1a <USB_CoreReset+0x36>

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	00030d40 	.word	0x00030d40

08006a4c <__errno>:
 8006a4c:	4b01      	ldr	r3, [pc, #4]	; (8006a54 <__errno+0x8>)
 8006a4e:	6818      	ldr	r0, [r3, #0]
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	2000000c 	.word	0x2000000c

08006a58 <__libc_init_array>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	4e0d      	ldr	r6, [pc, #52]	; (8006a90 <__libc_init_array+0x38>)
 8006a5c:	4c0d      	ldr	r4, [pc, #52]	; (8006a94 <__libc_init_array+0x3c>)
 8006a5e:	1ba4      	subs	r4, r4, r6
 8006a60:	10a4      	asrs	r4, r4, #2
 8006a62:	2500      	movs	r5, #0
 8006a64:	42a5      	cmp	r5, r4
 8006a66:	d109      	bne.n	8006a7c <__libc_init_array+0x24>
 8006a68:	4e0b      	ldr	r6, [pc, #44]	; (8006a98 <__libc_init_array+0x40>)
 8006a6a:	4c0c      	ldr	r4, [pc, #48]	; (8006a9c <__libc_init_array+0x44>)
 8006a6c:	f001 f942 	bl	8007cf4 <_init>
 8006a70:	1ba4      	subs	r4, r4, r6
 8006a72:	10a4      	asrs	r4, r4, #2
 8006a74:	2500      	movs	r5, #0
 8006a76:	42a5      	cmp	r5, r4
 8006a78:	d105      	bne.n	8006a86 <__libc_init_array+0x2e>
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}
 8006a7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a80:	4798      	blx	r3
 8006a82:	3501      	adds	r5, #1
 8006a84:	e7ee      	b.n	8006a64 <__libc_init_array+0xc>
 8006a86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a8a:	4798      	blx	r3
 8006a8c:	3501      	adds	r5, #1
 8006a8e:	e7f2      	b.n	8006a76 <__libc_init_array+0x1e>
 8006a90:	0801e0d0 	.word	0x0801e0d0
 8006a94:	0801e0d0 	.word	0x0801e0d0
 8006a98:	0801e0d0 	.word	0x0801e0d0
 8006a9c:	0801e0d4 	.word	0x0801e0d4

08006aa0 <malloc>:
 8006aa0:	4b02      	ldr	r3, [pc, #8]	; (8006aac <malloc+0xc>)
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	6818      	ldr	r0, [r3, #0]
 8006aa6:	f000 b861 	b.w	8006b6c <_malloc_r>
 8006aaa:	bf00      	nop
 8006aac:	2000000c 	.word	0x2000000c

08006ab0 <free>:
 8006ab0:	4b02      	ldr	r3, [pc, #8]	; (8006abc <free+0xc>)
 8006ab2:	4601      	mov	r1, r0
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	f000 b80b 	b.w	8006ad0 <_free_r>
 8006aba:	bf00      	nop
 8006abc:	2000000c 	.word	0x2000000c

08006ac0 <memset>:
 8006ac0:	4402      	add	r2, r0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d100      	bne.n	8006aca <memset+0xa>
 8006ac8:	4770      	bx	lr
 8006aca:	f803 1b01 	strb.w	r1, [r3], #1
 8006ace:	e7f9      	b.n	8006ac4 <memset+0x4>

08006ad0 <_free_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	2900      	cmp	r1, #0
 8006ad6:	d045      	beq.n	8006b64 <_free_r+0x94>
 8006ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006adc:	1f0c      	subs	r4, r1, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	bfb8      	it	lt
 8006ae2:	18e4      	addlt	r4, r4, r3
 8006ae4:	f000 f8ac 	bl	8006c40 <__malloc_lock>
 8006ae8:	4a1f      	ldr	r2, [pc, #124]	; (8006b68 <_free_r+0x98>)
 8006aea:	6813      	ldr	r3, [r2, #0]
 8006aec:	4610      	mov	r0, r2
 8006aee:	b933      	cbnz	r3, 8006afe <_free_r+0x2e>
 8006af0:	6063      	str	r3, [r4, #4]
 8006af2:	6014      	str	r4, [r2, #0]
 8006af4:	4628      	mov	r0, r5
 8006af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006afa:	f000 b8a2 	b.w	8006c42 <__malloc_unlock>
 8006afe:	42a3      	cmp	r3, r4
 8006b00:	d90c      	bls.n	8006b1c <_free_r+0x4c>
 8006b02:	6821      	ldr	r1, [r4, #0]
 8006b04:	1862      	adds	r2, r4, r1
 8006b06:	4293      	cmp	r3, r2
 8006b08:	bf04      	itt	eq
 8006b0a:	681a      	ldreq	r2, [r3, #0]
 8006b0c:	685b      	ldreq	r3, [r3, #4]
 8006b0e:	6063      	str	r3, [r4, #4]
 8006b10:	bf04      	itt	eq
 8006b12:	1852      	addeq	r2, r2, r1
 8006b14:	6022      	streq	r2, [r4, #0]
 8006b16:	6004      	str	r4, [r0, #0]
 8006b18:	e7ec      	b.n	8006af4 <_free_r+0x24>
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	b10a      	cbz	r2, 8006b24 <_free_r+0x54>
 8006b20:	42a2      	cmp	r2, r4
 8006b22:	d9fa      	bls.n	8006b1a <_free_r+0x4a>
 8006b24:	6819      	ldr	r1, [r3, #0]
 8006b26:	1858      	adds	r0, r3, r1
 8006b28:	42a0      	cmp	r0, r4
 8006b2a:	d10b      	bne.n	8006b44 <_free_r+0x74>
 8006b2c:	6820      	ldr	r0, [r4, #0]
 8006b2e:	4401      	add	r1, r0
 8006b30:	1858      	adds	r0, r3, r1
 8006b32:	4282      	cmp	r2, r0
 8006b34:	6019      	str	r1, [r3, #0]
 8006b36:	d1dd      	bne.n	8006af4 <_free_r+0x24>
 8006b38:	6810      	ldr	r0, [r2, #0]
 8006b3a:	6852      	ldr	r2, [r2, #4]
 8006b3c:	605a      	str	r2, [r3, #4]
 8006b3e:	4401      	add	r1, r0
 8006b40:	6019      	str	r1, [r3, #0]
 8006b42:	e7d7      	b.n	8006af4 <_free_r+0x24>
 8006b44:	d902      	bls.n	8006b4c <_free_r+0x7c>
 8006b46:	230c      	movs	r3, #12
 8006b48:	602b      	str	r3, [r5, #0]
 8006b4a:	e7d3      	b.n	8006af4 <_free_r+0x24>
 8006b4c:	6820      	ldr	r0, [r4, #0]
 8006b4e:	1821      	adds	r1, r4, r0
 8006b50:	428a      	cmp	r2, r1
 8006b52:	bf04      	itt	eq
 8006b54:	6811      	ldreq	r1, [r2, #0]
 8006b56:	6852      	ldreq	r2, [r2, #4]
 8006b58:	6062      	str	r2, [r4, #4]
 8006b5a:	bf04      	itt	eq
 8006b5c:	1809      	addeq	r1, r1, r0
 8006b5e:	6021      	streq	r1, [r4, #0]
 8006b60:	605c      	str	r4, [r3, #4]
 8006b62:	e7c7      	b.n	8006af4 <_free_r+0x24>
 8006b64:	bd38      	pop	{r3, r4, r5, pc}
 8006b66:	bf00      	nop
 8006b68:	20000094 	.word	0x20000094

08006b6c <_malloc_r>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	1ccd      	adds	r5, r1, #3
 8006b70:	f025 0503 	bic.w	r5, r5, #3
 8006b74:	3508      	adds	r5, #8
 8006b76:	2d0c      	cmp	r5, #12
 8006b78:	bf38      	it	cc
 8006b7a:	250c      	movcc	r5, #12
 8006b7c:	2d00      	cmp	r5, #0
 8006b7e:	4606      	mov	r6, r0
 8006b80:	db01      	blt.n	8006b86 <_malloc_r+0x1a>
 8006b82:	42a9      	cmp	r1, r5
 8006b84:	d903      	bls.n	8006b8e <_malloc_r+0x22>
 8006b86:	230c      	movs	r3, #12
 8006b88:	6033      	str	r3, [r6, #0]
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	bd70      	pop	{r4, r5, r6, pc}
 8006b8e:	f000 f857 	bl	8006c40 <__malloc_lock>
 8006b92:	4a21      	ldr	r2, [pc, #132]	; (8006c18 <_malloc_r+0xac>)
 8006b94:	6814      	ldr	r4, [r2, #0]
 8006b96:	4621      	mov	r1, r4
 8006b98:	b991      	cbnz	r1, 8006bc0 <_malloc_r+0x54>
 8006b9a:	4c20      	ldr	r4, [pc, #128]	; (8006c1c <_malloc_r+0xb0>)
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	b91b      	cbnz	r3, 8006ba8 <_malloc_r+0x3c>
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f000 f83d 	bl	8006c20 <_sbrk_r>
 8006ba6:	6020      	str	r0, [r4, #0]
 8006ba8:	4629      	mov	r1, r5
 8006baa:	4630      	mov	r0, r6
 8006bac:	f000 f838 	bl	8006c20 <_sbrk_r>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d124      	bne.n	8006bfe <_malloc_r+0x92>
 8006bb4:	230c      	movs	r3, #12
 8006bb6:	6033      	str	r3, [r6, #0]
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f000 f842 	bl	8006c42 <__malloc_unlock>
 8006bbe:	e7e4      	b.n	8006b8a <_malloc_r+0x1e>
 8006bc0:	680b      	ldr	r3, [r1, #0]
 8006bc2:	1b5b      	subs	r3, r3, r5
 8006bc4:	d418      	bmi.n	8006bf8 <_malloc_r+0x8c>
 8006bc6:	2b0b      	cmp	r3, #11
 8006bc8:	d90f      	bls.n	8006bea <_malloc_r+0x7e>
 8006bca:	600b      	str	r3, [r1, #0]
 8006bcc:	50cd      	str	r5, [r1, r3]
 8006bce:	18cc      	adds	r4, r1, r3
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f000 f836 	bl	8006c42 <__malloc_unlock>
 8006bd6:	f104 000b 	add.w	r0, r4, #11
 8006bda:	1d23      	adds	r3, r4, #4
 8006bdc:	f020 0007 	bic.w	r0, r0, #7
 8006be0:	1ac3      	subs	r3, r0, r3
 8006be2:	d0d3      	beq.n	8006b8c <_malloc_r+0x20>
 8006be4:	425a      	negs	r2, r3
 8006be6:	50e2      	str	r2, [r4, r3]
 8006be8:	e7d0      	b.n	8006b8c <_malloc_r+0x20>
 8006bea:	428c      	cmp	r4, r1
 8006bec:	684b      	ldr	r3, [r1, #4]
 8006bee:	bf16      	itet	ne
 8006bf0:	6063      	strne	r3, [r4, #4]
 8006bf2:	6013      	streq	r3, [r2, #0]
 8006bf4:	460c      	movne	r4, r1
 8006bf6:	e7eb      	b.n	8006bd0 <_malloc_r+0x64>
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	6849      	ldr	r1, [r1, #4]
 8006bfc:	e7cc      	b.n	8006b98 <_malloc_r+0x2c>
 8006bfe:	1cc4      	adds	r4, r0, #3
 8006c00:	f024 0403 	bic.w	r4, r4, #3
 8006c04:	42a0      	cmp	r0, r4
 8006c06:	d005      	beq.n	8006c14 <_malloc_r+0xa8>
 8006c08:	1a21      	subs	r1, r4, r0
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f000 f808 	bl	8006c20 <_sbrk_r>
 8006c10:	3001      	adds	r0, #1
 8006c12:	d0cf      	beq.n	8006bb4 <_malloc_r+0x48>
 8006c14:	6025      	str	r5, [r4, #0]
 8006c16:	e7db      	b.n	8006bd0 <_malloc_r+0x64>
 8006c18:	20000094 	.word	0x20000094
 8006c1c:	20000098 	.word	0x20000098

08006c20 <_sbrk_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4c06      	ldr	r4, [pc, #24]	; (8006c3c <_sbrk_r+0x1c>)
 8006c24:	2300      	movs	r3, #0
 8006c26:	4605      	mov	r5, r0
 8006c28:	4608      	mov	r0, r1
 8006c2a:	6023      	str	r3, [r4, #0]
 8006c2c:	f7fb f898 	bl	8001d60 <_sbrk>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d102      	bne.n	8006c3a <_sbrk_r+0x1a>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	b103      	cbz	r3, 8006c3a <_sbrk_r+0x1a>
 8006c38:	602b      	str	r3, [r5, #0]
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	20000624 	.word	0x20000624

08006c40 <__malloc_lock>:
 8006c40:	4770      	bx	lr

08006c42 <__malloc_unlock>:
 8006c42:	4770      	bx	lr

08006c44 <pow>:
 8006c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c48:	ed2d 8b04 	vpush	{d8-d9}
 8006c4c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8006f20 <pow+0x2dc>
 8006c50:	b08d      	sub	sp, #52	; 0x34
 8006c52:	ec57 6b10 	vmov	r6, r7, d0
 8006c56:	ec55 4b11 	vmov	r4, r5, d1
 8006c5a:	f000 f965 	bl	8006f28 <__ieee754_pow>
 8006c5e:	f999 3000 	ldrsb.w	r3, [r9]
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	3301      	adds	r3, #1
 8006c66:	eeb0 8a40 	vmov.f32	s16, s0
 8006c6a:	eef0 8a60 	vmov.f32	s17, s1
 8006c6e:	46c8      	mov	r8, r9
 8006c70:	d05f      	beq.n	8006d32 <pow+0xee>
 8006c72:	4622      	mov	r2, r4
 8006c74:	462b      	mov	r3, r5
 8006c76:	4620      	mov	r0, r4
 8006c78:	4629      	mov	r1, r5
 8006c7a:	f7f9 ff17 	bl	8000aac <__aeabi_dcmpun>
 8006c7e:	4683      	mov	fp, r0
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d156      	bne.n	8006d32 <pow+0xee>
 8006c84:	4632      	mov	r2, r6
 8006c86:	463b      	mov	r3, r7
 8006c88:	4630      	mov	r0, r6
 8006c8a:	4639      	mov	r1, r7
 8006c8c:	f7f9 ff0e 	bl	8000aac <__aeabi_dcmpun>
 8006c90:	9001      	str	r0, [sp, #4]
 8006c92:	b1e8      	cbz	r0, 8006cd0 <pow+0x8c>
 8006c94:	2200      	movs	r2, #0
 8006c96:	2300      	movs	r3, #0
 8006c98:	4620      	mov	r0, r4
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	f7f9 fed4 	bl	8000a48 <__aeabi_dcmpeq>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d046      	beq.n	8006d32 <pow+0xee>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	9302      	str	r3, [sp, #8]
 8006ca8:	4b96      	ldr	r3, [pc, #600]	; (8006f04 <pow+0x2c0>)
 8006caa:	9303      	str	r3, [sp, #12]
 8006cac:	4b96      	ldr	r3, [pc, #600]	; (8006f08 <pow+0x2c4>)
 8006cae:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006cb8:	9b00      	ldr	r3, [sp, #0]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006cc0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006cc4:	d033      	beq.n	8006d2e <pow+0xea>
 8006cc6:	a802      	add	r0, sp, #8
 8006cc8:	f000 fefd 	bl	8007ac6 <matherr>
 8006ccc:	bb48      	cbnz	r0, 8006d22 <pow+0xde>
 8006cce:	e05d      	b.n	8006d8c <pow+0x148>
 8006cd0:	f04f 0a00 	mov.w	sl, #0
 8006cd4:	f04f 0b00 	mov.w	fp, #0
 8006cd8:	4652      	mov	r2, sl
 8006cda:	465b      	mov	r3, fp
 8006cdc:	4630      	mov	r0, r6
 8006cde:	4639      	mov	r1, r7
 8006ce0:	f7f9 feb2 	bl	8000a48 <__aeabi_dcmpeq>
 8006ce4:	ec4b ab19 	vmov	d9, sl, fp
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d054      	beq.n	8006d96 <pow+0x152>
 8006cec:	4652      	mov	r2, sl
 8006cee:	465b      	mov	r3, fp
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	f7f9 fea8 	bl	8000a48 <__aeabi_dcmpeq>
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	b318      	cbz	r0, 8006d44 <pow+0x100>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	9302      	str	r3, [sp, #8]
 8006d00:	4b80      	ldr	r3, [pc, #512]	; (8006f04 <pow+0x2c0>)
 8006d02:	9303      	str	r3, [sp, #12]
 8006d04:	9b01      	ldr	r3, [sp, #4]
 8006d06:	930a      	str	r3, [sp, #40]	; 0x28
 8006d08:	9b00      	ldr	r3, [sp, #0]
 8006d0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006d0e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006d12:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0d5      	beq.n	8006cc6 <pow+0x82>
 8006d1a:	4b7b      	ldr	r3, [pc, #492]	; (8006f08 <pow+0x2c4>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d24:	b11b      	cbz	r3, 8006d2e <pow+0xea>
 8006d26:	f7ff fe91 	bl	8006a4c <__errno>
 8006d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d2c:	6003      	str	r3, [r0, #0]
 8006d2e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8006d32:	eeb0 0a48 	vmov.f32	s0, s16
 8006d36:	eef0 0a68 	vmov.f32	s1, s17
 8006d3a:	b00d      	add	sp, #52	; 0x34
 8006d3c:	ecbd 8b04 	vpop	{d8-d9}
 8006d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d44:	ec45 4b10 	vmov	d0, r4, r5
 8006d48:	f000 feb5 	bl	8007ab6 <finite>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d0f0      	beq.n	8006d32 <pow+0xee>
 8006d50:	4652      	mov	r2, sl
 8006d52:	465b      	mov	r3, fp
 8006d54:	4620      	mov	r0, r4
 8006d56:	4629      	mov	r1, r5
 8006d58:	f7f9 fe80 	bl	8000a5c <__aeabi_dcmplt>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d0e8      	beq.n	8006d32 <pow+0xee>
 8006d60:	2301      	movs	r3, #1
 8006d62:	9302      	str	r3, [sp, #8]
 8006d64:	4b67      	ldr	r3, [pc, #412]	; (8006f04 <pow+0x2c0>)
 8006d66:	9303      	str	r3, [sp, #12]
 8006d68:	f999 3000 	ldrsb.w	r3, [r9]
 8006d6c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006d70:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006d74:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006d78:	b913      	cbnz	r3, 8006d80 <pow+0x13c>
 8006d7a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006d7e:	e7a2      	b.n	8006cc6 <pow+0x82>
 8006d80:	4962      	ldr	r1, [pc, #392]	; (8006f0c <pow+0x2c8>)
 8006d82:	2000      	movs	r0, #0
 8006d84:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d19c      	bne.n	8006cc6 <pow+0x82>
 8006d8c:	f7ff fe5e 	bl	8006a4c <__errno>
 8006d90:	2321      	movs	r3, #33	; 0x21
 8006d92:	6003      	str	r3, [r0, #0]
 8006d94:	e7c5      	b.n	8006d22 <pow+0xde>
 8006d96:	eeb0 0a48 	vmov.f32	s0, s16
 8006d9a:	eef0 0a68 	vmov.f32	s1, s17
 8006d9e:	f000 fe8a 	bl	8007ab6 <finite>
 8006da2:	9000      	str	r0, [sp, #0]
 8006da4:	2800      	cmp	r0, #0
 8006da6:	f040 8081 	bne.w	8006eac <pow+0x268>
 8006daa:	ec47 6b10 	vmov	d0, r6, r7
 8006dae:	f000 fe82 	bl	8007ab6 <finite>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d07a      	beq.n	8006eac <pow+0x268>
 8006db6:	ec45 4b10 	vmov	d0, r4, r5
 8006dba:	f000 fe7c 	bl	8007ab6 <finite>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d074      	beq.n	8006eac <pow+0x268>
 8006dc2:	ec53 2b18 	vmov	r2, r3, d8
 8006dc6:	ee18 0a10 	vmov	r0, s16
 8006dca:	4619      	mov	r1, r3
 8006dcc:	f7f9 fe6e 	bl	8000aac <__aeabi_dcmpun>
 8006dd0:	f999 9000 	ldrsb.w	r9, [r9]
 8006dd4:	4b4b      	ldr	r3, [pc, #300]	; (8006f04 <pow+0x2c0>)
 8006dd6:	b1b0      	cbz	r0, 8006e06 <pow+0x1c2>
 8006dd8:	2201      	movs	r2, #1
 8006dda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006dde:	9b00      	ldr	r3, [sp, #0]
 8006de0:	930a      	str	r3, [sp, #40]	; 0x28
 8006de2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006de6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006dea:	f1b9 0f00 	cmp.w	r9, #0
 8006dee:	d0c4      	beq.n	8006d7a <pow+0x136>
 8006df0:	4652      	mov	r2, sl
 8006df2:	465b      	mov	r3, fp
 8006df4:	4650      	mov	r0, sl
 8006df6:	4659      	mov	r1, fp
 8006df8:	f7f9 fce8 	bl	80007cc <__aeabi_ddiv>
 8006dfc:	f1b9 0f02 	cmp.w	r9, #2
 8006e00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e04:	e7c1      	b.n	8006d8a <pow+0x146>
 8006e06:	2203      	movs	r2, #3
 8006e08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e0c:	900a      	str	r0, [sp, #40]	; 0x28
 8006e0e:	4629      	mov	r1, r5
 8006e10:	4620      	mov	r0, r4
 8006e12:	2200      	movs	r2, #0
 8006e14:	4b3e      	ldr	r3, [pc, #248]	; (8006f10 <pow+0x2cc>)
 8006e16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006e1a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006e1e:	f7f9 fbab 	bl	8000578 <__aeabi_dmul>
 8006e22:	4604      	mov	r4, r0
 8006e24:	460d      	mov	r5, r1
 8006e26:	f1b9 0f00 	cmp.w	r9, #0
 8006e2a:	d124      	bne.n	8006e76 <pow+0x232>
 8006e2c:	4b39      	ldr	r3, [pc, #228]	; (8006f14 <pow+0x2d0>)
 8006e2e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006e32:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e36:	4630      	mov	r0, r6
 8006e38:	4652      	mov	r2, sl
 8006e3a:	465b      	mov	r3, fp
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	f7f9 fe0d 	bl	8000a5c <__aeabi_dcmplt>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d056      	beq.n	8006ef4 <pow+0x2b0>
 8006e46:	ec45 4b10 	vmov	d0, r4, r5
 8006e4a:	f000 fe49 	bl	8007ae0 <rint>
 8006e4e:	4622      	mov	r2, r4
 8006e50:	462b      	mov	r3, r5
 8006e52:	ec51 0b10 	vmov	r0, r1, d0
 8006e56:	f7f9 fdf7 	bl	8000a48 <__aeabi_dcmpeq>
 8006e5a:	b920      	cbnz	r0, 8006e66 <pow+0x222>
 8006e5c:	4b2e      	ldr	r3, [pc, #184]	; (8006f18 <pow+0x2d4>)
 8006e5e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006e62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e66:	f998 3000 	ldrsb.w	r3, [r8]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d142      	bne.n	8006ef4 <pow+0x2b0>
 8006e6e:	f7ff fded 	bl	8006a4c <__errno>
 8006e72:	2322      	movs	r3, #34	; 0x22
 8006e74:	e78d      	b.n	8006d92 <pow+0x14e>
 8006e76:	4b29      	ldr	r3, [pc, #164]	; (8006f1c <pow+0x2d8>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e7e:	4630      	mov	r0, r6
 8006e80:	4652      	mov	r2, sl
 8006e82:	465b      	mov	r3, fp
 8006e84:	4639      	mov	r1, r7
 8006e86:	f7f9 fde9 	bl	8000a5c <__aeabi_dcmplt>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d0eb      	beq.n	8006e66 <pow+0x222>
 8006e8e:	ec45 4b10 	vmov	d0, r4, r5
 8006e92:	f000 fe25 	bl	8007ae0 <rint>
 8006e96:	4622      	mov	r2, r4
 8006e98:	462b      	mov	r3, r5
 8006e9a:	ec51 0b10 	vmov	r0, r1, d0
 8006e9e:	f7f9 fdd3 	bl	8000a48 <__aeabi_dcmpeq>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d1df      	bne.n	8006e66 <pow+0x222>
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	4b18      	ldr	r3, [pc, #96]	; (8006f0c <pow+0x2c8>)
 8006eaa:	e7da      	b.n	8006e62 <pow+0x21e>
 8006eac:	2200      	movs	r2, #0
 8006eae:	2300      	movs	r3, #0
 8006eb0:	ec51 0b18 	vmov	r0, r1, d8
 8006eb4:	f7f9 fdc8 	bl	8000a48 <__aeabi_dcmpeq>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	f43f af3a 	beq.w	8006d32 <pow+0xee>
 8006ebe:	ec47 6b10 	vmov	d0, r6, r7
 8006ec2:	f000 fdf8 	bl	8007ab6 <finite>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f43f af33 	beq.w	8006d32 <pow+0xee>
 8006ecc:	ec45 4b10 	vmov	d0, r4, r5
 8006ed0:	f000 fdf1 	bl	8007ab6 <finite>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	f43f af2c 	beq.w	8006d32 <pow+0xee>
 8006eda:	2304      	movs	r3, #4
 8006edc:	9302      	str	r3, [sp, #8]
 8006ede:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <pow+0x2c0>)
 8006ee0:	9303      	str	r3, [sp, #12]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	930a      	str	r3, [sp, #40]	; 0x28
 8006ee6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006eea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006eee:	ed8d 9b08 	vstr	d9, [sp, #32]
 8006ef2:	e7b8      	b.n	8006e66 <pow+0x222>
 8006ef4:	a802      	add	r0, sp, #8
 8006ef6:	f000 fde6 	bl	8007ac6 <matherr>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	f47f af11 	bne.w	8006d22 <pow+0xde>
 8006f00:	e7b5      	b.n	8006e6e <pow+0x22a>
 8006f02:	bf00      	nop
 8006f04:	0801e080 	.word	0x0801e080
 8006f08:	3ff00000 	.word	0x3ff00000
 8006f0c:	fff00000 	.word	0xfff00000
 8006f10:	3fe00000 	.word	0x3fe00000
 8006f14:	47efffff 	.word	0x47efffff
 8006f18:	c7efffff 	.word	0xc7efffff
 8006f1c:	7ff00000 	.word	0x7ff00000
 8006f20:	20000070 	.word	0x20000070
 8006f24:	00000000 	.word	0x00000000

08006f28 <__ieee754_pow>:
 8006f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2c:	b091      	sub	sp, #68	; 0x44
 8006f2e:	ed8d 1b00 	vstr	d1, [sp]
 8006f32:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006f36:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006f3a:	ea58 0302 	orrs.w	r3, r8, r2
 8006f3e:	ec57 6b10 	vmov	r6, r7, d0
 8006f42:	f000 84be 	beq.w	80078c2 <__ieee754_pow+0x99a>
 8006f46:	4b7a      	ldr	r3, [pc, #488]	; (8007130 <__ieee754_pow+0x208>)
 8006f48:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006f4c:	429c      	cmp	r4, r3
 8006f4e:	463d      	mov	r5, r7
 8006f50:	ee10 aa10 	vmov	sl, s0
 8006f54:	dc09      	bgt.n	8006f6a <__ieee754_pow+0x42>
 8006f56:	d103      	bne.n	8006f60 <__ieee754_pow+0x38>
 8006f58:	b93e      	cbnz	r6, 8006f6a <__ieee754_pow+0x42>
 8006f5a:	45a0      	cmp	r8, r4
 8006f5c:	dc0d      	bgt.n	8006f7a <__ieee754_pow+0x52>
 8006f5e:	e001      	b.n	8006f64 <__ieee754_pow+0x3c>
 8006f60:	4598      	cmp	r8, r3
 8006f62:	dc02      	bgt.n	8006f6a <__ieee754_pow+0x42>
 8006f64:	4598      	cmp	r8, r3
 8006f66:	d10e      	bne.n	8006f86 <__ieee754_pow+0x5e>
 8006f68:	b16a      	cbz	r2, 8006f86 <__ieee754_pow+0x5e>
 8006f6a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006f6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006f72:	ea54 030a 	orrs.w	r3, r4, sl
 8006f76:	f000 84a4 	beq.w	80078c2 <__ieee754_pow+0x99a>
 8006f7a:	486e      	ldr	r0, [pc, #440]	; (8007134 <__ieee754_pow+0x20c>)
 8006f7c:	b011      	add	sp, #68	; 0x44
 8006f7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f82:	f000 bda5 	b.w	8007ad0 <nan>
 8006f86:	2d00      	cmp	r5, #0
 8006f88:	da53      	bge.n	8007032 <__ieee754_pow+0x10a>
 8006f8a:	4b6b      	ldr	r3, [pc, #428]	; (8007138 <__ieee754_pow+0x210>)
 8006f8c:	4598      	cmp	r8, r3
 8006f8e:	dc4d      	bgt.n	800702c <__ieee754_pow+0x104>
 8006f90:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006f94:	4598      	cmp	r8, r3
 8006f96:	dd4c      	ble.n	8007032 <__ieee754_pow+0x10a>
 8006f98:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006f9c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006fa0:	2b14      	cmp	r3, #20
 8006fa2:	dd26      	ble.n	8006ff2 <__ieee754_pow+0xca>
 8006fa4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006fa8:	fa22 f103 	lsr.w	r1, r2, r3
 8006fac:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d13e      	bne.n	8007032 <__ieee754_pow+0x10a>
 8006fb4:	f001 0101 	and.w	r1, r1, #1
 8006fb8:	f1c1 0b02 	rsb	fp, r1, #2
 8006fbc:	2a00      	cmp	r2, #0
 8006fbe:	d15b      	bne.n	8007078 <__ieee754_pow+0x150>
 8006fc0:	4b5b      	ldr	r3, [pc, #364]	; (8007130 <__ieee754_pow+0x208>)
 8006fc2:	4598      	cmp	r8, r3
 8006fc4:	d124      	bne.n	8007010 <__ieee754_pow+0xe8>
 8006fc6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006fca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006fce:	ea53 030a 	orrs.w	r3, r3, sl
 8006fd2:	f000 8476 	beq.w	80078c2 <__ieee754_pow+0x99a>
 8006fd6:	4b59      	ldr	r3, [pc, #356]	; (800713c <__ieee754_pow+0x214>)
 8006fd8:	429c      	cmp	r4, r3
 8006fda:	dd2d      	ble.n	8007038 <__ieee754_pow+0x110>
 8006fdc:	f1b9 0f00 	cmp.w	r9, #0
 8006fe0:	f280 8473 	bge.w	80078ca <__ieee754_pow+0x9a2>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	ec41 0b10 	vmov	d0, r0, r1
 8006fec:	b011      	add	sp, #68	; 0x44
 8006fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	d13e      	bne.n	8007074 <__ieee754_pow+0x14c>
 8006ff6:	f1c3 0314 	rsb	r3, r3, #20
 8006ffa:	fa48 f103 	asr.w	r1, r8, r3
 8006ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8007002:	4543      	cmp	r3, r8
 8007004:	f040 8469 	bne.w	80078da <__ieee754_pow+0x9b2>
 8007008:	f001 0101 	and.w	r1, r1, #1
 800700c:	f1c1 0b02 	rsb	fp, r1, #2
 8007010:	4b4b      	ldr	r3, [pc, #300]	; (8007140 <__ieee754_pow+0x218>)
 8007012:	4598      	cmp	r8, r3
 8007014:	d118      	bne.n	8007048 <__ieee754_pow+0x120>
 8007016:	f1b9 0f00 	cmp.w	r9, #0
 800701a:	f280 845a 	bge.w	80078d2 <__ieee754_pow+0x9aa>
 800701e:	4948      	ldr	r1, [pc, #288]	; (8007140 <__ieee754_pow+0x218>)
 8007020:	4632      	mov	r2, r6
 8007022:	463b      	mov	r3, r7
 8007024:	2000      	movs	r0, #0
 8007026:	f7f9 fbd1 	bl	80007cc <__aeabi_ddiv>
 800702a:	e7dd      	b.n	8006fe8 <__ieee754_pow+0xc0>
 800702c:	f04f 0b02 	mov.w	fp, #2
 8007030:	e7c4      	b.n	8006fbc <__ieee754_pow+0x94>
 8007032:	f04f 0b00 	mov.w	fp, #0
 8007036:	e7c1      	b.n	8006fbc <__ieee754_pow+0x94>
 8007038:	f1b9 0f00 	cmp.w	r9, #0
 800703c:	dad2      	bge.n	8006fe4 <__ieee754_pow+0xbc>
 800703e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007042:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007046:	e7cf      	b.n	8006fe8 <__ieee754_pow+0xc0>
 8007048:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800704c:	d106      	bne.n	800705c <__ieee754_pow+0x134>
 800704e:	4632      	mov	r2, r6
 8007050:	463b      	mov	r3, r7
 8007052:	4610      	mov	r0, r2
 8007054:	4619      	mov	r1, r3
 8007056:	f7f9 fa8f 	bl	8000578 <__aeabi_dmul>
 800705a:	e7c5      	b.n	8006fe8 <__ieee754_pow+0xc0>
 800705c:	4b39      	ldr	r3, [pc, #228]	; (8007144 <__ieee754_pow+0x21c>)
 800705e:	4599      	cmp	r9, r3
 8007060:	d10a      	bne.n	8007078 <__ieee754_pow+0x150>
 8007062:	2d00      	cmp	r5, #0
 8007064:	db08      	blt.n	8007078 <__ieee754_pow+0x150>
 8007066:	ec47 6b10 	vmov	d0, r6, r7
 800706a:	b011      	add	sp, #68	; 0x44
 800706c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007070:	f000 bc68 	b.w	8007944 <__ieee754_sqrt>
 8007074:	f04f 0b00 	mov.w	fp, #0
 8007078:	ec47 6b10 	vmov	d0, r6, r7
 800707c:	f000 fd12 	bl	8007aa4 <fabs>
 8007080:	ec51 0b10 	vmov	r0, r1, d0
 8007084:	f1ba 0f00 	cmp.w	sl, #0
 8007088:	d127      	bne.n	80070da <__ieee754_pow+0x1b2>
 800708a:	b124      	cbz	r4, 8007096 <__ieee754_pow+0x16e>
 800708c:	4b2c      	ldr	r3, [pc, #176]	; (8007140 <__ieee754_pow+0x218>)
 800708e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007092:	429a      	cmp	r2, r3
 8007094:	d121      	bne.n	80070da <__ieee754_pow+0x1b2>
 8007096:	f1b9 0f00 	cmp.w	r9, #0
 800709a:	da05      	bge.n	80070a8 <__ieee754_pow+0x180>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	2000      	movs	r0, #0
 80070a2:	4927      	ldr	r1, [pc, #156]	; (8007140 <__ieee754_pow+0x218>)
 80070a4:	f7f9 fb92 	bl	80007cc <__aeabi_ddiv>
 80070a8:	2d00      	cmp	r5, #0
 80070aa:	da9d      	bge.n	8006fe8 <__ieee754_pow+0xc0>
 80070ac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80070b0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80070b4:	ea54 030b 	orrs.w	r3, r4, fp
 80070b8:	d108      	bne.n	80070cc <__ieee754_pow+0x1a4>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	4610      	mov	r0, r2
 80070c0:	4619      	mov	r1, r3
 80070c2:	f7f9 f8a1 	bl	8000208 <__aeabi_dsub>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	e7ac      	b.n	8007026 <__ieee754_pow+0xfe>
 80070cc:	f1bb 0f01 	cmp.w	fp, #1
 80070d0:	d18a      	bne.n	8006fe8 <__ieee754_pow+0xc0>
 80070d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070d6:	4619      	mov	r1, r3
 80070d8:	e786      	b.n	8006fe8 <__ieee754_pow+0xc0>
 80070da:	0fed      	lsrs	r5, r5, #31
 80070dc:	1e6b      	subs	r3, r5, #1
 80070de:	930d      	str	r3, [sp, #52]	; 0x34
 80070e0:	ea5b 0303 	orrs.w	r3, fp, r3
 80070e4:	d102      	bne.n	80070ec <__ieee754_pow+0x1c4>
 80070e6:	4632      	mov	r2, r6
 80070e8:	463b      	mov	r3, r7
 80070ea:	e7e8      	b.n	80070be <__ieee754_pow+0x196>
 80070ec:	4b16      	ldr	r3, [pc, #88]	; (8007148 <__ieee754_pow+0x220>)
 80070ee:	4598      	cmp	r8, r3
 80070f0:	f340 80fe 	ble.w	80072f0 <__ieee754_pow+0x3c8>
 80070f4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80070f8:	4598      	cmp	r8, r3
 80070fa:	dd0a      	ble.n	8007112 <__ieee754_pow+0x1ea>
 80070fc:	4b0f      	ldr	r3, [pc, #60]	; (800713c <__ieee754_pow+0x214>)
 80070fe:	429c      	cmp	r4, r3
 8007100:	dc0d      	bgt.n	800711e <__ieee754_pow+0x1f6>
 8007102:	f1b9 0f00 	cmp.w	r9, #0
 8007106:	f6bf af6d 	bge.w	8006fe4 <__ieee754_pow+0xbc>
 800710a:	a307      	add	r3, pc, #28	; (adr r3, 8007128 <__ieee754_pow+0x200>)
 800710c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007110:	e79f      	b.n	8007052 <__ieee754_pow+0x12a>
 8007112:	4b0e      	ldr	r3, [pc, #56]	; (800714c <__ieee754_pow+0x224>)
 8007114:	429c      	cmp	r4, r3
 8007116:	ddf4      	ble.n	8007102 <__ieee754_pow+0x1da>
 8007118:	4b09      	ldr	r3, [pc, #36]	; (8007140 <__ieee754_pow+0x218>)
 800711a:	429c      	cmp	r4, r3
 800711c:	dd18      	ble.n	8007150 <__ieee754_pow+0x228>
 800711e:	f1b9 0f00 	cmp.w	r9, #0
 8007122:	dcf2      	bgt.n	800710a <__ieee754_pow+0x1e2>
 8007124:	e75e      	b.n	8006fe4 <__ieee754_pow+0xbc>
 8007126:	bf00      	nop
 8007128:	8800759c 	.word	0x8800759c
 800712c:	7e37e43c 	.word	0x7e37e43c
 8007130:	7ff00000 	.word	0x7ff00000
 8007134:	0801e083 	.word	0x0801e083
 8007138:	433fffff 	.word	0x433fffff
 800713c:	3fefffff 	.word	0x3fefffff
 8007140:	3ff00000 	.word	0x3ff00000
 8007144:	3fe00000 	.word	0x3fe00000
 8007148:	41e00000 	.word	0x41e00000
 800714c:	3feffffe 	.word	0x3feffffe
 8007150:	2200      	movs	r2, #0
 8007152:	4b63      	ldr	r3, [pc, #396]	; (80072e0 <__ieee754_pow+0x3b8>)
 8007154:	f7f9 f858 	bl	8000208 <__aeabi_dsub>
 8007158:	a355      	add	r3, pc, #340	; (adr r3, 80072b0 <__ieee754_pow+0x388>)
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	4604      	mov	r4, r0
 8007160:	460d      	mov	r5, r1
 8007162:	f7f9 fa09 	bl	8000578 <__aeabi_dmul>
 8007166:	a354      	add	r3, pc, #336	; (adr r3, 80072b8 <__ieee754_pow+0x390>)
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	4606      	mov	r6, r0
 800716e:	460f      	mov	r7, r1
 8007170:	4620      	mov	r0, r4
 8007172:	4629      	mov	r1, r5
 8007174:	f7f9 fa00 	bl	8000578 <__aeabi_dmul>
 8007178:	2200      	movs	r2, #0
 800717a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800717e:	4b59      	ldr	r3, [pc, #356]	; (80072e4 <__ieee754_pow+0x3bc>)
 8007180:	4620      	mov	r0, r4
 8007182:	4629      	mov	r1, r5
 8007184:	f7f9 f9f8 	bl	8000578 <__aeabi_dmul>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	a14c      	add	r1, pc, #304	; (adr r1, 80072c0 <__ieee754_pow+0x398>)
 800718e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007192:	f7f9 f839 	bl	8000208 <__aeabi_dsub>
 8007196:	4622      	mov	r2, r4
 8007198:	462b      	mov	r3, r5
 800719a:	f7f9 f9ed 	bl	8000578 <__aeabi_dmul>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	2000      	movs	r0, #0
 80071a4:	4950      	ldr	r1, [pc, #320]	; (80072e8 <__ieee754_pow+0x3c0>)
 80071a6:	f7f9 f82f 	bl	8000208 <__aeabi_dsub>
 80071aa:	4622      	mov	r2, r4
 80071ac:	462b      	mov	r3, r5
 80071ae:	4680      	mov	r8, r0
 80071b0:	4689      	mov	r9, r1
 80071b2:	4620      	mov	r0, r4
 80071b4:	4629      	mov	r1, r5
 80071b6:	f7f9 f9df 	bl	8000578 <__aeabi_dmul>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4640      	mov	r0, r8
 80071c0:	4649      	mov	r1, r9
 80071c2:	f7f9 f9d9 	bl	8000578 <__aeabi_dmul>
 80071c6:	a340      	add	r3, pc, #256	; (adr r3, 80072c8 <__ieee754_pow+0x3a0>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f7f9 f9d4 	bl	8000578 <__aeabi_dmul>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071d8:	f7f9 f816 	bl	8000208 <__aeabi_dsub>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4604      	mov	r4, r0
 80071e2:	460d      	mov	r5, r1
 80071e4:	4630      	mov	r0, r6
 80071e6:	4639      	mov	r1, r7
 80071e8:	f7f9 f810 	bl	800020c <__adddf3>
 80071ec:	2000      	movs	r0, #0
 80071ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071f2:	4632      	mov	r2, r6
 80071f4:	463b      	mov	r3, r7
 80071f6:	f7f9 f807 	bl	8000208 <__aeabi_dsub>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4620      	mov	r0, r4
 8007200:	4629      	mov	r1, r5
 8007202:	f7f9 f801 	bl	8000208 <__aeabi_dsub>
 8007206:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007208:	f10b 33ff 	add.w	r3, fp, #4294967295
 800720c:	4313      	orrs	r3, r2
 800720e:	4606      	mov	r6, r0
 8007210:	460f      	mov	r7, r1
 8007212:	f040 81eb 	bne.w	80075ec <__ieee754_pow+0x6c4>
 8007216:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80072d0 <__ieee754_pow+0x3a8>
 800721a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800721e:	2400      	movs	r4, #0
 8007220:	4622      	mov	r2, r4
 8007222:	462b      	mov	r3, r5
 8007224:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007228:	ed8d 7b02 	vstr	d7, [sp, #8]
 800722c:	f7f8 ffec 	bl	8000208 <__aeabi_dsub>
 8007230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007234:	f7f9 f9a0 	bl	8000578 <__aeabi_dmul>
 8007238:	e9dd 2300 	ldrd	r2, r3, [sp]
 800723c:	4680      	mov	r8, r0
 800723e:	4689      	mov	r9, r1
 8007240:	4630      	mov	r0, r6
 8007242:	4639      	mov	r1, r7
 8007244:	f7f9 f998 	bl	8000578 <__aeabi_dmul>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4640      	mov	r0, r8
 800724e:	4649      	mov	r1, r9
 8007250:	f7f8 ffdc 	bl	800020c <__adddf3>
 8007254:	4622      	mov	r2, r4
 8007256:	462b      	mov	r3, r5
 8007258:	4680      	mov	r8, r0
 800725a:	4689      	mov	r9, r1
 800725c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007260:	f7f9 f98a 	bl	8000578 <__aeabi_dmul>
 8007264:	460b      	mov	r3, r1
 8007266:	4604      	mov	r4, r0
 8007268:	460d      	mov	r5, r1
 800726a:	4602      	mov	r2, r0
 800726c:	4649      	mov	r1, r9
 800726e:	4640      	mov	r0, r8
 8007270:	e9cd 4500 	strd	r4, r5, [sp]
 8007274:	f7f8 ffca 	bl	800020c <__adddf3>
 8007278:	4b1c      	ldr	r3, [pc, #112]	; (80072ec <__ieee754_pow+0x3c4>)
 800727a:	4299      	cmp	r1, r3
 800727c:	4606      	mov	r6, r0
 800727e:	460f      	mov	r7, r1
 8007280:	468b      	mov	fp, r1
 8007282:	f340 82f7 	ble.w	8007874 <__ieee754_pow+0x94c>
 8007286:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800728a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800728e:	4303      	orrs	r3, r0
 8007290:	f000 81ea 	beq.w	8007668 <__ieee754_pow+0x740>
 8007294:	a310      	add	r3, pc, #64	; (adr r3, 80072d8 <__ieee754_pow+0x3b0>)
 8007296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800729e:	f7f9 f96b 	bl	8000578 <__aeabi_dmul>
 80072a2:	a30d      	add	r3, pc, #52	; (adr r3, 80072d8 <__ieee754_pow+0x3b0>)
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	e6d5      	b.n	8007056 <__ieee754_pow+0x12e>
 80072aa:	bf00      	nop
 80072ac:	f3af 8000 	nop.w
 80072b0:	60000000 	.word	0x60000000
 80072b4:	3ff71547 	.word	0x3ff71547
 80072b8:	f85ddf44 	.word	0xf85ddf44
 80072bc:	3e54ae0b 	.word	0x3e54ae0b
 80072c0:	55555555 	.word	0x55555555
 80072c4:	3fd55555 	.word	0x3fd55555
 80072c8:	652b82fe 	.word	0x652b82fe
 80072cc:	3ff71547 	.word	0x3ff71547
 80072d0:	00000000 	.word	0x00000000
 80072d4:	bff00000 	.word	0xbff00000
 80072d8:	8800759c 	.word	0x8800759c
 80072dc:	7e37e43c 	.word	0x7e37e43c
 80072e0:	3ff00000 	.word	0x3ff00000
 80072e4:	3fd00000 	.word	0x3fd00000
 80072e8:	3fe00000 	.word	0x3fe00000
 80072ec:	408fffff 	.word	0x408fffff
 80072f0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	da05      	bge.n	8007306 <__ieee754_pow+0x3de>
 80072fa:	4bd3      	ldr	r3, [pc, #844]	; (8007648 <__ieee754_pow+0x720>)
 80072fc:	f7f9 f93c 	bl	8000578 <__aeabi_dmul>
 8007300:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007304:	460c      	mov	r4, r1
 8007306:	1523      	asrs	r3, r4, #20
 8007308:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800730c:	4413      	add	r3, r2
 800730e:	9309      	str	r3, [sp, #36]	; 0x24
 8007310:	4bce      	ldr	r3, [pc, #824]	; (800764c <__ieee754_pow+0x724>)
 8007312:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007316:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800731a:	429c      	cmp	r4, r3
 800731c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007320:	dd08      	ble.n	8007334 <__ieee754_pow+0x40c>
 8007322:	4bcb      	ldr	r3, [pc, #812]	; (8007650 <__ieee754_pow+0x728>)
 8007324:	429c      	cmp	r4, r3
 8007326:	f340 815e 	ble.w	80075e6 <__ieee754_pow+0x6be>
 800732a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800732c:	3301      	adds	r3, #1
 800732e:	9309      	str	r3, [sp, #36]	; 0x24
 8007330:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007334:	f04f 0a00 	mov.w	sl, #0
 8007338:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800733c:	930c      	str	r3, [sp, #48]	; 0x30
 800733e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007340:	4bc4      	ldr	r3, [pc, #784]	; (8007654 <__ieee754_pow+0x72c>)
 8007342:	4413      	add	r3, r2
 8007344:	ed93 7b00 	vldr	d7, [r3]
 8007348:	4629      	mov	r1, r5
 800734a:	ec53 2b17 	vmov	r2, r3, d7
 800734e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007352:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007356:	f7f8 ff57 	bl	8000208 <__aeabi_dsub>
 800735a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800735e:	4606      	mov	r6, r0
 8007360:	460f      	mov	r7, r1
 8007362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007366:	f7f8 ff51 	bl	800020c <__adddf3>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	2000      	movs	r0, #0
 8007370:	49b9      	ldr	r1, [pc, #740]	; (8007658 <__ieee754_pow+0x730>)
 8007372:	f7f9 fa2b 	bl	80007cc <__aeabi_ddiv>
 8007376:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	4630      	mov	r0, r6
 8007380:	4639      	mov	r1, r7
 8007382:	f7f9 f8f9 	bl	8000578 <__aeabi_dmul>
 8007386:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800738a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800738e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007392:	2300      	movs	r3, #0
 8007394:	9302      	str	r3, [sp, #8]
 8007396:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800739a:	106d      	asrs	r5, r5, #1
 800739c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80073a0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80073a4:	2200      	movs	r2, #0
 80073a6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80073aa:	4640      	mov	r0, r8
 80073ac:	4649      	mov	r1, r9
 80073ae:	4614      	mov	r4, r2
 80073b0:	461d      	mov	r5, r3
 80073b2:	f7f9 f8e1 	bl	8000578 <__aeabi_dmul>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	4630      	mov	r0, r6
 80073bc:	4639      	mov	r1, r7
 80073be:	f7f8 ff23 	bl	8000208 <__aeabi_dsub>
 80073c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073c6:	4606      	mov	r6, r0
 80073c8:	460f      	mov	r7, r1
 80073ca:	4620      	mov	r0, r4
 80073cc:	4629      	mov	r1, r5
 80073ce:	f7f8 ff1b 	bl	8000208 <__aeabi_dsub>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80073da:	f7f8 ff15 	bl	8000208 <__aeabi_dsub>
 80073de:	4642      	mov	r2, r8
 80073e0:	464b      	mov	r3, r9
 80073e2:	f7f9 f8c9 	bl	8000578 <__aeabi_dmul>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4630      	mov	r0, r6
 80073ec:	4639      	mov	r1, r7
 80073ee:	f7f8 ff0b 	bl	8000208 <__aeabi_dsub>
 80073f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80073f6:	f7f9 f8bf 	bl	8000578 <__aeabi_dmul>
 80073fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007402:	4610      	mov	r0, r2
 8007404:	4619      	mov	r1, r3
 8007406:	f7f9 f8b7 	bl	8000578 <__aeabi_dmul>
 800740a:	a37b      	add	r3, pc, #492	; (adr r3, 80075f8 <__ieee754_pow+0x6d0>)
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	4604      	mov	r4, r0
 8007412:	460d      	mov	r5, r1
 8007414:	f7f9 f8b0 	bl	8000578 <__aeabi_dmul>
 8007418:	a379      	add	r3, pc, #484	; (adr r3, 8007600 <__ieee754_pow+0x6d8>)
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	f7f8 fef5 	bl	800020c <__adddf3>
 8007422:	4622      	mov	r2, r4
 8007424:	462b      	mov	r3, r5
 8007426:	f7f9 f8a7 	bl	8000578 <__aeabi_dmul>
 800742a:	a377      	add	r3, pc, #476	; (adr r3, 8007608 <__ieee754_pow+0x6e0>)
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	f7f8 feec 	bl	800020c <__adddf3>
 8007434:	4622      	mov	r2, r4
 8007436:	462b      	mov	r3, r5
 8007438:	f7f9 f89e 	bl	8000578 <__aeabi_dmul>
 800743c:	a374      	add	r3, pc, #464	; (adr r3, 8007610 <__ieee754_pow+0x6e8>)
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	f7f8 fee3 	bl	800020c <__adddf3>
 8007446:	4622      	mov	r2, r4
 8007448:	462b      	mov	r3, r5
 800744a:	f7f9 f895 	bl	8000578 <__aeabi_dmul>
 800744e:	a372      	add	r3, pc, #456	; (adr r3, 8007618 <__ieee754_pow+0x6f0>)
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f7f8 feda 	bl	800020c <__adddf3>
 8007458:	4622      	mov	r2, r4
 800745a:	462b      	mov	r3, r5
 800745c:	f7f9 f88c 	bl	8000578 <__aeabi_dmul>
 8007460:	a36f      	add	r3, pc, #444	; (adr r3, 8007620 <__ieee754_pow+0x6f8>)
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	f7f8 fed1 	bl	800020c <__adddf3>
 800746a:	4622      	mov	r2, r4
 800746c:	4606      	mov	r6, r0
 800746e:	460f      	mov	r7, r1
 8007470:	462b      	mov	r3, r5
 8007472:	4620      	mov	r0, r4
 8007474:	4629      	mov	r1, r5
 8007476:	f7f9 f87f 	bl	8000578 <__aeabi_dmul>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4630      	mov	r0, r6
 8007480:	4639      	mov	r1, r7
 8007482:	f7f9 f879 	bl	8000578 <__aeabi_dmul>
 8007486:	4642      	mov	r2, r8
 8007488:	4604      	mov	r4, r0
 800748a:	460d      	mov	r5, r1
 800748c:	464b      	mov	r3, r9
 800748e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007492:	f7f8 febb 	bl	800020c <__adddf3>
 8007496:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800749a:	f7f9 f86d 	bl	8000578 <__aeabi_dmul>
 800749e:	4622      	mov	r2, r4
 80074a0:	462b      	mov	r3, r5
 80074a2:	f7f8 feb3 	bl	800020c <__adddf3>
 80074a6:	4642      	mov	r2, r8
 80074a8:	4606      	mov	r6, r0
 80074aa:	460f      	mov	r7, r1
 80074ac:	464b      	mov	r3, r9
 80074ae:	4640      	mov	r0, r8
 80074b0:	4649      	mov	r1, r9
 80074b2:	f7f9 f861 	bl	8000578 <__aeabi_dmul>
 80074b6:	2200      	movs	r2, #0
 80074b8:	4b68      	ldr	r3, [pc, #416]	; (800765c <__ieee754_pow+0x734>)
 80074ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80074be:	f7f8 fea5 	bl	800020c <__adddf3>
 80074c2:	4632      	mov	r2, r6
 80074c4:	463b      	mov	r3, r7
 80074c6:	f7f8 fea1 	bl	800020c <__adddf3>
 80074ca:	9802      	ldr	r0, [sp, #8]
 80074cc:	460d      	mov	r5, r1
 80074ce:	4604      	mov	r4, r0
 80074d0:	4602      	mov	r2, r0
 80074d2:	460b      	mov	r3, r1
 80074d4:	4640      	mov	r0, r8
 80074d6:	4649      	mov	r1, r9
 80074d8:	f7f9 f84e 	bl	8000578 <__aeabi_dmul>
 80074dc:	2200      	movs	r2, #0
 80074de:	4680      	mov	r8, r0
 80074e0:	4689      	mov	r9, r1
 80074e2:	4b5e      	ldr	r3, [pc, #376]	; (800765c <__ieee754_pow+0x734>)
 80074e4:	4620      	mov	r0, r4
 80074e6:	4629      	mov	r1, r5
 80074e8:	f7f8 fe8e 	bl	8000208 <__aeabi_dsub>
 80074ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80074f0:	f7f8 fe8a 	bl	8000208 <__aeabi_dsub>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	4630      	mov	r0, r6
 80074fa:	4639      	mov	r1, r7
 80074fc:	f7f8 fe84 	bl	8000208 <__aeabi_dsub>
 8007500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007504:	f7f9 f838 	bl	8000578 <__aeabi_dmul>
 8007508:	4622      	mov	r2, r4
 800750a:	4606      	mov	r6, r0
 800750c:	460f      	mov	r7, r1
 800750e:	462b      	mov	r3, r5
 8007510:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007514:	f7f9 f830 	bl	8000578 <__aeabi_dmul>
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	4630      	mov	r0, r6
 800751e:	4639      	mov	r1, r7
 8007520:	f7f8 fe74 	bl	800020c <__adddf3>
 8007524:	4606      	mov	r6, r0
 8007526:	460f      	mov	r7, r1
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4640      	mov	r0, r8
 800752e:	4649      	mov	r1, r9
 8007530:	f7f8 fe6c 	bl	800020c <__adddf3>
 8007534:	9802      	ldr	r0, [sp, #8]
 8007536:	a33c      	add	r3, pc, #240	; (adr r3, 8007628 <__ieee754_pow+0x700>)
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	4604      	mov	r4, r0
 800753e:	460d      	mov	r5, r1
 8007540:	f7f9 f81a 	bl	8000578 <__aeabi_dmul>
 8007544:	4642      	mov	r2, r8
 8007546:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800754a:	464b      	mov	r3, r9
 800754c:	4620      	mov	r0, r4
 800754e:	4629      	mov	r1, r5
 8007550:	f7f8 fe5a 	bl	8000208 <__aeabi_dsub>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4630      	mov	r0, r6
 800755a:	4639      	mov	r1, r7
 800755c:	f7f8 fe54 	bl	8000208 <__aeabi_dsub>
 8007560:	a333      	add	r3, pc, #204	; (adr r3, 8007630 <__ieee754_pow+0x708>)
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	f7f9 f807 	bl	8000578 <__aeabi_dmul>
 800756a:	a333      	add	r3, pc, #204	; (adr r3, 8007638 <__ieee754_pow+0x710>)
 800756c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007570:	4606      	mov	r6, r0
 8007572:	460f      	mov	r7, r1
 8007574:	4620      	mov	r0, r4
 8007576:	4629      	mov	r1, r5
 8007578:	f7f8 fffe 	bl	8000578 <__aeabi_dmul>
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	4630      	mov	r0, r6
 8007582:	4639      	mov	r1, r7
 8007584:	f7f8 fe42 	bl	800020c <__adddf3>
 8007588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800758a:	4b35      	ldr	r3, [pc, #212]	; (8007660 <__ieee754_pow+0x738>)
 800758c:	4413      	add	r3, r2
 800758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007592:	f7f8 fe3b 	bl	800020c <__adddf3>
 8007596:	4604      	mov	r4, r0
 8007598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800759a:	460d      	mov	r5, r1
 800759c:	f7f8 ff82 	bl	80004a4 <__aeabi_i2d>
 80075a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075a2:	4b30      	ldr	r3, [pc, #192]	; (8007664 <__ieee754_pow+0x73c>)
 80075a4:	4413      	add	r3, r2
 80075a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075aa:	4606      	mov	r6, r0
 80075ac:	460f      	mov	r7, r1
 80075ae:	4622      	mov	r2, r4
 80075b0:	462b      	mov	r3, r5
 80075b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075b6:	f7f8 fe29 	bl	800020c <__adddf3>
 80075ba:	4642      	mov	r2, r8
 80075bc:	464b      	mov	r3, r9
 80075be:	f7f8 fe25 	bl	800020c <__adddf3>
 80075c2:	4632      	mov	r2, r6
 80075c4:	463b      	mov	r3, r7
 80075c6:	f7f8 fe21 	bl	800020c <__adddf3>
 80075ca:	9802      	ldr	r0, [sp, #8]
 80075cc:	4632      	mov	r2, r6
 80075ce:	463b      	mov	r3, r7
 80075d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075d4:	f7f8 fe18 	bl	8000208 <__aeabi_dsub>
 80075d8:	4642      	mov	r2, r8
 80075da:	464b      	mov	r3, r9
 80075dc:	f7f8 fe14 	bl	8000208 <__aeabi_dsub>
 80075e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075e4:	e607      	b.n	80071f6 <__ieee754_pow+0x2ce>
 80075e6:	f04f 0a01 	mov.w	sl, #1
 80075ea:	e6a5      	b.n	8007338 <__ieee754_pow+0x410>
 80075ec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007640 <__ieee754_pow+0x718>
 80075f0:	e613      	b.n	800721a <__ieee754_pow+0x2f2>
 80075f2:	bf00      	nop
 80075f4:	f3af 8000 	nop.w
 80075f8:	4a454eef 	.word	0x4a454eef
 80075fc:	3fca7e28 	.word	0x3fca7e28
 8007600:	93c9db65 	.word	0x93c9db65
 8007604:	3fcd864a 	.word	0x3fcd864a
 8007608:	a91d4101 	.word	0xa91d4101
 800760c:	3fd17460 	.word	0x3fd17460
 8007610:	518f264d 	.word	0x518f264d
 8007614:	3fd55555 	.word	0x3fd55555
 8007618:	db6fabff 	.word	0xdb6fabff
 800761c:	3fdb6db6 	.word	0x3fdb6db6
 8007620:	33333303 	.word	0x33333303
 8007624:	3fe33333 	.word	0x3fe33333
 8007628:	e0000000 	.word	0xe0000000
 800762c:	3feec709 	.word	0x3feec709
 8007630:	dc3a03fd 	.word	0xdc3a03fd
 8007634:	3feec709 	.word	0x3feec709
 8007638:	145b01f5 	.word	0x145b01f5
 800763c:	be3e2fe0 	.word	0xbe3e2fe0
 8007640:	00000000 	.word	0x00000000
 8007644:	3ff00000 	.word	0x3ff00000
 8007648:	43400000 	.word	0x43400000
 800764c:	0003988e 	.word	0x0003988e
 8007650:	000bb679 	.word	0x000bb679
 8007654:	0801e088 	.word	0x0801e088
 8007658:	3ff00000 	.word	0x3ff00000
 800765c:	40080000 	.word	0x40080000
 8007660:	0801e0a8 	.word	0x0801e0a8
 8007664:	0801e098 	.word	0x0801e098
 8007668:	a3b4      	add	r3, pc, #720	; (adr r3, 800793c <__ieee754_pow+0xa14>)
 800766a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766e:	4640      	mov	r0, r8
 8007670:	4649      	mov	r1, r9
 8007672:	f7f8 fdcb 	bl	800020c <__adddf3>
 8007676:	4622      	mov	r2, r4
 8007678:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800767c:	462b      	mov	r3, r5
 800767e:	4630      	mov	r0, r6
 8007680:	4639      	mov	r1, r7
 8007682:	f7f8 fdc1 	bl	8000208 <__aeabi_dsub>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800768e:	f7f9 fa03 	bl	8000a98 <__aeabi_dcmpgt>
 8007692:	2800      	cmp	r0, #0
 8007694:	f47f adfe 	bne.w	8007294 <__ieee754_pow+0x36c>
 8007698:	4aa3      	ldr	r2, [pc, #652]	; (8007928 <__ieee754_pow+0xa00>)
 800769a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800769e:	4293      	cmp	r3, r2
 80076a0:	f340 810a 	ble.w	80078b8 <__ieee754_pow+0x990>
 80076a4:	151b      	asrs	r3, r3, #20
 80076a6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80076aa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80076ae:	fa4a f303 	asr.w	r3, sl, r3
 80076b2:	445b      	add	r3, fp
 80076b4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80076b8:	4e9c      	ldr	r6, [pc, #624]	; (800792c <__ieee754_pow+0xa04>)
 80076ba:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80076be:	4116      	asrs	r6, r2
 80076c0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80076c4:	2000      	movs	r0, #0
 80076c6:	ea23 0106 	bic.w	r1, r3, r6
 80076ca:	f1c2 0214 	rsb	r2, r2, #20
 80076ce:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80076d2:	fa4a fa02 	asr.w	sl, sl, r2
 80076d6:	f1bb 0f00 	cmp.w	fp, #0
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4620      	mov	r0, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	bfb8      	it	lt
 80076e4:	f1ca 0a00 	rsblt	sl, sl, #0
 80076e8:	f7f8 fd8e 	bl	8000208 <__aeabi_dsub>
 80076ec:	e9cd 0100 	strd	r0, r1, [sp]
 80076f0:	4642      	mov	r2, r8
 80076f2:	464b      	mov	r3, r9
 80076f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076f8:	f7f8 fd88 	bl	800020c <__adddf3>
 80076fc:	2000      	movs	r0, #0
 80076fe:	a378      	add	r3, pc, #480	; (adr r3, 80078e0 <__ieee754_pow+0x9b8>)
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	4604      	mov	r4, r0
 8007706:	460d      	mov	r5, r1
 8007708:	f7f8 ff36 	bl	8000578 <__aeabi_dmul>
 800770c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007710:	4606      	mov	r6, r0
 8007712:	460f      	mov	r7, r1
 8007714:	4620      	mov	r0, r4
 8007716:	4629      	mov	r1, r5
 8007718:	f7f8 fd76 	bl	8000208 <__aeabi_dsub>
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	4640      	mov	r0, r8
 8007722:	4649      	mov	r1, r9
 8007724:	f7f8 fd70 	bl	8000208 <__aeabi_dsub>
 8007728:	a36f      	add	r3, pc, #444	; (adr r3, 80078e8 <__ieee754_pow+0x9c0>)
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	f7f8 ff23 	bl	8000578 <__aeabi_dmul>
 8007732:	a36f      	add	r3, pc, #444	; (adr r3, 80078f0 <__ieee754_pow+0x9c8>)
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	4680      	mov	r8, r0
 800773a:	4689      	mov	r9, r1
 800773c:	4620      	mov	r0, r4
 800773e:	4629      	mov	r1, r5
 8007740:	f7f8 ff1a 	bl	8000578 <__aeabi_dmul>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4640      	mov	r0, r8
 800774a:	4649      	mov	r1, r9
 800774c:	f7f8 fd5e 	bl	800020c <__adddf3>
 8007750:	4604      	mov	r4, r0
 8007752:	460d      	mov	r5, r1
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4630      	mov	r0, r6
 800775a:	4639      	mov	r1, r7
 800775c:	f7f8 fd56 	bl	800020c <__adddf3>
 8007760:	4632      	mov	r2, r6
 8007762:	463b      	mov	r3, r7
 8007764:	4680      	mov	r8, r0
 8007766:	4689      	mov	r9, r1
 8007768:	f7f8 fd4e 	bl	8000208 <__aeabi_dsub>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4620      	mov	r0, r4
 8007772:	4629      	mov	r1, r5
 8007774:	f7f8 fd48 	bl	8000208 <__aeabi_dsub>
 8007778:	4642      	mov	r2, r8
 800777a:	4606      	mov	r6, r0
 800777c:	460f      	mov	r7, r1
 800777e:	464b      	mov	r3, r9
 8007780:	4640      	mov	r0, r8
 8007782:	4649      	mov	r1, r9
 8007784:	f7f8 fef8 	bl	8000578 <__aeabi_dmul>
 8007788:	a35b      	add	r3, pc, #364	; (adr r3, 80078f8 <__ieee754_pow+0x9d0>)
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	4604      	mov	r4, r0
 8007790:	460d      	mov	r5, r1
 8007792:	f7f8 fef1 	bl	8000578 <__aeabi_dmul>
 8007796:	a35a      	add	r3, pc, #360	; (adr r3, 8007900 <__ieee754_pow+0x9d8>)
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f7f8 fd34 	bl	8000208 <__aeabi_dsub>
 80077a0:	4622      	mov	r2, r4
 80077a2:	462b      	mov	r3, r5
 80077a4:	f7f8 fee8 	bl	8000578 <__aeabi_dmul>
 80077a8:	a357      	add	r3, pc, #348	; (adr r3, 8007908 <__ieee754_pow+0x9e0>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	f7f8 fd2d 	bl	800020c <__adddf3>
 80077b2:	4622      	mov	r2, r4
 80077b4:	462b      	mov	r3, r5
 80077b6:	f7f8 fedf 	bl	8000578 <__aeabi_dmul>
 80077ba:	a355      	add	r3, pc, #340	; (adr r3, 8007910 <__ieee754_pow+0x9e8>)
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	f7f8 fd22 	bl	8000208 <__aeabi_dsub>
 80077c4:	4622      	mov	r2, r4
 80077c6:	462b      	mov	r3, r5
 80077c8:	f7f8 fed6 	bl	8000578 <__aeabi_dmul>
 80077cc:	a352      	add	r3, pc, #328	; (adr r3, 8007918 <__ieee754_pow+0x9f0>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f7f8 fd1b 	bl	800020c <__adddf3>
 80077d6:	4622      	mov	r2, r4
 80077d8:	462b      	mov	r3, r5
 80077da:	f7f8 fecd 	bl	8000578 <__aeabi_dmul>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4640      	mov	r0, r8
 80077e4:	4649      	mov	r1, r9
 80077e6:	f7f8 fd0f 	bl	8000208 <__aeabi_dsub>
 80077ea:	4604      	mov	r4, r0
 80077ec:	460d      	mov	r5, r1
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4640      	mov	r0, r8
 80077f4:	4649      	mov	r1, r9
 80077f6:	f7f8 febf 	bl	8000578 <__aeabi_dmul>
 80077fa:	2200      	movs	r2, #0
 80077fc:	e9cd 0100 	strd	r0, r1, [sp]
 8007800:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007804:	4620      	mov	r0, r4
 8007806:	4629      	mov	r1, r5
 8007808:	f7f8 fcfe 	bl	8000208 <__aeabi_dsub>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007814:	f7f8 ffda 	bl	80007cc <__aeabi_ddiv>
 8007818:	4632      	mov	r2, r6
 800781a:	4604      	mov	r4, r0
 800781c:	460d      	mov	r5, r1
 800781e:	463b      	mov	r3, r7
 8007820:	4640      	mov	r0, r8
 8007822:	4649      	mov	r1, r9
 8007824:	f7f8 fea8 	bl	8000578 <__aeabi_dmul>
 8007828:	4632      	mov	r2, r6
 800782a:	463b      	mov	r3, r7
 800782c:	f7f8 fcee 	bl	800020c <__adddf3>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	4620      	mov	r0, r4
 8007836:	4629      	mov	r1, r5
 8007838:	f7f8 fce6 	bl	8000208 <__aeabi_dsub>
 800783c:	4642      	mov	r2, r8
 800783e:	464b      	mov	r3, r9
 8007840:	f7f8 fce2 	bl	8000208 <__aeabi_dsub>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	2000      	movs	r0, #0
 800784a:	4939      	ldr	r1, [pc, #228]	; (8007930 <__ieee754_pow+0xa08>)
 800784c:	f7f8 fcdc 	bl	8000208 <__aeabi_dsub>
 8007850:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007854:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	da2f      	bge.n	80078be <__ieee754_pow+0x996>
 800785e:	4650      	mov	r0, sl
 8007860:	ec43 2b10 	vmov	d0, r2, r3
 8007864:	f000 f9c0 	bl	8007be8 <scalbn>
 8007868:	ec51 0b10 	vmov	r0, r1, d0
 800786c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007870:	f7ff bbf1 	b.w	8007056 <__ieee754_pow+0x12e>
 8007874:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <__ieee754_pow+0xa0c>)
 8007876:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800787a:	429e      	cmp	r6, r3
 800787c:	f77f af0c 	ble.w	8007698 <__ieee754_pow+0x770>
 8007880:	4b2d      	ldr	r3, [pc, #180]	; (8007938 <__ieee754_pow+0xa10>)
 8007882:	440b      	add	r3, r1
 8007884:	4303      	orrs	r3, r0
 8007886:	d00b      	beq.n	80078a0 <__ieee754_pow+0x978>
 8007888:	a325      	add	r3, pc, #148	; (adr r3, 8007920 <__ieee754_pow+0x9f8>)
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007892:	f7f8 fe71 	bl	8000578 <__aeabi_dmul>
 8007896:	a322      	add	r3, pc, #136	; (adr r3, 8007920 <__ieee754_pow+0x9f8>)
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	f7ff bbdb 	b.w	8007056 <__ieee754_pow+0x12e>
 80078a0:	4622      	mov	r2, r4
 80078a2:	462b      	mov	r3, r5
 80078a4:	f7f8 fcb0 	bl	8000208 <__aeabi_dsub>
 80078a8:	4642      	mov	r2, r8
 80078aa:	464b      	mov	r3, r9
 80078ac:	f7f9 f8ea 	bl	8000a84 <__aeabi_dcmpge>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	f43f aef1 	beq.w	8007698 <__ieee754_pow+0x770>
 80078b6:	e7e7      	b.n	8007888 <__ieee754_pow+0x960>
 80078b8:	f04f 0a00 	mov.w	sl, #0
 80078bc:	e718      	b.n	80076f0 <__ieee754_pow+0x7c8>
 80078be:	4621      	mov	r1, r4
 80078c0:	e7d4      	b.n	800786c <__ieee754_pow+0x944>
 80078c2:	2000      	movs	r0, #0
 80078c4:	491a      	ldr	r1, [pc, #104]	; (8007930 <__ieee754_pow+0xa08>)
 80078c6:	f7ff bb8f 	b.w	8006fe8 <__ieee754_pow+0xc0>
 80078ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078ce:	f7ff bb8b 	b.w	8006fe8 <__ieee754_pow+0xc0>
 80078d2:	4630      	mov	r0, r6
 80078d4:	4639      	mov	r1, r7
 80078d6:	f7ff bb87 	b.w	8006fe8 <__ieee754_pow+0xc0>
 80078da:	4693      	mov	fp, r2
 80078dc:	f7ff bb98 	b.w	8007010 <__ieee754_pow+0xe8>
 80078e0:	00000000 	.word	0x00000000
 80078e4:	3fe62e43 	.word	0x3fe62e43
 80078e8:	fefa39ef 	.word	0xfefa39ef
 80078ec:	3fe62e42 	.word	0x3fe62e42
 80078f0:	0ca86c39 	.word	0x0ca86c39
 80078f4:	be205c61 	.word	0xbe205c61
 80078f8:	72bea4d0 	.word	0x72bea4d0
 80078fc:	3e663769 	.word	0x3e663769
 8007900:	c5d26bf1 	.word	0xc5d26bf1
 8007904:	3ebbbd41 	.word	0x3ebbbd41
 8007908:	af25de2c 	.word	0xaf25de2c
 800790c:	3f11566a 	.word	0x3f11566a
 8007910:	16bebd93 	.word	0x16bebd93
 8007914:	3f66c16c 	.word	0x3f66c16c
 8007918:	5555553e 	.word	0x5555553e
 800791c:	3fc55555 	.word	0x3fc55555
 8007920:	c2f8f359 	.word	0xc2f8f359
 8007924:	01a56e1f 	.word	0x01a56e1f
 8007928:	3fe00000 	.word	0x3fe00000
 800792c:	000fffff 	.word	0x000fffff
 8007930:	3ff00000 	.word	0x3ff00000
 8007934:	4090cbff 	.word	0x4090cbff
 8007938:	3f6f3400 	.word	0x3f6f3400
 800793c:	652b82fe 	.word	0x652b82fe
 8007940:	3c971547 	.word	0x3c971547

08007944 <__ieee754_sqrt>:
 8007944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007948:	4955      	ldr	r1, [pc, #340]	; (8007aa0 <__ieee754_sqrt+0x15c>)
 800794a:	ec55 4b10 	vmov	r4, r5, d0
 800794e:	43a9      	bics	r1, r5
 8007950:	462b      	mov	r3, r5
 8007952:	462a      	mov	r2, r5
 8007954:	d112      	bne.n	800797c <__ieee754_sqrt+0x38>
 8007956:	ee10 2a10 	vmov	r2, s0
 800795a:	ee10 0a10 	vmov	r0, s0
 800795e:	4629      	mov	r1, r5
 8007960:	f7f8 fe0a 	bl	8000578 <__aeabi_dmul>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4620      	mov	r0, r4
 800796a:	4629      	mov	r1, r5
 800796c:	f7f8 fc4e 	bl	800020c <__adddf3>
 8007970:	4604      	mov	r4, r0
 8007972:	460d      	mov	r5, r1
 8007974:	ec45 4b10 	vmov	d0, r4, r5
 8007978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800797c:	2d00      	cmp	r5, #0
 800797e:	ee10 0a10 	vmov	r0, s0
 8007982:	4621      	mov	r1, r4
 8007984:	dc0f      	bgt.n	80079a6 <__ieee754_sqrt+0x62>
 8007986:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800798a:	4330      	orrs	r0, r6
 800798c:	d0f2      	beq.n	8007974 <__ieee754_sqrt+0x30>
 800798e:	b155      	cbz	r5, 80079a6 <__ieee754_sqrt+0x62>
 8007990:	ee10 2a10 	vmov	r2, s0
 8007994:	4620      	mov	r0, r4
 8007996:	4629      	mov	r1, r5
 8007998:	f7f8 fc36 	bl	8000208 <__aeabi_dsub>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	f7f8 ff14 	bl	80007cc <__aeabi_ddiv>
 80079a4:	e7e4      	b.n	8007970 <__ieee754_sqrt+0x2c>
 80079a6:	151b      	asrs	r3, r3, #20
 80079a8:	d073      	beq.n	8007a92 <__ieee754_sqrt+0x14e>
 80079aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80079ae:	07dd      	lsls	r5, r3, #31
 80079b0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80079b4:	bf48      	it	mi
 80079b6:	0fc8      	lsrmi	r0, r1, #31
 80079b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80079bc:	bf44      	itt	mi
 80079be:	0049      	lslmi	r1, r1, #1
 80079c0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80079c4:	2500      	movs	r5, #0
 80079c6:	1058      	asrs	r0, r3, #1
 80079c8:	0fcb      	lsrs	r3, r1, #31
 80079ca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80079ce:	0049      	lsls	r1, r1, #1
 80079d0:	2316      	movs	r3, #22
 80079d2:	462c      	mov	r4, r5
 80079d4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80079d8:	19a7      	adds	r7, r4, r6
 80079da:	4297      	cmp	r7, r2
 80079dc:	bfde      	ittt	le
 80079de:	19bc      	addle	r4, r7, r6
 80079e0:	1bd2      	suble	r2, r2, r7
 80079e2:	19ad      	addle	r5, r5, r6
 80079e4:	0fcf      	lsrs	r7, r1, #31
 80079e6:	3b01      	subs	r3, #1
 80079e8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80079ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80079f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80079f4:	d1f0      	bne.n	80079d8 <__ieee754_sqrt+0x94>
 80079f6:	f04f 0c20 	mov.w	ip, #32
 80079fa:	469e      	mov	lr, r3
 80079fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007a00:	42a2      	cmp	r2, r4
 8007a02:	eb06 070e 	add.w	r7, r6, lr
 8007a06:	dc02      	bgt.n	8007a0e <__ieee754_sqrt+0xca>
 8007a08:	d112      	bne.n	8007a30 <__ieee754_sqrt+0xec>
 8007a0a:	428f      	cmp	r7, r1
 8007a0c:	d810      	bhi.n	8007a30 <__ieee754_sqrt+0xec>
 8007a0e:	2f00      	cmp	r7, #0
 8007a10:	eb07 0e06 	add.w	lr, r7, r6
 8007a14:	da42      	bge.n	8007a9c <__ieee754_sqrt+0x158>
 8007a16:	f1be 0f00 	cmp.w	lr, #0
 8007a1a:	db3f      	blt.n	8007a9c <__ieee754_sqrt+0x158>
 8007a1c:	f104 0801 	add.w	r8, r4, #1
 8007a20:	1b12      	subs	r2, r2, r4
 8007a22:	428f      	cmp	r7, r1
 8007a24:	bf88      	it	hi
 8007a26:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007a2a:	1bc9      	subs	r1, r1, r7
 8007a2c:	4433      	add	r3, r6
 8007a2e:	4644      	mov	r4, r8
 8007a30:	0052      	lsls	r2, r2, #1
 8007a32:	f1bc 0c01 	subs.w	ip, ip, #1
 8007a36:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007a3a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007a3e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007a42:	d1dd      	bne.n	8007a00 <__ieee754_sqrt+0xbc>
 8007a44:	430a      	orrs	r2, r1
 8007a46:	d006      	beq.n	8007a56 <__ieee754_sqrt+0x112>
 8007a48:	1c5c      	adds	r4, r3, #1
 8007a4a:	bf13      	iteet	ne
 8007a4c:	3301      	addne	r3, #1
 8007a4e:	3501      	addeq	r5, #1
 8007a50:	4663      	moveq	r3, ip
 8007a52:	f023 0301 	bicne.w	r3, r3, #1
 8007a56:	106a      	asrs	r2, r5, #1
 8007a58:	085b      	lsrs	r3, r3, #1
 8007a5a:	07e9      	lsls	r1, r5, #31
 8007a5c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007a60:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007a64:	bf48      	it	mi
 8007a66:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007a6a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007a6e:	461c      	mov	r4, r3
 8007a70:	e780      	b.n	8007974 <__ieee754_sqrt+0x30>
 8007a72:	0aca      	lsrs	r2, r1, #11
 8007a74:	3815      	subs	r0, #21
 8007a76:	0549      	lsls	r1, r1, #21
 8007a78:	2a00      	cmp	r2, #0
 8007a7a:	d0fa      	beq.n	8007a72 <__ieee754_sqrt+0x12e>
 8007a7c:	02d6      	lsls	r6, r2, #11
 8007a7e:	d50a      	bpl.n	8007a96 <__ieee754_sqrt+0x152>
 8007a80:	f1c3 0420 	rsb	r4, r3, #32
 8007a84:	fa21 f404 	lsr.w	r4, r1, r4
 8007a88:	1e5d      	subs	r5, r3, #1
 8007a8a:	4099      	lsls	r1, r3
 8007a8c:	4322      	orrs	r2, r4
 8007a8e:	1b43      	subs	r3, r0, r5
 8007a90:	e78b      	b.n	80079aa <__ieee754_sqrt+0x66>
 8007a92:	4618      	mov	r0, r3
 8007a94:	e7f0      	b.n	8007a78 <__ieee754_sqrt+0x134>
 8007a96:	0052      	lsls	r2, r2, #1
 8007a98:	3301      	adds	r3, #1
 8007a9a:	e7ef      	b.n	8007a7c <__ieee754_sqrt+0x138>
 8007a9c:	46a0      	mov	r8, r4
 8007a9e:	e7bf      	b.n	8007a20 <__ieee754_sqrt+0xdc>
 8007aa0:	7ff00000 	.word	0x7ff00000

08007aa4 <fabs>:
 8007aa4:	ec51 0b10 	vmov	r0, r1, d0
 8007aa8:	ee10 2a10 	vmov	r2, s0
 8007aac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ab0:	ec43 2b10 	vmov	d0, r2, r3
 8007ab4:	4770      	bx	lr

08007ab6 <finite>:
 8007ab6:	ee10 3a90 	vmov	r3, s1
 8007aba:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8007abe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007ac2:	0fc0      	lsrs	r0, r0, #31
 8007ac4:	4770      	bx	lr

08007ac6 <matherr>:
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	4770      	bx	lr
 8007aca:	0000      	movs	r0, r0
 8007acc:	0000      	movs	r0, r0
	...

08007ad0 <nan>:
 8007ad0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007ad8 <nan+0x8>
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	00000000 	.word	0x00000000
 8007adc:	7ff80000 	.word	0x7ff80000

08007ae0 <rint>:
 8007ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ae2:	ec51 0b10 	vmov	r0, r1, d0
 8007ae6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007aea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007aee:	2e13      	cmp	r6, #19
 8007af0:	460b      	mov	r3, r1
 8007af2:	ee10 4a10 	vmov	r4, s0
 8007af6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007afa:	dc56      	bgt.n	8007baa <rint+0xca>
 8007afc:	2e00      	cmp	r6, #0
 8007afe:	da2b      	bge.n	8007b58 <rint+0x78>
 8007b00:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007b04:	4302      	orrs	r2, r0
 8007b06:	d023      	beq.n	8007b50 <rint+0x70>
 8007b08:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007b0c:	4302      	orrs	r2, r0
 8007b0e:	4254      	negs	r4, r2
 8007b10:	4314      	orrs	r4, r2
 8007b12:	0c4b      	lsrs	r3, r1, #17
 8007b14:	0b24      	lsrs	r4, r4, #12
 8007b16:	045b      	lsls	r3, r3, #17
 8007b18:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007b1c:	ea44 0103 	orr.w	r1, r4, r3
 8007b20:	460b      	mov	r3, r1
 8007b22:	492f      	ldr	r1, [pc, #188]	; (8007be0 <rint+0x100>)
 8007b24:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8007b28:	e9d1 6700 	ldrd	r6, r7, [r1]
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	4639      	mov	r1, r7
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7f8 fb6b 	bl	800020c <__adddf3>
 8007b36:	e9cd 0100 	strd	r0, r1, [sp]
 8007b3a:	463b      	mov	r3, r7
 8007b3c:	4632      	mov	r2, r6
 8007b3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b42:	f7f8 fb61 	bl	8000208 <__aeabi_dsub>
 8007b46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b4a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007b4e:	4639      	mov	r1, r7
 8007b50:	ec41 0b10 	vmov	d0, r0, r1
 8007b54:	b003      	add	sp, #12
 8007b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b58:	4a22      	ldr	r2, [pc, #136]	; (8007be4 <rint+0x104>)
 8007b5a:	4132      	asrs	r2, r6
 8007b5c:	ea01 0702 	and.w	r7, r1, r2
 8007b60:	4307      	orrs	r7, r0
 8007b62:	d0f5      	beq.n	8007b50 <rint+0x70>
 8007b64:	0852      	lsrs	r2, r2, #1
 8007b66:	4011      	ands	r1, r2
 8007b68:	430c      	orrs	r4, r1
 8007b6a:	d00b      	beq.n	8007b84 <rint+0xa4>
 8007b6c:	ea23 0202 	bic.w	r2, r3, r2
 8007b70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007b74:	2e13      	cmp	r6, #19
 8007b76:	fa43 f306 	asr.w	r3, r3, r6
 8007b7a:	bf0c      	ite	eq
 8007b7c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007b80:	2400      	movne	r4, #0
 8007b82:	4313      	orrs	r3, r2
 8007b84:	4916      	ldr	r1, [pc, #88]	; (8007be0 <rint+0x100>)
 8007b86:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007b8a:	4622      	mov	r2, r4
 8007b8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b90:	4620      	mov	r0, r4
 8007b92:	4629      	mov	r1, r5
 8007b94:	f7f8 fb3a 	bl	800020c <__adddf3>
 8007b98:	e9cd 0100 	strd	r0, r1, [sp]
 8007b9c:	4622      	mov	r2, r4
 8007b9e:	462b      	mov	r3, r5
 8007ba0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ba4:	f7f8 fb30 	bl	8000208 <__aeabi_dsub>
 8007ba8:	e7d2      	b.n	8007b50 <rint+0x70>
 8007baa:	2e33      	cmp	r6, #51	; 0x33
 8007bac:	dd07      	ble.n	8007bbe <rint+0xde>
 8007bae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007bb2:	d1cd      	bne.n	8007b50 <rint+0x70>
 8007bb4:	ee10 2a10 	vmov	r2, s0
 8007bb8:	f7f8 fb28 	bl	800020c <__adddf3>
 8007bbc:	e7c8      	b.n	8007b50 <rint+0x70>
 8007bbe:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8007bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc6:	40f2      	lsrs	r2, r6
 8007bc8:	4210      	tst	r0, r2
 8007bca:	d0c1      	beq.n	8007b50 <rint+0x70>
 8007bcc:	0852      	lsrs	r2, r2, #1
 8007bce:	4210      	tst	r0, r2
 8007bd0:	bf1f      	itttt	ne
 8007bd2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007bd6:	ea20 0202 	bicne.w	r2, r0, r2
 8007bda:	4134      	asrne	r4, r6
 8007bdc:	4314      	orrne	r4, r2
 8007bde:	e7d1      	b.n	8007b84 <rint+0xa4>
 8007be0:	0801e0b8 	.word	0x0801e0b8
 8007be4:	000fffff 	.word	0x000fffff

08007be8 <scalbn>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	ec55 4b10 	vmov	r4, r5, d0
 8007bee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	462b      	mov	r3, r5
 8007bf6:	b9aa      	cbnz	r2, 8007c24 <scalbn+0x3c>
 8007bf8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007bfc:	4323      	orrs	r3, r4
 8007bfe:	d03b      	beq.n	8007c78 <scalbn+0x90>
 8007c00:	4b31      	ldr	r3, [pc, #196]	; (8007cc8 <scalbn+0xe0>)
 8007c02:	4629      	mov	r1, r5
 8007c04:	2200      	movs	r2, #0
 8007c06:	ee10 0a10 	vmov	r0, s0
 8007c0a:	f7f8 fcb5 	bl	8000578 <__aeabi_dmul>
 8007c0e:	4b2f      	ldr	r3, [pc, #188]	; (8007ccc <scalbn+0xe4>)
 8007c10:	429e      	cmp	r6, r3
 8007c12:	4604      	mov	r4, r0
 8007c14:	460d      	mov	r5, r1
 8007c16:	da12      	bge.n	8007c3e <scalbn+0x56>
 8007c18:	a327      	add	r3, pc, #156	; (adr r3, 8007cb8 <scalbn+0xd0>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f7f8 fcab 	bl	8000578 <__aeabi_dmul>
 8007c22:	e009      	b.n	8007c38 <scalbn+0x50>
 8007c24:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007c28:	428a      	cmp	r2, r1
 8007c2a:	d10c      	bne.n	8007c46 <scalbn+0x5e>
 8007c2c:	ee10 2a10 	vmov	r2, s0
 8007c30:	4620      	mov	r0, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	f7f8 faea 	bl	800020c <__adddf3>
 8007c38:	4604      	mov	r4, r0
 8007c3a:	460d      	mov	r5, r1
 8007c3c:	e01c      	b.n	8007c78 <scalbn+0x90>
 8007c3e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c42:	460b      	mov	r3, r1
 8007c44:	3a36      	subs	r2, #54	; 0x36
 8007c46:	4432      	add	r2, r6
 8007c48:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007c4c:	428a      	cmp	r2, r1
 8007c4e:	dd0b      	ble.n	8007c68 <scalbn+0x80>
 8007c50:	ec45 4b11 	vmov	d1, r4, r5
 8007c54:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007cc0 <scalbn+0xd8>
 8007c58:	f000 f83c 	bl	8007cd4 <copysign>
 8007c5c:	a318      	add	r3, pc, #96	; (adr r3, 8007cc0 <scalbn+0xd8>)
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	ec51 0b10 	vmov	r0, r1, d0
 8007c66:	e7da      	b.n	8007c1e <scalbn+0x36>
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	dd08      	ble.n	8007c7e <scalbn+0x96>
 8007c6c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c74:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c78:	ec45 4b10 	vmov	d0, r4, r5
 8007c7c:	bd70      	pop	{r4, r5, r6, pc}
 8007c7e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007c82:	da0d      	bge.n	8007ca0 <scalbn+0xb8>
 8007c84:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c88:	429e      	cmp	r6, r3
 8007c8a:	ec45 4b11 	vmov	d1, r4, r5
 8007c8e:	dce1      	bgt.n	8007c54 <scalbn+0x6c>
 8007c90:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007cb8 <scalbn+0xd0>
 8007c94:	f000 f81e 	bl	8007cd4 <copysign>
 8007c98:	a307      	add	r3, pc, #28	; (adr r3, 8007cb8 <scalbn+0xd0>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	e7e0      	b.n	8007c62 <scalbn+0x7a>
 8007ca0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ca4:	3236      	adds	r2, #54	; 0x36
 8007ca6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007caa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007cae:	4620      	mov	r0, r4
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <scalbn+0xe8>)
 8007cb6:	e7b2      	b.n	8007c1e <scalbn+0x36>
 8007cb8:	c2f8f359 	.word	0xc2f8f359
 8007cbc:	01a56e1f 	.word	0x01a56e1f
 8007cc0:	8800759c 	.word	0x8800759c
 8007cc4:	7e37e43c 	.word	0x7e37e43c
 8007cc8:	43500000 	.word	0x43500000
 8007ccc:	ffff3cb0 	.word	0xffff3cb0
 8007cd0:	3c900000 	.word	0x3c900000

08007cd4 <copysign>:
 8007cd4:	ec51 0b10 	vmov	r0, r1, d0
 8007cd8:	ee11 0a90 	vmov	r0, s3
 8007cdc:	ee10 2a10 	vmov	r2, s0
 8007ce0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007ce4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007ce8:	ea41 0300 	orr.w	r3, r1, r0
 8007cec:	ec43 2b10 	vmov	d0, r2, r3
 8007cf0:	4770      	bx	lr
	...

08007cf4 <_init>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	bf00      	nop
 8007cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfa:	bc08      	pop	{r3}
 8007cfc:	469e      	mov	lr, r3
 8007cfe:	4770      	bx	lr

08007d00 <_fini>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	bf00      	nop
 8007d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d06:	bc08      	pop	{r3}
 8007d08:	469e      	mov	lr, r3
 8007d0a:	4770      	bx	lr
